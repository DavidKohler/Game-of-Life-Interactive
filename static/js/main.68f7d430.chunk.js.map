{"version":3,"sources":["SliderHandle.js","SliderMarks.js","GridCustomization.js","HomePage.js","DrawGridPage.js","CellularAutomatonSketch.js","LoadRLEPage.js","RLElogic.js","SavedRLEModal.js","RandomGridPage.js","App.js","serviceWorker.js","index.js"],"names":["SliderHandle","props","value","dragging","index","rest","FlexHandle","key","Value","styled","Handle","div","cellRatioMarks","0","20","40","50","60","80","100","cellSizeMarks","1","5","10","15","25","30","35","dimensionMarks","70","framerateMarks","wrapperStyle","width","margin","GridCustomization","handleBackgroundColorUpdate","color","setState","backgroundColor","hex","handleCellColorUpdate","cellColor","handleSubmit","drawerOpen","submitFunction","state","toggleDrawer","open","event","updateBornButtons","isPressed","newPressings","birthRulePressed","slice","birthRule","reduce","out","bool","concat","updateCellRatio","val","alivePercentage","updateCellSize","cellSize","updateColumns","cols","updateFramerate","framerate","updateRows","rows","updateSurviveButtons","surviveRulePressed","surviveRule","bind","setTimeout","parentTab","bPressed","Array","fill","sPressed","bRule","forEach","v","undefined","sRule","this","className","Fragment","Button","onClick","Drawer","anchor","onClose","style","defaultValue","handle","max","marks","min","onChange","ButtonToolbar","aria-label","map","String","join","ButtonGroup","ind","variant","Component","HomePage","DrawGridPage","CellularAutomatonSketch","countNeighbors","g","r","c","maxR","maxC","sum","i","j","createGrid","length","playButton","nextButton","grid","playing","sketch","p5","p","toggleNext","draw","togglePlay","noLoop","html","loop","setup","height","createCanvas","parent","refLoc","current","frameRate","createButton","mousePressed","position","background","x","y","stroke","rect","next","thisCell","nAlive","includes","ref","LoadRLEPage","toggleLoadDrawer","loadDrawer","updateParameters","newParams","resetAutomata","readSingleFile","e","file","target","files","reader","FileReader","onload","contents","result","readAsText","refreshVal","renderRef","React","createRef","document","getElementById","addEventListener","displayGrid","type","id","accept","gridToRLE","rowSums","row","a","b","colSums","top","findIndex","bot","reverse","minCol","maxCol","findMeaningfulBoundaries","RLEarray","push","RLEgroups","rowString","col","cell","cellCounter","possibleOptimization","indicesToRemove","sort","splice","pop","encodeGrid","finishedWriting","pos","individualLine","toString","cells","match","charAt","SavedRLEModal","handleClose","showModal","handleShow","RLE","savedRLE","downloadRLEFile","data","Blob","window","navigator","msSaveOrOpenBlob","createElement","url","URL","createObjectURL","href","download","body","appendChild","click","removeChild","revokeObjectURL","Modal","show","size","onHide","Header","closeButton","Title","Body","line","Footer","RandomGridPage","aliveP","modifiedProbRandom","Math","floor","random","generateGrid","newGrid","App","refreshTabVal","resetTab","elems","querySelectorAll","parentNode","Tabs","defaultActiveKey","onSelect","Tab","eventKey","title","Boolean","location","hostname","ReactDOM","render","StrictMode","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.68f7d430.chunk.js","sourcesContent":["/*\n    Function to create desired slider handle for customization drawers\n    Idea for this code comes from zealous-snyder-0bj4r\n*/\n\nimport React from 'react';\nimport styled from 'styled-components';\nimport { Handle } from 'rc-slider';\n\nexport function SliderHandle(props) {\n  const { value, dragging, index, ...rest } = props;\n\n  return (\n    <FlexHandle key={index} value={value} {...rest}>\n      {dragging && <Value>{value}</Value>}\n    </FlexHandle>\n  );\n}\n\nconst FlexHandle = styled(Handle)`\n  display: flex;\n  justify-content: center;\n`;\n\nconst Value = styled.div`\n  margin-top: -32px;\n  white-space: nowrap;\n  color: black;\n  font-size: 14px;\n  font-weight: bold;\n`;\n","/*\n    File containing marks and labels for sliders used in customization\n*/\n\n// ratio of alive/dead cell slider\nconst cellRatioMarks = {\n  0: '0/100',\n  20: '20/80',\n  40: '40/60',\n  50: '50/50',\n  60: '60/40',\n  80: '80/20',\n  100: '100/0',\n};\n\n// cell size slider\nconst cellSizeMarks = {\n  1: '1',\n  5: '5',\n  10: '10',\n  15: '15',\n  20: '20',\n  25: '25',\n  30: '30',\n  35: '35',\n  40: '40',\n};\n\n// row and column sliders\nconst dimensionMarks = {\n  1: '1',\n  10: '10',\n  20: '20',\n  30: '30',\n  40: '40',\n  50: '50',\n  60: '60',\n  70: '70',\n  80: '80',\n};\n\n// framerate slider\nconst framerateMarks = {\n  1: '1',\n  10: '10',\n  20: '20',\n  30: '30',\n  40: '40',\n  50: '50',\n  60: '60',\n};\n\nexport { cellRatioMarks, cellSizeMarks, dimensionMarks, framerateMarks };\n","import './GridCustomization.css';\nimport 'rc-slider/assets/index.css';\nimport Button from 'react-bootstrap/Button';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar';\nimport { ChromePicker } from 'react-color';\nimport Drawer from '@material-ui/core/Drawer';\nimport Slider from 'rc-slider';\nimport { SliderHandle } from './SliderHandle';\nimport React, { Component } from 'react';\nimport {\n  cellRatioMarks,\n  cellSizeMarks,\n  dimensionMarks,\n  framerateMarks,\n} from './SliderMarks';\n\nconst wrapperStyle = { width: 800, margin: 50 };\n\n/*\n    Component rendering customization drawer for grid\n*/\n\nclass GridCustomization extends Component {\n  constructor() {\n    super();\n    this.state = {\n      alivePercentage: 50,\n      backgroundColor: '#FFFFFF',\n      birthRule: [3],\n      birthRulePressed: [\n        false,\n        false,\n        false,\n        true,\n        false,\n        false,\n        false,\n        false,\n        false,\n      ],\n      cellColor: '#000000',\n      cols: 10,\n      drawerOpen: false,\n      framerate: 10,\n      cellSize: 20,\n      rows: 10,\n      surviveRule: [2, 3],\n      surviveRulePressed: [\n        false,\n        false,\n        true,\n        true,\n        false,\n        false,\n        false,\n        false,\n        false,\n      ],\n    };\n\n    this.handleBackgroundColorUpdate = this.handleBackgroundColorUpdate.bind(\n      this\n    );\n    this.handleCellColorUpdate = this.handleCellColorUpdate.bind(this);\n    this.toggleDrawer = this.toggleDrawer.bind(this);\n    this.updateBornButtons = this.updateBornButtons.bind(this);\n    this.updateCellRatio = this.updateCellRatio.bind(this);\n    this.updateCellSize = this.updateCellSize.bind(this);\n    this.updateColumns = this.updateColumns.bind(this);\n    this.updateFramerate = this.updateFramerate.bind(this);\n    this.updateRows = this.updateRows.bind(this);\n    this.updateSurviveButtons = this.updateSurviveButtons.bind(this);\n  }\n\n  componentDidMount() {\n    // check if rules were passed in (if tab is 'LOADRLE')\n    setTimeout(() => {\n      if (this.props.parentTab === 'LOADRLE') {\n        let bPressed = Array(9).fill(false);\n        let sPressed = Array(9).fill(false);\n        this.props.bRule.forEach((v) => {\n          if (v !== undefined) bPressed[v] = true;\n        });\n        this.props.sRule.forEach((v) => {\n          if (v !== undefined) sPressed[v] = true;\n        });\n        this.setState({\n          birthRule: this.props.bRule,\n          birthRulePressed: bPressed,\n          surviveRule: this.props.sRule,\n          surviveRulePressed: sPressed,\n        });\n      }\n    }, 0);\n  }\n\n  handleBackgroundColorUpdate = (color) => {\n    // update color of background of grid\n    this.setState({ backgroundColor: color.hex });\n  };\n\n  handleCellColorUpdate = (color) => {\n    // update color of live cells in grid\n    this.setState({ cellColor: color.hex });\n  };\n\n  handleSubmit = () => {\n    // handle click on submit button, activate parent submit function\n    this.setState({ drawerOpen: false });\n    this.props.submitFunction(this.state);\n  };\n\n  toggleDrawer = (open) => (event) => {\n    // toggle opening customization drawer\n    this.setState({ drawerOpen: open });\n  };\n\n  updateBornButtons = (isPressed, index) => {\n    // update birth rule and which buttons are pressed\n    let newPressings = this.state.birthRulePressed.slice(0);\n    newPressings[index] = !isPressed;\n    this.setState({\n      birthRulePressed: newPressings,\n      birthRule: newPressings.reduce(\n        (out, bool, index) => (bool ? out.concat(index) : out),\n        []\n      ),\n    });\n  };\n\n  updateCellRatio = (val) => {\n    // update percentage of live vs dead cells in grid\n    this.setState({\n      alivePercentage: val,\n    });\n  };\n\n  updateCellSize = (val) => {\n    // update cell size of sketch\n    this.setState({\n      cellSize: val,\n    });\n  };\n\n  updateColumns = (val) => {\n    // update number of columns in grid\n    this.setState({\n      cols: val,\n    });\n  };\n\n  updateFramerate = (val) => {\n    // update framerate for sketch\n    this.setState({\n      framerate: val,\n    });\n  };\n\n  updateRows = (val) => {\n    // update number of rows in grid\n    this.setState({\n      rows: val,\n    });\n  };\n\n  updateSurviveButtons = (isPressed, index) => {\n    // update survive rule and which buttons are pressed\n    let newPressings = this.state.surviveRulePressed.slice(0);\n    newPressings[index] = !isPressed;\n    this.setState({\n      surviveRulePressed: newPressings,\n      surviveRule: newPressings.reduce(\n        (out, bool, index) => (bool ? out.concat(index) : out),\n        []\n      ),\n    });\n  };\n\n  render() {\n    // render customization drawer and toggle button\n    let { birthRulePressed, surviveRulePressed } = this.state;\n\n    return (\n      <div className=\"customizer-drawer\">\n        <React.Fragment key={'drawerOpen'}>\n          <Button onClick={this.toggleDrawer(true)}>{'Customize'}</Button>\n          <Drawer\n            anchor={'right'}\n            onClose={this.toggleDrawer(false)}\n            open={this.state.drawerOpen}\n          >\n            {'Customization'}\n            <div className=\"column-slider\" style={wrapperStyle}>\n              {`Columns: ${this.state.cols}`}\n              <Slider\n                defaultValue={this.state.cols}\n                handle={SliderHandle}\n                max={80}\n                marks={dimensionMarks}\n                min={1}\n                onChange={(v) => this.updateColumns(v)}\n              />\n            </div>\n            <div className=\"row-slider\" style={wrapperStyle}>\n              {`Rows: ${this.state.rows}`}\n              <Slider\n                defaultValue={this.state.rows}\n                handle={SliderHandle}\n                marks={dimensionMarks}\n                max={80}\n                min={1}\n                onChange={(v) => this.updateRows(v)}\n              />\n            </div>\n            <div className=\"cell-size-slider\" style={wrapperStyle}>\n              {`Cell Size: ${this.state.cellSize}`}\n              <Slider\n                defaultValue={this.state.cellSize}\n                handle={SliderHandle}\n                marks={cellSizeMarks}\n                max={40}\n                min={1}\n                onChange={(v) => this.updateCellSize(v)}\n              />\n            </div>\n            {this.props.parentTab === 'RANDOM' && (\n              <div className=\"cell-ratio-slider\" style={wrapperStyle}>\n                {'Alive/Dead Cell Ratio'}\n                <Slider\n                  defaultValue={this.state.alivePercentage}\n                  handle={SliderHandle}\n                  marks={cellRatioMarks}\n                  max={100}\n                  min={0}\n                  onChange={(v) => this.updateCellRatio(v)}\n                />\n              </div>\n            )}\n            <div className=\"button-toolbar-container\">\n              <ButtonToolbar aria-label=\"Born Rule\">\n                {`Born Rule: B${this.state.birthRule.map(String).join('')}`}\n                <ButtonGroup className=\"mr-2\" aria-label=\"born group\">\n                  {birthRulePressed.map((val, ind) => {\n                    return (\n                      <Button\n                        key={ind}\n                        onClick={() => this.updateBornButtons(val, ind)}\n                        variant={val === true ? 'success' : 'outline-success'}\n                      >\n                        {ind}\n                      </Button>\n                    );\n                  })}\n                </ButtonGroup>\n                {`Survive Rule: S${this.state.surviveRule\n                  .map(String)\n                  .join('')}`}\n                <ButtonGroup className=\"mr-2\" aria-label=\"survive group\">\n                  {surviveRulePressed.map((val, ind) => {\n                    return (\n                      <Button\n                        key={ind}\n                        onClick={() => this.updateSurviveButtons(val, ind)}\n                        variant={val === true ? 'success' : 'outline-success'}\n                      >\n                        {ind}\n                      </Button>\n                    );\n                  })}\n                </ButtonGroup>\n              </ButtonToolbar>\n            </div>\n            <div className=\"framerate-slider\" style={wrapperStyle}>\n              {`Framerate: ${this.state.framerate}`}\n              <Slider\n                defaultValue={this.state.framerate}\n                handle={SliderHandle}\n                marks={framerateMarks}\n                max={60}\n                min={1}\n                onChange={(v) => this.updateFramerate(v)}\n              />\n            </div>\n            <div className=\"color-pickers\">\n              <div className=\"cell-color-picker\">\n                {`Cell Color: ${this.state.cellColor}`}\n                <ChromePicker\n                  color={this.state.cellColor}\n                  onChange={this.handleCellColorUpdate}\n                />\n              </div>\n              <div className=\"cell-background-picker\">\n                {`Background Color: ${this.state.backgroundColor}`}\n                <ChromePicker\n                  color={this.state.backgroundColor}\n                  onChange={this.handleBackgroundColorUpdate}\n                />\n              </div>\n            </div>\n            <div className=\"submit-container\">\n              <Button onClick={this.handleSubmit}>Submit</Button>\n            </div>\n          </Drawer>\n        </React.Fragment>\n      </div>\n    );\n  }\n}\n\nexport default GridCustomization;\n\n// TODO styling\n","import React, { Component } from 'react';\nimport GridCustomization from './GridCustomization';\n\nclass HomePage extends Component {\n  render() {\n    return (\n      <div>\n        Home Page!\n        <GridCustomization parentTab=\"HOME\" />\n      </div>\n    );\n  }\n}\n\nexport default HomePage;\n\n//TODO\n//add homepage text and fluff\n//styling\n// add user-select: none to text stuff\n// add warning about using B0 on other boundless apps\n","import React, { Component } from 'react';\n\nclass DrawGridPage extends Component {\n  render() {\n    return <div>Draw Grid Page!</div>;\n  }\n}\n\nexport default DrawGridPage;\n\n//TODO\n// add drawing grid\n// convert grid to RLE\n// find meaningful boundaries for saved RLE\n// run animation from grid sketch\n// swtich sketch components\n// add UI for customization\n// styling\n// allow for other rulesets\n","import React, { Component } from 'react';\nimport p5 from 'p5';\n\n/*\n    Component to render p5 sketch of cellular automaton based on parameters passed in\n*/\n\nclass CellularAutomatonSketch extends Component {\n  componentDidMount() {\n    let {\n      backgroundColor,\n      birthRule,\n      cellColor,\n      cellSize,\n      cols,\n      framerate,\n      grid,\n      rows,\n      surviveRule,\n    } = this.props;\n\n    let playButton;\n    let playing = false;\n    let nextButton;\n\n    // create sketch\n    this.sketch = new p5((p) => {\n      p.setup = () => {\n        // setup sketch and buttons\n        let width = cols * cellSize;\n        let height = rows * cellSize;\n\n        p.createCanvas(width, height).parent(this.props.refLoc.current);\n\n        p.frameRate(framerate);\n\n        playButton = p.createButton('Play');\n        playButton.mousePressed(togglePlay);\n        playButton.style('color', '#fff');\n        playButton.style('background-color', '#007bff');\n        playButton.style('border-color', '#007bff');\n        playButton.style('font-weight', '400');\n        playButton.style('border', '1px solid transparent');\n        playButton.style('padding', '.375rem .75rem');\n        playButton.style('font-size', '1rem');\n        playButton.style('line-height', '1.5');\n        playButton.style('border-radius', '.25rem');\n\n        playButton.position(50, 50);\n\n        nextButton = p.createButton('Next');\n        nextButton.mousePressed(toggleNext);\n        nextButton.style('color', '#fff');\n        nextButton.style('background-color', '#007bff');\n        nextButton.style('border-color', '#007bff');\n        nextButton.style('font-weight', '400');\n        nextButton.style('border', '1px solid transparent');\n        nextButton.style('padding', '.375rem .75rem');\n        nextButton.style('font-size', '1rem');\n        nextButton.style('line-height', '1.5');\n        nextButton.style('border-radius', '.25rem');\n\n        nextButton.position(100, 100);\n\n        p.noLoop();\n      };\n\n      p.draw = () => {\n        // draw cells and grid\n        p.background(backgroundColor);\n\n        for (let i = 0; i < rows; i++) {\n          for (let j = 0; j < cols; j++) {\n            let x = j * cellSize;\n            let y = i * cellSize;\n            if (grid[i][j] === 1) {\n              p.fill(cellColor);\n              p.stroke(backgroundColor);\n              p.rect(x, y, cellSize - 1, cellSize - 1);\n            }\n          }\n        }\n\n        let next = this.createGrid(rows, cols);\n\n        for (let i = 0; i < rows; i++) {\n          for (let j = 0; j < cols; j++) {\n            let thisCell = grid[i][j];\n            let nAlive = this.countNeighbors(grid, i, j, rows, cols);\n\n            if (thisCell === 1) {\n              // alive cell, check for survival\n              if (surviveRule.includes(nAlive)) {\n                // lives on\n                next[i][j] = 1;\n              } else {\n                // underpopulation or overpopulation -> dies\n                next[i][j] = 0;\n              }\n            } else {\n              // dead cell, check for birth\n              if (birthRule.includes(nAlive)) {\n                // reproduces\n                next[i][j] = 1;\n              } else {\n                // stays dead\n                next[i][j] = 0;\n              }\n            }\n          }\n        }\n        grid = next;\n      };\n\n      function toggleNext() {\n        // control next button\n        p.draw();\n      }\n\n      function togglePlay() {\n        // control play button\n        if (playing) {\n          p.noLoop();\n          playButton.html('Play');\n        } else {\n          p.loop();\n          playButton.html('Pause');\n        }\n        playing = !playing;\n      }\n    });\n  }\n\n  countNeighbors = (g, r, c, maxR, maxC) => {\n    // find number of neighbors from cell at g[r][c]\n    let sum = 0;\n    for (let i = r - 1; i < r + 2; i++) {\n      for (let j = c - 1; j < c + 2; j++) {\n        if (i >= 0 && i < maxR && j >= 0 && j < maxC) {\n          sum += g[i][j];\n        }\n      }\n    }\n    sum -= g[r][c];\n    return sum;\n  };\n\n  createGrid = (r, c) => {\n    // create new grid of size r*c\n    let g = new Array(r);\n    for (let i = 0; i < g.length; i++) {\n      g[i] = new Array(c);\n    }\n    return g;\n  };\n\n  render() {\n    // render to parent component\n    return (\n      <div className=\"CellularAutomatonSketch\">\n        <div ref={this.props.refLoc}></div>\n      </div>\n    );\n  }\n}\n\nexport default CellularAutomatonSketch;\n\n//TODO\n// change position and style of buttons\n","import React, { Component } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport GridCustomization from './GridCustomization';\nimport CellularAutomatonSketch from './CellularAutomatonSketch';\nimport Drawer from '@material-ui/core/Drawer';\n\nclass LoadRLEPage extends Component {\n  constructor() {\n    super();\n    this.state = {\n      backgroundColor: '#FFFFFF',\n      birthRule: [],\n      cellColor: '#000000',\n      cellSize: 20,\n      cols: 1,\n      framerate: 5,\n      loadDrawer: false,\n      rows: 1,\n      grid: [],\n      refreshVal: 0,\n      surviveRule: [],\n      file: '',\n    };\n    this.renderRef = React.createRef();\n    this.resetAutomata = this.resetAutomata.bind(this);\n    this.updateParameters = this.updateParameters.bind(this);\n    this.toggleLoadDrawer = this.toggleLoadDrawer.bind(this);\n  }\n\n  toggleLoadDrawer = (open) => (event) => {\n    // toggle opening customization drawer\n    this.setState({ loadDrawer: open });\n  };\n\n  resetAutomata() {\n    // refresh grid by increasing key of component\n    this.setState((state) => ({\n      refreshVal: state.refreshVal + 1,\n    }));\n  }\n\n  updateParameters = (newParams) => {\n    // update grid parameters passed up from customization drawer\n    this.resetAutomata();\n    setTimeout(() => {\n      this.setState({ ...newParams });\n    }, 0);\n  };\n\n  readSingleFile = (e) => {\n    // read RLE file from upload\n    let file = e.target.files[0];\n    if (!file) {\n      return;\n    }\n    let reader = new FileReader();\n    reader.onload = (e) => {\n      let contents = e.target.result;\n      // this.displayContents(contents);\n      this.setState({\n        file: contents,\n      });\n    };\n    reader.readAsText(file);\n  };\n\n  componentDidUpdate() {\n    // set listener for file upload when drawer is open\n    if (this.state.loadDrawer === true) {\n      setTimeout(() => {\n        document\n          .getElementById('file-input')\n          .addEventListener('change', this.readSingleFile, false);\n      }, 0);\n    }\n  }\n\n  render() {\n    // render random grid page\n    // check if grid exists, if so, render grid\n    let displayGrid = this.state.grid.length > 0;\n\n    return (\n      <div>\n        RLE Page!\n        <div className=\"load-drawer-container\">\n          <React.Fragment key={'drawerOpen'}>\n            <Button onClick={this.toggleLoadDrawer(true)}>{'Load RLE'}</Button>\n            <Drawer\n              anchor={'right'}\n              onClose={this.toggleLoadDrawer(false)}\n              open={this.state.loadDrawer}\n            >\n              {'Load RLE'}\n              <input type=\"file\" id=\"file-input\" accept=\".rle\" />\n              <h3>Contents of the file:</h3>\n              {this.state.file}\n            </Drawer>\n          </React.Fragment>\n        </div>\n        {displayGrid && (\n          <div className=\"customization-container\">\n            <GridCustomization\n              bRule={this.state.birthRule}\n              parentTab={'LOADRLE'}\n              sRule={this.state.surviveRule}\n              submitFunction={this.updateParameters}\n            />\n          </div>\n        )}\n        {displayGrid && (\n          <div className=\"sketch-container\">\n            <CellularAutomatonSketch\n              {...this.state}\n              key={this.state.refreshVal}\n              refLoc={this.renderRef}\n            />\n          </div>\n        )}\n        {displayGrid && (\n          <div className=\"reset-button-container\">\n            <Button onClick={this.resetAutomata}>Reset</Button>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default LoadRLEPage;\n\n//TODO\n// load in RLE grids\n// add animation\n// add UI customization\n// add padding for RLE input grids\n// styling\n// allow for other rulesets\n","/*\n    File for all functions dealing with RLE logic\n*/\n\nexport default function gridToRLE(grid, bRule, sRule) {\n  // convert grid with B rule and S rule to RLE array\n  // where each element in array is a separate line of RLE file\n  let { top, bot, minCol, maxCol } = findMeaningfulBoundaries(grid);\n  let RLEarray = [];\n  RLEarray.push(\n    `x = ${maxCol - minCol + 1}, y = ${bot - top + 1}, rule = B${bRule\n      .map(String)\n      .join('')}/S${sRule.map(String).join('')}`\n  );\n  let RLEgroups = encodeGrid(grid, top, bot, minCol, maxCol);\n  let finishedWriting = false;\n  let pos = 0;\n  let individualLine = '';\n  while (finishedWriting === false) {\n    if (RLEgroups[pos][1] === 1) {\n      // single cell\n      if (1 + individualLine.length > 70) {\n        // new line\n        RLEarray.push(individualLine);\n        individualLine = RLEgroups[pos][0];\n      } else {\n        // same line\n        individualLine = individualLine.concat(RLEgroups[pos][0]);\n      }\n    } else {\n      if (\n        RLEgroups[pos][1].toString().length + (individualLine.length + 1) >\n        70\n      ) {\n        // new line\n        RLEarray.push(individualLine);\n        individualLine = RLEgroups[pos][1].toString().concat(RLEgroups[pos][0]);\n      } else {\n        // same line\n        individualLine = individualLine.concat(\n          RLEgroups[pos][1].toString().concat(RLEgroups[pos][0])\n        );\n      }\n    }\n    if (pos === RLEgroups.length - 1) {\n      RLEarray.push(individualLine);\n      finishedWriting = true;\n    } else {\n      pos++;\n    }\n  }\n\n  return RLEarray;\n}\n\nfunction findMeaningfulBoundaries(grid) {\n  // given grid, find smallest boundaries that contain all\n  // specified cells, which is needed for RLE file\n  let rowSums = grid.map((row) => {\n    return row.reduce((a, b) => {\n      return a + b;\n    });\n  });\n  let sumCol = (r, a) => r.map((b, i) => a[i] + b);\n  let colSums = grid.reduce(sumCol);\n\n  let top = rowSums.findIndex((v) => v > 0);\n  let bot =\n    rowSums.length -\n    1 -\n    rowSums\n      .slice()\n      .reverse()\n      .findIndex((v) => v > 0);\n\n  let minCol = colSums.findIndex((v) => v > 0);\n  let maxCol =\n    colSums.length -\n    1 -\n    colSums\n      .slice()\n      .reverse()\n      .findIndex((v) => v > 0);\n\n  return {\n    top,\n    bot,\n    minCol,\n    maxCol,\n  };\n}\n\nfunction cellCounter(cells) {\n  // convert strings of cells to value length format\n  // ex: bb -> ['b', 2]\n  let s = cells.match(/([a-zA-Z])\\1*/g) || [];\n  return s.map((v) => {\n    return [v.charAt(0), v.length];\n  });\n}\n\nfunction encodeGrid(grid, top, bot, minCol, maxCol) {\n  // encode a grid from 2D array of 0's and 1's to\n  // unsimplified RLE string format\n  // ex: 0 1 1 -> boo\n  let RLEgroups = [];\n  for (let row = top; row < bot + 1; row++) {\n    let rowString = '';\n    for (let col = minCol; col < maxCol + 1; col++) {\n      let cell = grid[row][col];\n      if (cell === 1) {\n        rowString = rowString.concat('o');\n      } else {\n        rowString = rowString.concat('b');\n      }\n    }\n    let group = cellCounter(rowString);\n    group.forEach((g) => {\n      RLEgroups.push(g);\n    });\n    if (row !== bot) {\n      RLEgroups.push(['$', 1]);\n    } else {\n      RLEgroups.push(['!', 1]);\n    }\n  }\n\n  // optimize RLE string by considering neighbors in string\n  let possibleOptimization = true;\n  while (possibleOptimization === true) {\n    possibleOptimization = false;\n    let indicesToRemove = [];\n    for (let i = 0; i < RLEgroups.length; i++) {\n      if (i < RLEgroups.length - 1) {\n        if (\n          ['$', '!'].includes(RLEgroups[i + 1][0]) &&\n          RLEgroups[i][0] === 'b'\n        ) {\n          indicesToRemove.push(i);\n        }\n        if (RLEgroups[i][0] === RLEgroups[i + 1][0]) {\n          RLEgroups[i + 1] = [\n            RLEgroups[i][0],\n            RLEgroups[i][1] + RLEgroups[i + 1][1],\n          ];\n          indicesToRemove.push(i);\n        }\n      }\n    }\n\n    // remove specified indices from array\n    if (indicesToRemove.length > 0) {\n      possibleOptimization = true;\n      // delete indices\n      indicesToRemove.sort(function (a, b) {\n        return a - b;\n      });\n      while (indicesToRemove.length) {\n        RLEgroups.splice(indicesToRemove.pop(), 1);\n      }\n    }\n  }\n  return RLEgroups;\n}\n","import Button from 'react-bootstrap/Button';\nimport gridToRLE from './RLElogic';\nimport Modal from 'react-bootstrap/Modal';\nimport React, { Component } from 'react';\n\n/*\n    Component for RLE popup modal\n*/\n\nclass SavedRLEModal extends Component {\n  constructor() {\n    super();\n    this.state = {\n      savedRLE: [''],\n      showModal: false,\n    };\n    this.handleClose = this.handleClose.bind(this);\n    this.handleShow = this.handleShow.bind(this);\n  }\n\n  handleClose = () => {\n    // handle closing modal\n    this.setState({ showModal: false });\n  };\n\n  handleShow = () => {\n    // handle rendering modal\n    let RLE = gridToRLE(\n      this.props.grid,\n      this.props.birthRule,\n      this.props.surviveRule\n    );\n    this.setState({ showModal: true, savedRLE: RLE });\n  };\n\n  downloadRLEFile = () => {\n    // function to download RLE data to an RLE file for user\n    let data = this.state.savedRLE.join('\\n');\n    let filename = 'savedRLE.rle';\n    let type = '.rle';\n    let file = new Blob([data], { type: type });\n    if (window.navigator.msSaveOrOpenBlob)\n      // IE10+\n      window.navigator.msSaveOrOpenBlob(file, filename);\n    else {\n      // Others\n      let a = document.createElement('a'),\n        url = URL.createObjectURL(file);\n      a.href = url;\n      a.download = filename;\n      document.body.appendChild(a);\n      a.click();\n      setTimeout(function () {\n        document.body.removeChild(a);\n        window.URL.revokeObjectURL(url);\n      }, 0);\n    }\n  };\n\n  render() {\n    // render component\n    return (\n      <div>\n        <Button variant=\"primary\" onClick={this.handleShow}>\n          View RLE File\n        </Button>\n\n        <Modal show={this.state.showModal} size=\"lg\" onHide={this.handleClose}>\n          <Modal.Header closeButton>\n            <Modal.Title>RLE File</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            {this.state.savedRLE.map((line, i) => (\n              <p key={i}>{line}</p>\n            ))}\n          </Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"secondary\" onClick={this.handleClose}>\n              Close\n            </Button>\n            <Button variant=\"primary\" onClick={this.downloadRLEFile}>\n              Download RLE File\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nexport default SavedRLEModal;\n","import Button from 'react-bootstrap/Button';\nimport CellularAutomatonSketch from './CellularAutomatonSketch';\nimport GridCustomization from './GridCustomization';\nimport SavedRLEModal from './SavedRLEModal';\nimport React, { Component } from 'react';\n\n/*\n    Component for Random Grid Tab\n*/\n\nclass RandomGridPage extends Component {\n  constructor() {\n    super();\n    this.state = {\n      alivePercentage: 50,\n      backgroundColor: '#FFFFFF',\n      birthRule: [3],\n      cellColor: '#000000',\n      cellSize: 20,\n      cols: 10,\n      framerate: 5,\n      rows: 10,\n      grid: [],\n      refreshVal: 0,\n      surviveRule: [2, 3],\n    };\n    this.generateGrid = this.generateGrid.bind(this);\n    this.renderRef = React.createRef();\n    this.resetAutomata = this.resetAutomata.bind(this);\n    this.updateParameters = this.updateParameters.bind(this);\n  }\n\n  createGrid = (r, c, aliveP) => {\n    // create grid with random cells\n    let grid = new Array(r);\n    for (let i = 0; i < grid.length; i++) {\n      grid[i] = new Array(c);\n    }\n    // modify probability based on specified percentage alive\n    let modifiedProbRandom = Array(100).fill(1).fill(0, aliveP);\n    for (let i = 0; i < r; i++) {\n      for (let j = 0; j < c; j++) {\n        grid[i][j] = modifiedProbRandom[Math.floor(Math.random() * 100)];\n      }\n    }\n    return grid;\n  };\n\n  generateGrid() {\n    // generate new grid\n    let { cols, rows, alivePercentage } = this.state;\n    let newGrid = this.createGrid(rows, cols, alivePercentage);\n    if (this.state.grid.length > 0) {\n      // get rid of old grid\n      this.resetAutomata();\n    }\n    this.setState({ grid: newGrid });\n  }\n\n  resetAutomata() {\n    // refresh grid by increasing key of component\n    this.setState((state) => ({\n      refreshVal: state.refreshVal + 1,\n    }));\n  }\n\n  updateParameters = (newParams) => {\n    // update grid parameters passed up from customization drawer\n    this.resetAutomata();\n    setTimeout(() => {\n      this.setState({ ...newParams }, () => this.generateGrid());\n    }, 0);\n  };\n\n  render() {\n    // render random grid page\n    // check if grid exists, if so, render grid\n    let displayGrid = this.state.grid.length > 0;\n\n    return (\n      <div className=\"random-page\">\n        Random Grid Page!\n        <div className=\"customization-container\">\n          <GridCustomization\n            parentTab={'RANDOM'}\n            submitFunction={this.updateParameters}\n          />\n        </div>\n        <div className=\"generate-grid-container\">\n          <Button onClick={this.generateGrid}>Create Random Grid</Button>\n        </div>\n        {displayGrid && (\n          <div className=\"sketch-container\">\n            <CellularAutomatonSketch\n              {...this.state}\n              key={this.state.refreshVal}\n              refLoc={this.renderRef}\n            />\n          </div>\n        )}\n        {displayGrid && (\n          <div className=\"reset-button-container\">\n            <Button onClick={this.resetAutomata}>Reset</Button>\n          </div>\n        )}\n        {displayGrid && (\n          <div className=\"save-rle-container\">\n            <SavedRLEModal {...this.state} />\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default RandomGridPage;\n\n// TODO\n// styling\n// add text explaining page\n","import React from 'react';\nimport './App.css';\nimport Tab from 'react-bootstrap/Tab';\nimport Tabs from 'react-bootstrap/Tabs';\nimport HomePage from './HomePage';\nimport DrawGridPage from './DrawGridPage';\nimport LoadRLEPage from './LoadRLEPage';\nimport RandomGridPage from './RandomGridPage';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      refreshTabVal: 0,\n    };\n    this.resetTab = this.resetTab.bind(this);\n  }\n\n  resetTab() {\n    setTimeout(() => {\n      let elems = document.querySelectorAll('body > button');\n      if (elems.length > 0) {\n        for (let i = 0; i < elems.length; i++) {\n          elems[i].parentNode.removeChild(elems[i]);\n        }\n        this.setState((state) => ({\n          refreshTabVal: state.refreshTabVal + 1,\n        }));\n      }\n    }, 0);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Tabs\n          defaultActiveKey=\"home\"\n          id=\"main-tab-group\"\n          onSelect={() => this.resetTab()}\n        >\n          <Tab eventKey=\"home\" title=\"Home\">\n            <HomePage />\n          </Tab>\n          <Tab eventKey=\"draw\" title=\"Draw Grid\">\n            <DrawGridPage />\n          </Tab>\n          <Tab eventKey=\"loadrle\" title=\"Load RLE\">\n            <LoadRLEPage />\n          </Tab>\n          <Tab eventKey=\"random\" title=\"Random Grid\">\n            <RandomGridPage key={this.state.refreshTabVal} />\n          </Tab>\n        </Tabs>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n//TODO:\n// load in RLE grids\n// save grid to RLE\n// UI for changing parameters\n// allow for different rulesets\n// allow user to draw grid\n// add padding for RLE input grids\n// find meaningful boundaries for saved RLE grids\n// styling\n// homepage\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}