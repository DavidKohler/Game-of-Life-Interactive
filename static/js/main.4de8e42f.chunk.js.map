{"version":3,"sources":["DrawGridPage.js","HomePage.js","CellularAutomatonSketch.js","sliderHandle.js","sliderMarks.js","GridCustomization.js","rleLogic.js","LoadRLEDrawer.js","gridLogic.js","LoadRLEPage.js","SavedRLEModal.js","RandomGridPage.js","App.js","serviceWorker.js","index.js"],"names":["DrawGridPage","Component","HomePage","CellularAutomatonSketch","countNeighbors","g","r","c","maxR","maxC","sum","i","j","createGrid","Array","length","playButton","nextButton","this","props","backgroundColor","birthRule","cellColor","cellSize","cols","framerate","grid","rows","surviveRule","playing","sketch","p5","p","toggleNext","draw","togglePlay","noLoop","html","loop","setup","width","height","createCanvas","parent","refLoc","current","frameRate","createButton","mousePressed","style","position","background","x","y","fill","stroke","rect","next","thisCell","nAlive","includes","className","ref","SliderHandle","value","dragging","index","rest","FlexHandle","key","Value","styled","Handle","div","cellRatioMarks","0","20","40","50","60","80","100","cellSizeMarks","1","5","10","15","25","30","35","dimensionMarks","70","framerateMarks","wrapperStyle","margin","GridCustomization","handleBackgroundColorUpdate","color","setState","hex","handleCellColorUpdate","handleSubmit","submitFunction","state","drawerOpen","toggleDrawer","open","event","updateBornButtons","isPressed","newPressings","birthRulePressed","slice","reduce","out","bool","concat","updateCellRatio","val","alivePercentage","updateCellSize","updateColumns","updateFramerate","updateRows","updateSurviveButtons","surviveRulePressed","undefined","bRule","map","v","defaultCols","loadedUpdate","defaultRows","sRule","bind","prevProps","prevState","parentTab","setTimeout","bPressed","sPressed","forEach","Fragment","Button","onClick","Drawer","anchor","onClose","defaultValue","handle","max","marks","min","onChange","ButtonToolbar","aria-label","String","join","ButtonGroup","ind","variant","gridToRLE","rowSums","row","a","b","colSums","top","findIndex","bot","reverse","minCol","maxCol","findMeaningfulBoundaries","RLEarray","push","RLEgroups","rowString","col","cell","cellCounter","possibleOptimization","indicesToRemove","sort","splice","pop","encodeGrid","finishedWriting","pos","individualLine","toString","cells","match","charAt","RLEtoGrid","RLEstring","xvalue","yvalue","rulestring","RLElines","split","gridString","chunks","Number","trim","rowChunks","re","RLEtags","tagCounts","exec","gridRow","k","curTag","curCt","z","e","LoadRLEDrawer","handleFileSubmit","convertedRLE","loadedContents","loadDrawer","handleInputChange","target","name","handleTextSubmit","preventDefault","hasError","test","xValue","yValue","birthInput","surviveInput","textboxInput","textboxError","console","log","readSingleFile","file","files","reader","FileReader","readAsText","onload","contents","result","toggleFileLoader","howToLoad","toggleLoadDrawer","toggleTextbox","resetTextbox","document","getElementById","addEventListener","refreshVal","type","id","accept","item","Form","onSubmit","InputGroup","Prepend","Text","FormControl","placeholder","aria-describedby","Append","as","reshapeGrid","oldGrid","newR","newC","newGrid","inner","extraRows","extraCols","Math","floor","unshift","abs","shift","LoadRLEPage","updateGrid","newParams","resetAutomata","updateParameters","prevChanges","changesMade","renderRef","React","createRef","displayGrid","SavedRLEModal","handleClose","showModal","handleShow","RLE","savedRLE","downloadRLEFile","data","Blob","window","navigator","msSaveOrOpenBlob","createElement","url","URL","createObjectURL","href","download","body","appendChild","click","removeChild","revokeObjectURL","Modal","show","size","onHide","Header","closeButton","Title","Body","line","Footer","RandomGridPage","generateGrid","aliveP","modifiedProbRandom","random","App","refreshTabVal","resetTab","elems","querySelectorAll","parentNode","Tabs","defaultActiveKey","onSelect","Tab","eventKey","title","Boolean","location","hostname","ReactDOM","render","StrictMode","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4de8e42f.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass DrawGridPage extends Component {\n  render() {\n    return <div>Draw Grid Page!</div>;\n  }\n}\n\nexport default DrawGridPage;\n\n//TODO\n// add drawing grid\n// convert grid to RLE\n// find meaningful boundaries for saved RLE\n// run animation from grid sketch\n// swtich sketch components\n// add UI for customization\n// styling\n// allow for other rulesets\n","import React, { Component } from 'react';\n// import GridCustomization from './GridCustomization';\n\nclass HomePage extends Component {\n  render() {\n    return (\n      <div>\n        Home Page!\n        {/* <GridCustomization parentTab=\"HOME\" /> */}\n      </div>\n    );\n  }\n}\n\nexport default HomePage;\n\n//TODO\n//add homepage text and fluff\n//styling\n// add user-select: none to text stuff\n// add warning about using B0 on other boundless apps\n","import React, { Component } from 'react';\nimport p5 from 'p5';\n\n/*\n    Component to render p5 sketch of cellular automaton based on props passed in\n*/\n\nclass CellularAutomatonSketch extends Component {\n  componentDidMount() {\n    let {\n      backgroundColor,\n      birthRule,\n      cellColor,\n      cellSize,\n      cols,\n      framerate,\n      grid,\n      rows,\n      surviveRule,\n    } = this.props;\n\n    let playButton;\n    let playing = false;\n    let nextButton;\n\n    // create sketch\n    this.sketch = new p5((p) => {\n      p.setup = () => {\n        // setup sketch and buttons\n        let width = cols * cellSize;\n        let height = rows * cellSize;\n\n        p.createCanvas(width, height).parent(this.props.refLoc.current);\n\n        p.frameRate(framerate);\n\n        playButton = p.createButton('Play');\n        playButton.mousePressed(togglePlay);\n        playButton.style('color', '#fff');\n        playButton.style('background-color', '#007bff');\n        playButton.style('border-color', '#007bff');\n        playButton.style('font-weight', '400');\n        playButton.style('border', '1px solid transparent');\n        playButton.style('padding', '.375rem .75rem');\n        playButton.style('font-size', '1rem');\n        playButton.style('line-height', '1.5');\n        playButton.style('border-radius', '.25rem');\n\n        playButton.position(50, 50);\n\n        nextButton = p.createButton('Next');\n        nextButton.mousePressed(toggleNext);\n        nextButton.style('color', '#fff');\n        nextButton.style('background-color', '#007bff');\n        nextButton.style('border-color', '#007bff');\n        nextButton.style('font-weight', '400');\n        nextButton.style('border', '1px solid transparent');\n        nextButton.style('padding', '.375rem .75rem');\n        nextButton.style('font-size', '1rem');\n        nextButton.style('line-height', '1.5');\n        nextButton.style('border-radius', '.25rem');\n\n        nextButton.position(100, 100);\n\n        p.noLoop();\n      };\n\n      p.draw = () => {\n        // draw cells and grid\n        p.background(backgroundColor);\n\n        for (let i = 0; i < rows; i++) {\n          for (let j = 0; j < cols; j++) {\n            let x = j * cellSize;\n            let y = i * cellSize;\n            if (grid[i][j] === 1) {\n              p.fill(cellColor);\n              p.stroke(backgroundColor);\n              p.rect(x, y, cellSize - 1, cellSize - 1);\n            }\n          }\n        }\n\n        let next = this.createGrid(rows, cols);\n\n        for (let i = 0; i < rows; i++) {\n          for (let j = 0; j < cols; j++) {\n            let thisCell = grid[i][j];\n            let nAlive = this.countNeighbors(grid, i, j, rows, cols);\n\n            if (thisCell === 1) {\n              // alive cell, check for survival\n              if (surviveRule.includes(nAlive)) {\n                // lives on\n                next[i][j] = 1;\n              } else {\n                // underpopulation or overpopulation -> dies\n                next[i][j] = 0;\n              }\n            } else {\n              // dead cell, check for birth\n              if (birthRule.includes(nAlive)) {\n                // reproduces\n                next[i][j] = 1;\n              } else {\n                // stays dead\n                next[i][j] = 0;\n              }\n            }\n          }\n        }\n        grid = next;\n      };\n\n      function toggleNext() {\n        // control next button\n        p.draw();\n      }\n\n      function togglePlay() {\n        // control play button\n        if (playing) {\n          p.noLoop();\n          playButton.html('Play');\n        } else {\n          p.loop();\n          playButton.html('Pause');\n        }\n        playing = !playing;\n      }\n    });\n  }\n\n  countNeighbors = (g, r, c, maxR, maxC) => {\n    // find number of neighbors from cell at g[r][c]\n    let sum = 0;\n    for (let i = r - 1; i < r + 2; i++) {\n      for (let j = c - 1; j < c + 2; j++) {\n        if (i >= 0 && i < maxR && j >= 0 && j < maxC) {\n          sum += g[i][j];\n        }\n      }\n    }\n    sum -= g[r][c];\n    return sum;\n  };\n\n  createGrid = (r, c) => {\n    // create new grid of size r*c\n    let g = new Array(r);\n    for (let i = 0; i < g.length; i++) {\n      g[i] = new Array(c);\n    }\n    return g;\n  };\n\n  render() {\n    // render to parent component\n    return (\n      <div className=\"CellularAutomatonSketch\">\n        <div ref={this.props.refLoc}></div>\n      </div>\n    );\n  }\n}\n\nexport default CellularAutomatonSketch;\n\n//TODO\n// change position and style of buttons\n","/*\n    Function to create desired slider handle for customization drawers\n    Idea for this code comes from zealous-snyder-0bj4r\n*/\n\nimport { Handle } from 'rc-slider';\nimport React from 'react';\nimport styled from 'styled-components';\n\nexport function SliderHandle(props) {\n  const { value, dragging, index, ...rest } = props;\n\n  return (\n    <FlexHandle key={index} value={value} {...rest}>\n      {dragging && <Value>{value}</Value>}\n    </FlexHandle>\n  );\n}\n\nconst FlexHandle = styled(Handle)`\n  display: flex;\n  justify-content: center;\n`;\n\nconst Value = styled.div`\n  margin-top: -32px;\n  white-space: nowrap;\n  color: black;\n  font-size: 14px;\n  font-weight: bold;\n`;\n","/*\n    File containing marks and labels for sliders used in customization\n*/\n\n// ratio of alive/dead cell slider\nconst cellRatioMarks = {\n  0: '0/100',\n  20: '20/80',\n  40: '40/60',\n  50: '50/50',\n  60: '60/40',\n  80: '80/20',\n  100: '100/0',\n};\n\n// cell size slider\nconst cellSizeMarks = {\n  1: '1',\n  5: '5',\n  10: '10',\n  15: '15',\n  20: '20',\n  25: '25',\n  30: '30',\n  35: '35',\n  40: '40',\n};\n\n// row and column sliders\nconst dimensionMarks = {\n  1: '1',\n  10: '10',\n  20: '20',\n  30: '30',\n  40: '40',\n  50: '50',\n  60: '60',\n  70: '70',\n  80: '80',\n};\n\n// framerate slider\nconst framerateMarks = {\n  1: '1',\n  10: '10',\n  20: '20',\n  30: '30',\n  40: '40',\n  50: '50',\n  60: '60',\n};\n\nexport { cellRatioMarks, cellSizeMarks, dimensionMarks, framerateMarks };\n","import './GridCustomization.css';\nimport 'rc-slider/assets/index.css';\nimport Button from 'react-bootstrap/Button';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar';\nimport { ChromePicker } from 'react-color';\nimport Drawer from '@material-ui/core/Drawer';\nimport Slider from 'rc-slider';\nimport { SliderHandle } from './sliderHandle';\nimport React, { Component } from 'react';\nimport {\n  cellRatioMarks,\n  cellSizeMarks,\n  dimensionMarks,\n  framerateMarks,\n} from './sliderMarks';\n\nconst wrapperStyle = { width: 800, margin: 50 };\n\n/*\n    Component rendering customization drawer for grid\n*/\n\nclass GridCustomization extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      alivePercentage: 50,\n      backgroundColor: '#FFFFFF',\n      birthRule: this.props.bRule !== undefined ? this.props.bRule : [3],\n      birthRulePressed:\n        this.props.bRule !== undefined\n          ? Array(9)\n              .fill(false)\n              .map((v, i) => (this.props.bRule.includes(i) ? true : false))\n          : Array(9).fill(false).fill(true, 3, 4),\n      cellColor: '#000000',\n      cols: this.props.defaultCols !== undefined ? this.props.defaultCols : 10,\n      drawerOpen: false,\n      framerate: 10,\n      loadedUpdate: false,\n      cellSize: 20,\n      rows: this.props.defaultRows !== undefined ? this.props.defaultRows : 10,\n      surviveRule: this.props.sRule !== undefined ? this.props.sRule : [2, 3],\n      surviveRulePressed:\n        this.props.sRule !== undefined\n          ? Array(9)\n              .fill(false)\n              .map((v, i) => (this.props.sRule.includes(i) ? true : false))\n          : Array(9).fill(false).fill(true, 2, 4),\n    };\n\n    this.handleBackgroundColorUpdate = this.handleBackgroundColorUpdate.bind(\n      this\n    );\n    this.handleCellColorUpdate = this.handleCellColorUpdate.bind(this);\n    this.toggleDrawer = this.toggleDrawer.bind(this);\n    this.updateBornButtons = this.updateBornButtons.bind(this);\n    this.updateCellRatio = this.updateCellRatio.bind(this);\n    this.updateCellSize = this.updateCellSize.bind(this);\n    this.updateColumns = this.updateColumns.bind(this);\n    this.updateFramerate = this.updateFramerate.bind(this);\n    this.updateRows = this.updateRows.bind(this);\n    this.updateSurviveButtons = this.updateSurviveButtons.bind(this);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    // check if new rules were passed in (if tab is 'LOADRLE')\n    if (this.props.parentTab === 'LOADRLE' && prevProps !== this.props) {\n      setTimeout(() => {\n        let bPressed = Array(9).fill(false);\n        let sPressed = Array(9).fill(false);\n        this.props.bRule.forEach((v) => {\n          if (v !== undefined) bPressed[v] = true;\n        });\n        this.props.sRule.forEach((v) => {\n          if (v !== undefined) sPressed[v] = true;\n        });\n        this.setState({\n          rows: this.props.defaultRows,\n          cols: this.props.defaultCols,\n          birthRule: this.props.bRule,\n          birthRulePressed: bPressed,\n          surviveRule: this.props.sRule,\n          surviveRulePressed: sPressed,\n          loadedUpdate: true,\n        });\n      }, 0);\n    }\n  }\n\n  handleBackgroundColorUpdate = (color) => {\n    // update color of background of grid\n    this.setState({ backgroundColor: color.hex });\n  };\n\n  handleCellColorUpdate = (color) => {\n    // update color of live cells in grid\n    this.setState({ cellColor: color.hex });\n  };\n\n  handleSubmit = () => {\n    // handle click on submit button, activate parent submit function\n    this.props.submitFunction(this.state);\n    this.setState({ drawerOpen: false });\n  };\n\n  toggleDrawer = (open) => (event) => {\n    // toggle opening customization drawer\n    this.setState({ drawerOpen: open });\n  };\n\n  updateBornButtons = (isPressed, index) => {\n    // update birth rule and which buttons are pressed\n    let newPressings = this.state.birthRulePressed.slice(0);\n    newPressings[index] = !isPressed;\n    this.setState({\n      birthRulePressed: newPressings,\n      birthRule: newPressings.reduce(\n        (out, bool, index) => (bool ? out.concat(index) : out),\n        []\n      ),\n    });\n  };\n\n  updateCellRatio = (val) => {\n    // update percentage of live vs dead cells in grid\n    this.setState({\n      alivePercentage: val,\n    });\n  };\n\n  updateCellSize = (val) => {\n    // update cell size of sketch\n    this.setState({\n      cellSize: val,\n    });\n  };\n\n  updateColumns = (val) => {\n    // update number of columns in grid\n    this.setState({\n      cols: val,\n    });\n  };\n\n  updateFramerate = (val) => {\n    // update framerate for sketch\n    this.setState({\n      framerate: val,\n    });\n  };\n\n  updateRows = (val) => {\n    // update number of rows in grid\n    this.setState({\n      rows: val,\n    });\n  };\n\n  updateSurviveButtons = (isPressed, index) => {\n    // update survive rule and which buttons are pressed\n    let newPressings = this.state.surviveRulePressed.slice(0);\n    newPressings[index] = !isPressed;\n    this.setState({\n      surviveRulePressed: newPressings,\n      surviveRule: newPressings.reduce(\n        (out, bool, index) => (bool ? out.concat(index) : out),\n        []\n      ),\n    });\n  };\n\n  render() {\n    // render customization drawer and toggle button\n    let { birthRulePressed, surviveRulePressed } = this.state;\n\n    return (\n      <div className=\"customizer-drawer\">\n        <React.Fragment key={'drawerOpen'}>\n          <Button onClick={this.toggleDrawer(true)}>{'Customize'}</Button>\n          <Drawer\n            anchor={'right'}\n            onClose={this.toggleDrawer(false)}\n            open={this.state.drawerOpen}\n          >\n            {'Customization'}\n            <div className=\"column-slider\" style={wrapperStyle}>\n              {`Columns: ${this.state.cols}`}\n              <Slider\n                defaultValue={this.state.cols}\n                handle={SliderHandle}\n                max={80}\n                marks={dimensionMarks}\n                min={1}\n                onChange={(v) => this.updateColumns(v)}\n              />\n            </div>\n            <div className=\"row-slider\" style={wrapperStyle}>\n              {`Rows: ${this.state.rows}`}\n              <Slider\n                defaultValue={this.state.rows}\n                handle={SliderHandle}\n                marks={dimensionMarks}\n                max={80}\n                min={1}\n                onChange={(v) => this.updateRows(v)}\n              />\n            </div>\n            <div className=\"cell-size-slider\" style={wrapperStyle}>\n              {`Cell Size: ${this.state.cellSize}`}\n              <Slider\n                defaultValue={this.state.cellSize}\n                handle={SliderHandle}\n                marks={cellSizeMarks}\n                max={40}\n                min={1}\n                onChange={(v) => this.updateCellSize(v)}\n              />\n            </div>\n            {this.props.parentTab === 'RANDOM' && (\n              <div className=\"cell-ratio-slider\" style={wrapperStyle}>\n                {'Alive/Dead Cell Ratio'}\n                <Slider\n                  defaultValue={this.state.alivePercentage}\n                  handle={SliderHandle}\n                  marks={cellRatioMarks}\n                  max={100}\n                  min={0}\n                  onChange={(v) => this.updateCellRatio(v)}\n                />\n              </div>\n            )}\n            <div className=\"button-toolbar-container\">\n              <ButtonToolbar aria-label=\"Born Rule\">\n                {`Born Rule: B${this.state.birthRule.map(String).join('')}`}\n                <ButtonGroup className=\"mr-2\" aria-label=\"born group\">\n                  {birthRulePressed.map((val, ind) => {\n                    return (\n                      <Button\n                        key={ind}\n                        onClick={() => this.updateBornButtons(val, ind)}\n                        variant={val === true ? 'success' : 'outline-success'}\n                      >\n                        {ind}\n                      </Button>\n                    );\n                  })}\n                </ButtonGroup>\n                {`Survive Rule: S${this.state.surviveRule\n                  .map(String)\n                  .join('')}`}\n                <ButtonGroup className=\"mr-2\" aria-label=\"survive group\">\n                  {surviveRulePressed.map((val, ind) => {\n                    return (\n                      <Button\n                        key={ind}\n                        onClick={() => this.updateSurviveButtons(val, ind)}\n                        variant={val === true ? 'success' : 'outline-success'}\n                      >\n                        {ind}\n                      </Button>\n                    );\n                  })}\n                </ButtonGroup>\n              </ButtonToolbar>\n            </div>\n            <div className=\"framerate-slider\" style={wrapperStyle}>\n              {`Framerate: ${this.state.framerate}`}\n              <Slider\n                defaultValue={this.state.framerate}\n                handle={SliderHandle}\n                marks={framerateMarks}\n                max={60}\n                min={1}\n                onChange={(v) => this.updateFramerate(v)}\n              />\n            </div>\n            <div className=\"color-pickers\">\n              <div className=\"cell-color-picker\">\n                {`Cell Color: ${this.state.cellColor}`}\n                <ChromePicker\n                  color={this.state.cellColor}\n                  onChange={this.handleCellColorUpdate}\n                />\n              </div>\n              <div className=\"cell-background-picker\">\n                {`Background Color: ${this.state.backgroundColor}`}\n                <ChromePicker\n                  color={this.state.backgroundColor}\n                  onChange={this.handleBackgroundColorUpdate}\n                />\n              </div>\n            </div>\n            <div className=\"submit-container\">\n              <Button onClick={this.handleSubmit}>Submit</Button>\n            </div>\n          </Drawer>\n        </React.Fragment>\n      </div>\n    );\n  }\n}\n\nexport default GridCustomization;\n\n// TODO styling\n","/*\n    File for all functions dealing with RLE logic\n*/\n\nfunction gridToRLE(grid, bRule, sRule) {\n  // convert grid with B rule and S rule to RLE array\n  // where each element in array is a separate line of RLE file\n  let { top, bot, minCol, maxCol } = findMeaningfulBoundaries(grid);\n  let RLEarray = [];\n  RLEarray.push(\n    `x = ${maxCol - minCol + 1}, y = ${bot - top + 1}, rule = B${bRule\n      .map(String)\n      .join('')}/S${sRule.map(String).join('')}`\n  );\n  let RLEgroups = encodeGrid(grid, top, bot, minCol, maxCol);\n  let finishedWriting = false;\n  let pos = 0;\n  let individualLine = '';\n  while (finishedWriting === false) {\n    if (RLEgroups[pos][1] === 1) {\n      // single cell\n      if (1 + individualLine.length > 70) {\n        // new line\n        RLEarray.push(individualLine);\n        individualLine = RLEgroups[pos][0];\n      } else {\n        // same line\n        individualLine = individualLine.concat(RLEgroups[pos][0]);\n      }\n    } else {\n      if (\n        RLEgroups[pos][1].toString().length + (individualLine.length + 1) >\n        70\n      ) {\n        // new line\n        RLEarray.push(individualLine);\n        individualLine = RLEgroups[pos][1].toString().concat(RLEgroups[pos][0]);\n      } else {\n        // same line\n        individualLine = individualLine.concat(\n          RLEgroups[pos][1].toString().concat(RLEgroups[pos][0])\n        );\n      }\n    }\n    if (pos === RLEgroups.length - 1) {\n      RLEarray.push(individualLine);\n      finishedWriting = true;\n    } else {\n      pos++;\n    }\n  }\n\n  return RLEarray;\n}\n\nfunction findMeaningfulBoundaries(grid) {\n  // given grid, find smallest boundaries that contain all\n  // specified cells, which is needed for RLE file\n  let rowSums = grid.map((row) => {\n    return row.reduce((a, b) => {\n      return a + b;\n    });\n  });\n  let sumCol = (r, a) => r.map((b, i) => a[i] + b);\n  let colSums = grid.reduce(sumCol);\n\n  let top = rowSums.findIndex((v) => v > 0);\n  let bot =\n    rowSums.length -\n    1 -\n    rowSums\n      .slice()\n      .reverse()\n      .findIndex((v) => v > 0);\n\n  let minCol = colSums.findIndex((v) => v > 0);\n  let maxCol =\n    colSums.length -\n    1 -\n    colSums\n      .slice()\n      .reverse()\n      .findIndex((v) => v > 0);\n\n  return {\n    top,\n    bot,\n    minCol,\n    maxCol,\n  };\n}\n\nfunction cellCounter(cells) {\n  // convert strings of cells to value length format\n  // ex: bb -> ['b', 2]\n  let s = cells.match(/([a-zA-Z])\\1*/g) || [];\n  return s.map((v) => {\n    return [v.charAt(0), v.length];\n  });\n}\n\nfunction encodeGrid(grid, top, bot, minCol, maxCol) {\n  // encode a grid from 2D array of 0's and 1's to\n  // unsimplified RLE string format\n  // ex: 0 1 1 -> boo\n  let RLEgroups = [];\n  for (let row = top; row < bot + 1; row++) {\n    let rowString = '';\n    for (let col = minCol; col < maxCol + 1; col++) {\n      let cell = grid[row][col];\n      if (cell === 1) {\n        rowString = rowString.concat('o');\n      } else {\n        rowString = rowString.concat('b');\n      }\n    }\n    let group = cellCounter(rowString);\n    group.forEach((g) => {\n      RLEgroups.push(g);\n    });\n    if (row !== bot) {\n      RLEgroups.push(['$', 1]);\n    } else {\n      RLEgroups.push(['!', 1]);\n    }\n  }\n\n  // optimize RLE string by considering neighbors in string\n  let possibleOptimization = true;\n  while (possibleOptimization === true) {\n    possibleOptimization = false;\n    let indicesToRemove = [];\n    for (let i = 0; i < RLEgroups.length; i++) {\n      if (i < RLEgroups.length - 1) {\n        if (\n          ['$', '!'].includes(RLEgroups[i + 1][0]) &&\n          RLEgroups[i][0] === 'b'\n        ) {\n          indicesToRemove.push(i);\n        }\n        if (RLEgroups[i][0] === RLEgroups[i + 1][0]) {\n          RLEgroups[i + 1] = [\n            RLEgroups[i][0],\n            RLEgroups[i][1] + RLEgroups[i + 1][1],\n          ];\n          indicesToRemove.push(i);\n        }\n      }\n    }\n\n    // remove specified indices from array\n    if (indicesToRemove.length > 0) {\n      possibleOptimization = true;\n      // delete indices\n      indicesToRemove.sort(function (a, b) {\n        return a - b;\n      });\n      while (indicesToRemove.length) {\n        RLEgroups.splice(indicesToRemove.pop(), 1);\n      }\n    }\n  }\n  return RLEgroups;\n}\n\nfunction RLEtoGrid(RLEstring) {\n  // given and RLE file (string), convert to 2d array for grid\n  let RLElines = RLEstring.split('\\n');\n  let gridString = '';\n  let xvalue, yvalue, rulestring;\n  for (let i = 0; i < RLElines.length; i++) {\n    if (RLElines[i][0] === '#') {\n      // comment line\n      continue;\n    } else if (RLElines[i][0] === 'x') {\n      // rule line\n      let chunks = RLElines[i].split(',');\n      xvalue = Number(chunks[0].trim().split('=')[1]);\n      yvalue = Number(chunks[1].trim().split('=')[1]);\n      rulestring = chunks[2].split('=')[1].trim();\n    } else {\n      gridString = gridString.concat(RLElines[i]);\n    }\n    if (RLElines[i][RLElines[i].length - 1] === '!') {\n      gridString = gridString.slice(0, -1);\n    }\n  }\n  let grid = [];\n  let rowChunks = gridString.split('$');\n  for (let j = 0; j < rowChunks.length; j++) {\n    let re = /[bo]/g;\n    let RLEtags = [];\n    let match = null;\n    let tagCounts = rowChunks[j].split(/[bo]/);\n    do {\n      match = re.exec(rowChunks[j]);\n      if (match) {\n        RLEtags.push(match[0]);\n      }\n    } while (match);\n    let gridRow = [];\n    for (let k = 0; k < RLEtags.length; k++) {\n      let curTag = RLEtags[k];\n      let curCt = Number(tagCounts[k]);\n      if (curCt === 0) {\n        curCt = 1;\n      }\n      if (curTag === 'b') {\n        gridRow.push(...Array(curCt).fill(0));\n      } else {\n        gridRow.push(...Array(curCt).fill(1));\n      }\n    }\n    if (gridRow.length !== xvalue) {\n      gridRow.push(...Array(xvalue - gridRow.length).fill(0));\n    }\n    grid.push(gridRow);\n    if (tagCounts[tagCounts.length - 1] !== '') {\n      // account for gap lines\n      for (let z = 0; z < Number(tagCounts[tagCounts.length - 1]) - 1; z++) {\n        grid.push(Array(xvalue).fill(0));\n      }\n    }\n  }\n  let birthRule = rulestring\n    .split('/')[0]\n    .split('B')[1]\n    .split('')\n    .map((e) => Number(e));\n  let surviveRule = rulestring\n    .split('/')[1]\n    .split('S')[1]\n    .split('')\n    .map((e) => Number(e));\n\n  return { grid, birthRule, surviveRule, rows: yvalue, cols: xvalue };\n}\n\nexport { gridToRLE, RLEtoGrid };\n","import Button from 'react-bootstrap/Button';\nimport Drawer from '@material-ui/core/Drawer';\nimport Form from 'react-bootstrap/Form';\nimport FormControl from 'react-bootstrap/FormControl';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport { RLEtoGrid } from './rleLogic';\nimport React, { Component } from 'react';\n\n/*\n    Component rendering drawer to load RLE\n*/\n\nclass LoadRLEDrawer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      birthInput: '',\n      loadedContents: '',\n      grid: [],\n      howToLoad: 'FILELOADER',\n      loadDrawer: false,\n      surviveInput: '',\n      xValue: '',\n      yValue: '',\n      textboxInput: '',\n      textboxError: false,\n    };\n    this.handleFileSubmit = this.handleFileSubmit.bind(this);\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleTextSubmit = this.handleTextSubmit.bind(this);\n    this.resetTextbox = this.resetTextbox.bind(this);\n    this.toggleLoadDrawer = this.toggleLoadDrawer.bind(this);\n  }\n\n  componentDidUpdate() {\n    // set listener for file upload when drawer is open\n    if (\n      this.state.loadDrawer === true &&\n      this.state.howToLoad === 'FILELOADER'\n    ) {\n      setTimeout(() => {\n        document\n          .getElementById('file-input')\n          .addEventListener('change', this.readSingleFile, false);\n      }, 0);\n    }\n  }\n\n  handleFileSubmit = () => {\n    // handle click on submit button, activate parent submit function\n    let convertedRLE = RLEtoGrid(this.state.loadedContents);\n    setTimeout(() => {\n      this.props.submitFunction(convertedRLE);\n      this.setState({ loadDrawer: false });\n    }, 50);\n  };\n\n  handleInputChange = (event) => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n\n  handleTextSubmit = (event) => {\n    // handle click on submit button, activate parent submit function\n    event.preventDefault();\n    let hasError = true;\n    // make sure input are correctly formatted\n    if (\n      /^\\d+$/.test(this.state.xValue) &&\n      /^\\d+$/.test(this.state.yValue) &&\n      (this.state.birthInput === '' || /^\\d+$/.test(this.state.birthInput)) &&\n      (this.state.surviveInput === '' ||\n        /^\\d+$/.test(this.state.surviveInput)) &&\n      /^[0-9ob$!\\n\\r\\s]+$/.test(this.state.textboxInput)\n    ) {\n      hasError = false;\n      this.setState({ textboxError: false });\n    } else {\n      this.setState({ textboxError: true });\n    }\n    if (hasError === false) {\n      console.log(this.state);\n      let firstLine = `x = ${this.state.xValue}, y = ${this.state.yValue}, rule = B${this.state.birthInput}/S${this.state.surviveInput}\\n`;\n      let fullString = firstLine.concat(this.state.textboxInput);\n      let convertedRLE = RLEtoGrid(fullString);\n      setTimeout(() => {\n        this.props.submitFunction(convertedRLE);\n        this.setState({ loadDrawer: false });\n      }, 50);\n    }\n  };\n\n  readSingleFile = (e) => {\n    // read RLE file from upload\n    let file = e.target.files[0];\n    if (!file) {\n      return;\n    }\n    let reader = new FileReader();\n    reader.readAsText(file);\n    reader.onload = (e) => {\n      let contents = e.target.result;\n      this.setState({\n        loadedContents: contents,\n      });\n    };\n  };\n\n  resetAutomata() {\n    // refresh grid by increasing key of component\n    this.setState((state) => ({\n      refreshVal: state.refreshVal + 1,\n    }));\n  }\n\n  resetTextbox() {\n    // resets textbox contents\n    this.setState({\n      xValue: '',\n      yValue: '',\n      birthInput: '',\n      surviveInput: '',\n      textboxInput: '',\n    });\n  }\n\n  toggleFileLoader = () => {\n    // toggle file input as method to load RLE\n    this.setState({ howToLoad: 'FILELOADER' });\n  };\n\n  toggleLoadDrawer = (open) => (event) => {\n    // toggle opening customization drawer\n    this.setState({ loadDrawer: open });\n  };\n\n  toggleTextbox = () => {\n    // toggle textbox as method to load RLE\n    this.setState({ howToLoad: 'TEXTBOX' });\n  };\n  render() {\n    return (\n      <div>\n        <React.Fragment key={'drawerOpen'}>\n          <Button onClick={this.toggleLoadDrawer(true)}>{'Load RLE'}</Button>\n          <Drawer\n            anchor={'right'}\n            onClose={this.toggleLoadDrawer(false)}\n            open={this.state.loadDrawer}\n          >\n            {'Load RLE'}\n            <Button onClick={this.toggleFileLoader}>{'Load From File'}</Button>\n            <Button onClick={this.toggleTextbox}>{'Paste Into Textbox'}</Button>\n            {this.state.howToLoad === 'FILELOADER' && (\n              <div>\n                <input type=\"file\" id=\"file-input\" accept=\".rle\" />\n                <p>Contents of the file:</p>\n                {this.state.loadedContents.split('\\n').map((item, i) => (\n                  <p key={i}>{item}</p>\n                ))}\n                <Button onClick={this.handleFileSubmit}>Submit</Button>\n              </div>\n            )}\n            {this.state.howToLoad === 'TEXTBOX' && (\n              <div>\n                <Form onSubmit={this.handleTextSubmit}>\n                  <InputGroup className=\"mb-3\">\n                    <InputGroup.Prepend>\n                      <InputGroup.Text id=\"x-input\">X</InputGroup.Text>\n                    </InputGroup.Prepend>\n                    <FormControl\n                      placeholder=\"X Value\"\n                      aria-label=\"X Value\"\n                      aria-describedby=\"x-input\"\n                      name=\"xValue\"\n                      value={this.state.xValue}\n                      onChange={this.handleInputChange}\n                    />\n                    <InputGroup.Append>\n                      <InputGroup.Text id=\"y-input\">Y</InputGroup.Text>\n                    </InputGroup.Append>\n                    <FormControl\n                      placeholder=\"Y Value\"\n                      aria-label=\"Y Value\"\n                      aria-describedby=\"y-input\"\n                      name=\"yValue\"\n                      value={this.state.yValue}\n                      onChange={this.handleInputChange}\n                    />\n                  </InputGroup>\n                  <InputGroup className=\"mb-3\">\n                    <InputGroup.Prepend>\n                      <InputGroup.Text id=\"birth-input\">B</InputGroup.Text>\n                    </InputGroup.Prepend>\n                    <FormControl\n                      placeholder=\"Birth Rule\"\n                      aria-label=\"Birth Rule\"\n                      aria-describedby=\"birth-input\"\n                      name=\"birthInput\"\n                      value={this.state.birthInput}\n                      onChange={this.handleInputChange}\n                    />\n                    <InputGroup.Append>\n                      <InputGroup.Text id=\"survive-input\">S</InputGroup.Text>\n                    </InputGroup.Append>\n                    <FormControl\n                      placeholder=\"Survive Rule\"\n                      aria-label=\"Survive Rule\"\n                      aria-describedby=\"survive-input\"\n                      name=\"surviveInput\"\n                      value={this.state.surviveInput}\n                      onChange={this.handleInputChange}\n                    />\n                  </InputGroup>\n                  <InputGroup>\n                    <InputGroup.Prepend>\n                      <InputGroup.Text>RLE Text</InputGroup.Text>\n                    </InputGroup.Prepend>\n                    <FormControl\n                      as=\"textarea\"\n                      aria-label=\"RLE Text\"\n                      aria-describedby=\"textbox-input\"\n                      placeholder=\"Enter RLE Text Here\"\n                      name=\"textboxInput\"\n                      value={this.state.textboxInput}\n                      onChange={this.handleInputChange}\n                    />\n                  </InputGroup>\n                  <Button onClick={this.resetTextbox} variant=\"secondary\">\n                    Reset\n                  </Button>\n                  <Button variant=\"primary\" type=\"submit\">\n                    Submit\n                  </Button>\n                  {this.state.textboxError === true && (\n                    <div>Error! Error! Error!</div>\n                  )}\n                </Form>\n              </div>\n            )}\n          </Drawer>\n        </React.Fragment>\n      </div>\n    );\n  }\n}\n\nexport default LoadRLEDrawer;\n\n// TODO\n// styling\n// error handling\n","/*\n    File for all functions dealing with grid logic\n*/\n\nfunction createGrid(r, c, aliveP) {\n  // create grid with random cells\n  let grid = new Array(r);\n  for (let i = 0; i < grid.length; i++) {\n    grid[i] = new Array(c);\n  }\n  // modify probability based on specified percentage alive\n  let modifiedProbRandom = Array(100).fill(1).fill(0, aliveP);\n  for (let i = 0; i < r; i++) {\n    for (let j = 0; j < c; j++) {\n      grid[i][j] = modifiedProbRandom[Math.floor(Math.random() * 100)];\n    }\n  }\n  return grid;\n}\n\nfunction reshapeGrid(oldGrid, newR, newC) {\n  // reshape cells to grid if grid needs to be resized\n  let newGrid = oldGrid.map((inner) => inner.slice());\n  let extraRows = newR - oldGrid.length;\n  let extraCols = newC - oldGrid[0].length;\n  if (extraRows >= 0) {\n    for (let i = 0; i < Math.floor(extraRows / 2); i++) {\n      newGrid.push(Array(oldGrid[0].length).fill(0));\n      newGrid.unshift(Array(oldGrid[0].length).fill(0));\n    }\n    if (extraRows % 2 === 1) {\n      newGrid.push(Array(oldGrid[0].length).fill(0));\n    }\n  }\n  if (extraRows < 0) {\n    extraRows = Math.abs(extraRows);\n    for (let i = 0; i < Math.floor(extraRows / 2); i++) {\n      newGrid.pop();\n      newGrid.shift();\n    }\n    if (extraRows % 2 === 1) {\n      newGrid.pop();\n    }\n  }\n  if (extraCols >= 0) {\n    for (let j = 0; j < Math.floor(extraCols / 2); j++) {\n      for (let k = 0; k < newGrid.length; k++) {\n        newGrid[k].push(0);\n        newGrid[k].unshift(0);\n      }\n    }\n    if (extraCols % 2 === 1) {\n      for (let k = 0; k < newGrid.length; k++) {\n        newGrid[k].push(0);\n      }\n    }\n  }\n  if (extraCols < 0) {\n    extraCols = Math.abs(extraCols);\n    for (let j = 0; j < Math.floor(extraCols / 2); j++) {\n      for (let k = 0; k < newGrid.length; k++) {\n        newGrid[k].pop();\n        newGrid[k].shift();\n      }\n    }\n    if (extraCols % 2 === 1) {\n      for (let k = 0; k < newGrid.length; k++) {\n        newGrid[k].pop();\n      }\n    }\n  }\n\n  return newGrid;\n}\n\nexport { createGrid, reshapeGrid };\n","import Button from 'react-bootstrap/Button';\nimport CellularAutomatonSketch from './CellularAutomatonSketch';\nimport GridCustomization from './GridCustomization';\nimport LoadRLEDrawer from './LoadRLEDrawer';\nimport { reshapeGrid } from './gridLogic';\nimport React, { Component } from 'react';\n\n/*\n    Component rendering tab to load RLE\n*/\n\nclass LoadRLEPage extends Component {\n  constructor() {\n    super();\n    this.state = {\n      backgroundColor: '#FFFFFF',\n      birthRule: [],\n      cellColor: '#000000',\n      cellSize: 20,\n      changesMade: false,\n      cols: 10,\n      framerate: 10,\n      grid: [],\n      loadDrawer: false,\n      refreshVal: 0,\n      rows: 10,\n      surviveRule: [],\n    };\n    this.renderRef = React.createRef();\n    this.resetAutomata = this.resetAutomata.bind(this);\n    this.updateGrid = this.updateGrid.bind(this);\n    this.updateParameters = this.updateParameters.bind(this);\n  }\n\n  readSingleFile = (e) => {\n    // read RLE file from upload\n    let file = e.target.files[0];\n    if (!file) {\n      return;\n    }\n    let reader = new FileReader();\n    reader.readAsText(file);\n    reader.onload = (e) => {\n      let contents = e.target.result;\n      this.setState({\n        file: contents,\n      });\n    };\n  };\n\n  resetAutomata() {\n    // refresh grid by increasing key of component\n    this.setState((state) => ({\n      refreshVal: state.refreshVal + 1,\n    }));\n  }\n\n  updateGrid = (newParams) => {\n    // update grid from loaded RLE\n    setTimeout(() => {\n      this.setState({ ...newParams });\n    }, 0);\n    setTimeout(() => {\n      this.resetAutomata();\n    }, 0);\n  };\n\n  updateParameters = (newParams) => {\n    // update grid parameters passed up from customization drawer\n    let prevChanges = this.state.changesMade;\n    let oldGrid = this.state.grid;\n    if (\n      newParams.rows !== this.state.rows ||\n      newParams.cols !== this.state.cols\n    ) {\n      this.setState(\n        { grid: reshapeGrid(oldGrid, newParams.rows, newParams.cols) },\n        this.setState(\n          { ...newParams, changesMade: !prevChanges },\n          this.resetAutomata()\n        )\n      );\n    } else {\n      this.setState(\n        { ...newParams, changesMade: !prevChanges },\n        this.resetAutomata()\n      );\n    }\n  };\n\n  render() {\n    // render random grid page\n    // check if grid exists, if so, render grid\n    let displayGrid = this.state.grid.length > 0;\n    return (\n      <div>\n        RLE Page!\n        <div className=\"load-drawer-container\">\n          <LoadRLEDrawer submitFunction={this.updateGrid} />\n        </div>\n        {displayGrid && (\n          <div className=\"customization-container\">\n            <GridCustomization\n              bRule={this.state.birthRule}\n              defaultRows={this.state.rows}\n              defaultCols={this.state.cols}\n              parentTab={'LOADRLE'}\n              sRule={this.state.surviveRule}\n              submitFunction={this.updateParameters}\n            />\n          </div>\n        )}\n        {displayGrid && (\n          <div className=\"sketch-container\">\n            <CellularAutomatonSketch\n              {...this.state}\n              key={this.state.refreshVal}\n              refLoc={this.renderRef}\n            />\n          </div>\n        )}\n        {displayGrid && (\n          <div className=\"reset-button-container\">\n            <Button onClick={this.resetAutomata}>Reset</Button>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default LoadRLEPage;\n\n//TODO\n// styling\n","import Button from 'react-bootstrap/Button';\nimport { gridToRLE } from './rleLogic';\nimport Modal from 'react-bootstrap/Modal';\nimport React, { Component } from 'react';\n\n/*\n    Component for RLE popup modal\n*/\n\nclass SavedRLEModal extends Component {\n  constructor() {\n    super();\n    this.state = {\n      savedRLE: [''],\n      showModal: false,\n    };\n    this.handleClose = this.handleClose.bind(this);\n    this.handleShow = this.handleShow.bind(this);\n  }\n\n  handleClose = () => {\n    // handle closing modal\n    this.setState({ showModal: false });\n  };\n\n  handleShow = () => {\n    // handle rendering modal\n    let RLE = gridToRLE(\n      this.props.grid,\n      this.props.birthRule,\n      this.props.surviveRule\n    );\n    this.setState({ showModal: true, savedRLE: RLE });\n  };\n\n  downloadRLEFile = () => {\n    // function to download RLE data to an RLE file for user\n    let data = this.state.savedRLE.join('\\n');\n    let filename = 'savedRLE.rle';\n    let type = '.rle';\n    let file = new Blob([data], { type: type });\n    if (window.navigator.msSaveOrOpenBlob)\n      // IE10+\n      window.navigator.msSaveOrOpenBlob(file, filename);\n    else {\n      // Others\n      let a = document.createElement('a'),\n        url = URL.createObjectURL(file);\n      a.href = url;\n      a.download = filename;\n      document.body.appendChild(a);\n      a.click();\n      setTimeout(function () {\n        document.body.removeChild(a);\n        window.URL.revokeObjectURL(url);\n      }, 0);\n    }\n  };\n\n  render() {\n    // render component\n    return (\n      <div>\n        <Button variant=\"primary\" onClick={this.handleShow}>\n          View RLE File\n        </Button>\n\n        <Modal show={this.state.showModal} size=\"lg\" onHide={this.handleClose}>\n          <Modal.Header closeButton>\n            <Modal.Title>RLE File</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            {this.state.savedRLE.map((line, i) => (\n              <p key={i}>{line}</p>\n            ))}\n          </Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"secondary\" onClick={this.handleClose}>\n              Close\n            </Button>\n            <Button variant=\"primary\" onClick={this.downloadRLEFile}>\n              Download RLE File\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nexport default SavedRLEModal;\n","import Button from 'react-bootstrap/Button';\nimport CellularAutomatonSketch from './CellularAutomatonSketch';\nimport { createGrid } from './gridLogic';\nimport GridCustomization from './GridCustomization';\nimport SavedRLEModal from './SavedRLEModal';\nimport React, { Component } from 'react';\n\n/*\n    Component for Random Grid Tab\n*/\n\nclass RandomGridPage extends Component {\n  constructor() {\n    super();\n    this.state = {\n      alivePercentage: 50,\n      backgroundColor: '#FFFFFF',\n      birthRule: [3],\n      cellColor: '#000000',\n      cellSize: 20,\n      cols: 10,\n      framerate: 5,\n      grid: [],\n      refreshVal: 0,\n      rows: 10,\n      surviveRule: [2, 3],\n    };\n    this.generateGrid = this.generateGrid.bind(this);\n    this.renderRef = React.createRef();\n    this.resetAutomata = this.resetAutomata.bind(this);\n    this.updateParameters = this.updateParameters.bind(this);\n  }\n\n  generateGrid() {\n    // generate new grid\n    let { cols, rows, alivePercentage } = this.state;\n    let newGrid = createGrid(rows, cols, alivePercentage);\n    if (this.state.grid.length > 0) {\n      // get rid of old grid\n      this.resetAutomata();\n    }\n    this.setState({ grid: newGrid });\n  }\n\n  resetAutomata() {\n    // refresh grid by increasing key of component\n    this.setState((state) => ({\n      refreshVal: state.refreshVal + 1,\n    }));\n  }\n\n  updateParameters = (newParams) => {\n    // update grid parameters passed up from customization drawer\n    this.resetAutomata();\n    setTimeout(() => {\n      this.setState({ ...newParams }, () => this.generateGrid());\n    }, 0);\n  };\n\n  render() {\n    // render random grid page\n    // check if grid exists, if so, render grid\n    let displayGrid = this.state.grid.length > 0;\n\n    return (\n      <div className=\"random-page\">\n        Random Grid Page!\n        <div className=\"customization-container\">\n          <GridCustomization\n            parentTab={'RANDOM'}\n            submitFunction={this.updateParameters}\n          />\n        </div>\n        <div className=\"generate-grid-container\">\n          <Button onClick={this.generateGrid}>Create Random Grid</Button>\n        </div>\n        {displayGrid && (\n          <div className=\"sketch-container\">\n            <CellularAutomatonSketch\n              {...this.state}\n              key={this.state.refreshVal}\n              refLoc={this.renderRef}\n            />\n          </div>\n        )}\n        {displayGrid && (\n          <div className=\"reset-button-container\">\n            <Button onClick={this.resetAutomata}>Reset</Button>\n          </div>\n        )}\n        {displayGrid && (\n          <div className=\"save-rle-container\">\n            <SavedRLEModal {...this.state} />\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default RandomGridPage;\n\n// TODO\n// styling\n// add text explaining page\n","import './App.css';\nimport DrawGridPage from './DrawGridPage';\nimport HomePage from './HomePage';\nimport LoadRLEPage from './LoadRLEPage';\nimport RandomGridPage from './RandomGridPage';\nimport React from 'react';\nimport Tab from 'react-bootstrap/Tab';\nimport Tabs from 'react-bootstrap/Tabs';\n\n/*\n    Root component to render tabs and tab switching\n*/\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      refreshTabVal: 0,\n    };\n    this.resetTab = this.resetTab.bind(this);\n  }\n\n  resetTab() {\n    // remove sketch buttons when chaning tabs, and refresh tabs\n    setTimeout(() => {\n      let elems = document.querySelectorAll('body > button');\n      if (elems.length > 0) {\n        for (let i = 0; i < elems.length; i++) {\n          elems[i].parentNode.removeChild(elems[i]);\n        }\n        this.setState((state) => ({\n          refreshTabVal: state.refreshTabVal + 1,\n        }));\n      }\n    }, 0);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Tabs\n          defaultActiveKey=\"home\"\n          id=\"main-tab-group\"\n          onSelect={() => this.resetTab()}\n        >\n          <Tab eventKey=\"home\" title=\"Home\">\n            <HomePage />\n          </Tab>\n          <Tab eventKey=\"draw\" title=\"Draw Grid\">\n            <DrawGridPage key={this.state.refreshTabVal} />\n          </Tab>\n          <Tab eventKey=\"loadrle\" title=\"Load RLE\">\n            <LoadRLEPage key={this.state.refreshTabVal} />\n          </Tab>\n          <Tab eventKey=\"random\" title=\"Random Grid\">\n            <RandomGridPage key={this.state.refreshTabVal} />\n          </Tab>\n        </Tabs>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n//TODO:\n// allow user to draw grid\n// styling\n// homepage\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}