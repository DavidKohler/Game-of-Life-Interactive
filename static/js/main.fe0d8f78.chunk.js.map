{"version":3,"sources":["components/InteractiveGrid.js","logic/rleLogic.js","logic/gridLogic.js","components/SavedRLEModal.js","sliders/sliderHandle.js","sliders/sliderMarks.js","tab_pages/DrawGridPage.js","tab_pages/HomePage.js","sketches/CellularAutomatonSketch.js","components/GridCustomization.js","components/LoadRLEDrawer.js","tab_pages/LoadRLEPage.js","tab_pages/RandomGridPage.js","App.js","serviceWorker.js","index.js"],"names":["InteractiveGrid","clickableGrid","rows","cols","callback","grid","document","createElement","className","r","tr","appendChild","c","cell","addEventListener","el","this","props","row","col","body","ref","refLoc","Component","gridToRLE","bRule","sRule","rowSums","map","reduce","a","b","colSums","i","top","findIndex","v","bot","length","slice","reverse","minCol","maxCol","findMeaningfulBoundaries","RLEarray","push","String","join","RLEgroups","rowString","concat","cellCounter","forEach","g","possibleOptimization","indicesToRemove","includes","sort","splice","pop","encodeGrid","finishedWriting","pos","individualLine","toString","cells","match","charAt","RLEtoGrid","RLEstring","xvalue","yvalue","rulestring","RLElines","split","gridString","chunks","Number","trim","Error","birthRule","surviveRule","rowChunks","j","re","RLEtags","tagCounts","exec","gridRow","k","curTag","curCt","Array","fill","gridRowLen","p","z","len","uniq","e","filter","err","reshapeGrid","oldGrid","newR","newC","newGrid","inner","extraRows","extraCols","Math","floor","unshift","abs","shift","SavedRLEModal","handleClose","setState","showModal","handleShow","RLE","table","childNodes","rowCount","colsCount","tableToGrid","querySelector","savedRLE","downloadRLEFile","data","state","file","Blob","type","window","navigator","msSaveOrOpenBlob","url","URL","createObjectURL","href","download","click","setTimeout","removeChild","revokeObjectURL","bind","Button","variant","onClick","Modal","show","size","onHide","Header","closeButton","Title","Body","line","key","Footer","SliderHandle","value","dragging","index","rest","FlexHandle","Value","styled","Handle","div","cellRatioMarks","0","20","40","50","60","80","100","cellSizeMarks","1","5","10","15","25","30","35","dimensionMarks","70","framerateMarks","wrapperStyle","width","margin","DrawGridPage","handleSubmit","drawerOpen","loadGrid","parentNode","refreshTabVal","toggleDrawer","open","event","updateColumns","val","updateRows","refreshVal","makeGridAppear","renderRef","React","createRef","displayGrid","Fragment","Drawer","anchor","onClose","style","defaultValue","handle","max","marks","min","onChange","HomePage","CellularAutomatonSketch","countNeighbors","maxR","maxC","sum","createGrid","playButton","nextButton","backgroundColor","cellColor","cellSize","framerate","playing","sketch","p5","toggleNext","draw","togglePlay","noLoop","html","loop","setup","height","createCanvas","parent","current","frameRate","createButton","mousePressed","position","background","x","y","stroke","rect","next","thisCell","nAlive","GridCustomization","handleBackgroundColorUpdate","color","hex","handleCellColorUpdate","submitFunction","updateBornButtons","isPressed","newPressings","birthRulePressed","out","bool","updateCellRatio","alivePercentage","updateCellSize","updateFramerate","updateSurviveButtons","surviveRulePressed","undefined","defaultCols","loadedUpdate","defaultRows","prevProps","prevState","parentTab","bPressed","sPressed","ButtonToolbar","aria-label","ButtonGroup","ind","LoadRLEDrawer","handleFileSubmit","convertedRLE","hasError","loadedContents","loadFileError","errorType","message","loadDrawer","handleInputChange","target","name","handleTextSubmit","preventDefault","fullString","xValue","yValue","birthInput","surviveInput","textboxInput","textboxError","readSingleFile","files","reader","FileReader","readAsText","onload","contents","result","toggleFileLoader","howToLoad","toggleLoadDrawer","toggleTextbox","resetTextbox","getElementById","id","accept","item","Form","onSubmit","InputGroup","Prepend","Text","FormControl","placeholder","aria-describedby","Append","as","LoadRLEPage","updateGrid","newParams","resetAutomata","updateParameters","prevChanges","changesMade","RandomGridPage","generateGrid","aliveP","modifiedProbRandom","random","App","resetTab","buttons","querySelectorAll","Tabs","defaultActiveKey","onSelect","Tab","eventKey","title","Boolean","location","hostname","ReactDOM","render","StrictMode","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.fe0d8f78.chunk.js","sourcesContent":["import '../css/InteractiveGrid.css';\nimport React, { Component } from 'react';\n\n/*\n        Component for Interactive Grid\n*/\n\nclass InteractiveGrid extends Component {\n  componentDidMount() {\n    // create clickable grid\n    let grid = this.clickableGrid(this.props.rows, this.props.cols, function (\n      el,\n      row,\n      col\n    ) {\n      if (el.className === 'clicked') {\n        // make dead\n        el.className = '';\n      } else {\n        // make alive\n        el.className = 'clicked';\n      }\n    });\n\n    document.body.appendChild(grid);\n  }\n\n  clickableGrid = (rows, cols, callback) => {\n    // Function that handles clickable grid\n    // Credit to Phrogz from stackoverflow\n    let grid = document.createElement('table');\n    grid.className = 'grid';\n    for (let r = 0; r < rows; ++r) {\n      let tr = grid.appendChild(document.createElement('tr'));\n      for (let c = 0; c < cols; ++c) {\n        let cell = tr.appendChild(document.createElement('td'));\n        cell.addEventListener(\n          'click',\n          (function (el, r, c) {\n            return function () {\n              callback(el, r, c);\n            };\n          })(cell, r, c),\n          false\n        );\n      }\n    }\n    return grid;\n  };\n\n  render() {\n    // render to parent component\n    return (\n      <div className=\"InteractiveGridSketch\">\n        <div ref={this.props.refLoc}></div>\n      </div>\n    );\n  }\n}\n\nexport default InteractiveGrid;\n","import { uniq } from 'lodash';\n\n/*\n    File for all functions dealing with RLE logic\n*/\n\nfunction gridToRLE(grid, bRule, sRule) {\n  // convert grid with B rule and S rule to RLE array\n  // where each element in array is a separate line of RLE file\n  let { top, bot, minCol, maxCol } = findMeaningfulBoundaries(grid);\n  let RLEarray = [];\n  RLEarray.push(\n    `x = ${maxCol - minCol + 1}, y = ${bot - top + 1}, rule = B${bRule\n      .map(String)\n      .join('')}/S${sRule.map(String).join('')}`\n  );\n  let RLEgroups = encodeGrid(grid, top, bot, minCol, maxCol);\n  let finishedWriting = false;\n  let pos = 0;\n  let individualLine = '';\n  while (finishedWriting === false) {\n    if (RLEgroups[pos][1] === 1) {\n      // single cell\n      if (1 + individualLine.length > 70) {\n        // new line\n        RLEarray.push(individualLine);\n        individualLine = RLEgroups[pos][0];\n      } else {\n        // same line\n        individualLine = individualLine.concat(RLEgroups[pos][0]);\n      }\n    } else {\n      if (\n        RLEgroups[pos][1].toString().length + (individualLine.length + 1) >\n        70\n      ) {\n        // new line\n        RLEarray.push(individualLine);\n        individualLine = RLEgroups[pos][1].toString().concat(RLEgroups[pos][0]);\n      } else {\n        // same line\n        individualLine = individualLine.concat(\n          RLEgroups[pos][1].toString().concat(RLEgroups[pos][0])\n        );\n      }\n    }\n    if (pos === RLEgroups.length - 1) {\n      RLEarray.push(individualLine);\n      finishedWriting = true;\n    } else {\n      pos++;\n    }\n  }\n\n  return RLEarray;\n}\n\nfunction findMeaningfulBoundaries(grid) {\n  // given grid, find smallest boundaries that contain all\n  // specified cells, which is needed for RLE file\n  let rowSums = grid.map((row) => {\n    return row.reduce((a, b) => {\n      return a + b;\n    });\n  });\n  let sumCol = (r, a) => r.map((b, i) => a[i] + b);\n  let colSums = grid.reduce(sumCol);\n\n  let top = rowSums.findIndex((v) => v > 0);\n  let bot =\n    rowSums.length -\n    1 -\n    rowSums\n      .slice()\n      .reverse()\n      .findIndex((v) => v > 0);\n\n  let minCol = colSums.findIndex((v) => v > 0);\n  let maxCol =\n    colSums.length -\n    1 -\n    colSums\n      .slice()\n      .reverse()\n      .findIndex((v) => v > 0);\n\n  if (top === -1 || bot === -1) {\n    // empty grid found, no meaningful boundary possible\n    // return default grid dimensions\n    top = 0;\n    bot = grid.length - 1;\n    minCol = 0;\n    maxCol = grid[0].length - 1;\n  }\n\n  return {\n    top,\n    bot,\n    minCol,\n    maxCol,\n  };\n}\n\nfunction cellCounter(cells) {\n  // convert strings of cells to value length format\n  // ex: bb -> ['b', 2]\n  let s = cells.match(/([a-zA-Z])\\1*/g) || [];\n  return s.map((v) => {\n    return [v.charAt(0), v.length];\n  });\n}\n\nfunction encodeGrid(grid, top, bot, minCol, maxCol) {\n  // encode a grid from 2D array of 0's and 1's to\n  // unsimplified RLE string format\n  // ex: 0 1 1 -> boo\n  let RLEgroups = [];\n  for (let row = top; row < bot + 1; row++) {\n    let rowString = '';\n    for (let col = minCol; col < maxCol + 1; col++) {\n      let cell = grid[row][col];\n      if (cell === 1) {\n        rowString = rowString.concat('o');\n      } else {\n        rowString = rowString.concat('b');\n      }\n    }\n    let group = cellCounter(rowString);\n    group.forEach((g) => {\n      RLEgroups.push(g);\n    });\n    if (row !== bot) {\n      RLEgroups.push(['$', 1]);\n    } else {\n      RLEgroups.push(['!', 1]);\n    }\n  }\n\n  // optimize RLE string by considering neighbors in string\n  let possibleOptimization = true;\n  while (possibleOptimization === true) {\n    possibleOptimization = false;\n    let indicesToRemove = [];\n    for (let i = 0; i < RLEgroups.length; i++) {\n      if (i < RLEgroups.length - 1) {\n        if (\n          ['$', '!'].includes(RLEgroups[i + 1][0]) &&\n          RLEgroups[i][0] === 'b'\n        ) {\n          indicesToRemove.push(i);\n        }\n        if (RLEgroups[i][0] === RLEgroups[i + 1][0]) {\n          RLEgroups[i + 1] = [\n            RLEgroups[i][0],\n            RLEgroups[i][1] + RLEgroups[i + 1][1],\n          ];\n          indicesToRemove.push(i);\n        }\n      }\n    }\n\n    // remove specified indices from array\n    if (indicesToRemove.length > 0) {\n      possibleOptimization = true;\n      // delete indices\n      indicesToRemove.sort(function (a, b) {\n        return a - b;\n      });\n      while (indicesToRemove.length) {\n        RLEgroups.splice(indicesToRemove.pop(), 1);\n      }\n    }\n  }\n  return RLEgroups;\n}\n\nfunction RLEtoGrid(RLEstring) {\n  // given and RLE file (string), convert to 2d array for grid\n  let RLElines = RLEstring.split('\\n');\n  let gridString = '';\n  let xvalue, yvalue, rulestring;\n  for (let i = 0; i < RLElines.length; i++) {\n    if (RLElines[i][0] === '#') {\n      // comment line\n      continue;\n    } else if (RLElines[i][0] === 'x') {\n      // rule line\n      let chunks = RLElines[i].split(',');\n      xvalue = Number(chunks[0].trim().split('=')[1]);\n      yvalue = Number(chunks[1].trim().split('=')[1]);\n      rulestring = chunks[2].split('=')[1].trim();\n    } else {\n      gridString = gridString.concat(RLElines[i]);\n    }\n    if (RLElines[i][RLElines[i].length - 1] === '!') {\n      gridString = gridString.slice(0, -1);\n    }\n  }\n  if (!(xvalue > 0) || !(yvalue > 0)) {\n    // x or y not valid/not specified\n    throw new Error('Dimension Error');\n  }\n  let grid = [];\n  let rowChunks = gridString.split('$');\n  for (let j = 0; j < rowChunks.length; j++) {\n    let re = /[bo]/g;\n    // only match b's and o's\n    let RLEtags = [];\n    let match = null;\n    let tagCounts = rowChunks[j].split(/[bo]/);\n    do {\n      match = re.exec(rowChunks[j]);\n      if (match) {\n        RLEtags.push(match[0]);\n      }\n    } while (match);\n    let gridRow = [];\n    for (let k = 0; k < RLEtags.length; k++) {\n      let curTag = RLEtags[k];\n      let curCt = Number(tagCounts[k]);\n      if (curCt === 0) {\n        curCt = 1;\n      }\n      if (curTag === 'b') {\n        gridRow.push(...Array(curCt).fill(0));\n      } else {\n        gridRow.push(...Array(curCt).fill(1));\n      }\n    }\n    if (gridRow.length < xvalue) {\n      // add extra 0's\n      gridRow.push(...Array(xvalue - gridRow.length).fill(0));\n    }\n    if (gridRow.length > xvalue) {\n      // prune RLE based on provided xvalue\n      let gridRowLen = gridRow.length;\n      for (let p = 0; p < gridRowLen - xvalue; p++) {\n        gridRow.pop();\n      }\n    }\n    grid.push(gridRow);\n    if (tagCounts[tagCounts.length - 1] !== '') {\n      // account for gap lines\n      for (let z = 0; z < Number(tagCounts[tagCounts.length - 1]) - 1; z++) {\n        grid.push(Array(xvalue).fill(0));\n      }\n    }\n  }\n\n  if (grid.length < yvalue) {\n    // handle discrepency when RLE provided doesn't match yvalue provided\n    let len = grid.length;\n    for (let p = 0; p < yvalue - len; p++) {\n      grid.push(Array(xvalue).fill(0));\n    }\n  }\n\n  // check for valid birth and survive rules, otherwise default to empty rules\n  let birthRule, surviveRule;\n  try {\n    birthRule = uniq(\n      rulestring\n        .split('/')[0]\n        .split('B')[1]\n        .split('')\n        .map((e) => Number(e))\n        .filter((e) => e >= 0)\n    );\n  } catch (err) {\n    // no birth rule specified\n    birthRule = [];\n  }\n  try {\n    surviveRule = uniq(\n      rulestring\n        .split('/')[1]\n        .split('S')[1]\n        .split('')\n        .map((e) => Number(e))\n        .filter((e) => e >= 0)\n    );\n  } catch (err) {\n    // no survive rule specified\n    surviveRule = [];\n  }\n\n  return { grid, birthRule, surviveRule, rows: yvalue, cols: xvalue };\n}\n\nexport { gridToRLE, RLEtoGrid };\n","/*\n    File for all functions dealing with grid logic\n*/\n\nfunction createGrid(r, c, aliveP) {\n  // create grid with random cells\n  let grid = new Array(r);\n  for (let i = 0; i < grid.length; i++) {\n    grid[i] = new Array(c);\n  }\n  // modify probability based on specified percentage alive\n  let modifiedProbRandom = Array(100).fill(1).fill(0, aliveP);\n  for (let i = 0; i < r; i++) {\n    for (let j = 0; j < c; j++) {\n      grid[i][j] = modifiedProbRandom[Math.floor(Math.random() * 100)];\n    }\n  }\n  return grid;\n}\n\nfunction reshapeGrid(oldGrid, newR, newC) {\n  // reshape cells to grid if grid needs to be resized\n  let newGrid = oldGrid.map((inner) => inner.slice());\n  let extraRows = newR - oldGrid.length;\n  let extraCols = newC - oldGrid[0].length;\n  if (extraRows >= 0) {\n    for (let i = 0; i < Math.floor(extraRows / 2); i++) {\n      newGrid.push(Array(oldGrid[0].length).fill(0));\n      newGrid.unshift(Array(oldGrid[0].length).fill(0));\n    }\n    if (extraRows % 2 === 1) {\n      newGrid.push(Array(oldGrid[0].length).fill(0));\n    }\n  }\n  if (extraRows < 0) {\n    extraRows = Math.abs(extraRows);\n    for (let i = 0; i < Math.floor(extraRows / 2); i++) {\n      newGrid.pop();\n      newGrid.shift();\n    }\n    if (extraRows % 2 === 1) {\n      newGrid.pop();\n    }\n  }\n  if (extraCols >= 0) {\n    for (let j = 0; j < Math.floor(extraCols / 2); j++) {\n      for (let k = 0; k < newGrid.length; k++) {\n        newGrid[k].push(0);\n        newGrid[k].unshift(0);\n      }\n    }\n    if (extraCols % 2 === 1) {\n      for (let k = 0; k < newGrid.length; k++) {\n        newGrid[k].push(0);\n      }\n    }\n  }\n  if (extraCols < 0) {\n    extraCols = Math.abs(extraCols);\n    for (let j = 0; j < Math.floor(extraCols / 2); j++) {\n      for (let k = 0; k < newGrid.length; k++) {\n        newGrid[k].pop();\n        newGrid[k].shift();\n      }\n    }\n    if (extraCols % 2 === 1) {\n      for (let k = 0; k < newGrid.length; k++) {\n        newGrid[k].pop();\n      }\n    }\n  }\n\n  return newGrid;\n}\n\nfunction tableToGrid(table) {\n  // converts table elements to 2D grid notation\n  let rows = table.childNodes;\n  let rowCount = rows.length;\n  let colsCount = rows[0].childNodes.length;\n  let grid = new Array(rowCount);\n  for (let i = 0; i < rowCount; i++) {\n    grid[i] = new Array(colsCount).fill(0);\n    let cols = rows[i].childNodes;\n    for (let j = 0; j < colsCount; j++) {\n      if (cols[j].className === 'clicked') {\n        grid[i][j] = 1;\n      }\n    }\n  }\n  return grid;\n}\n\nexport { createGrid, reshapeGrid, tableToGrid };\n","import Button from 'react-bootstrap/Button';\nimport { gridToRLE } from '../logic/rleLogic';\nimport { tableToGrid } from '../logic/gridLogic';\nimport Modal from 'react-bootstrap/Modal';\nimport React, { Component } from 'react';\n\n/*\n    Component for RLE popup modal\n*/\n\nclass SavedRLEModal extends Component {\n  constructor() {\n    super();\n    this.state = {\n      savedRLE: [''],\n      showModal: false,\n    };\n    this.handleClose = this.handleClose.bind(this);\n    this.handleShow = this.handleShow.bind(this);\n  }\n\n  handleClose = () => {\n    // handle closing modal\n    this.setState({ showModal: false });\n  };\n\n  handleShow = () => {\n    // handle rendering modal\n    let grid;\n    if (this.props.grid.length === 0) {\n      // convert table from drawn grid\n      grid = tableToGrid(document.querySelector('body > table'));\n    } else {\n      // get grid from props\n      grid = this.props.grid;\n    }\n    let RLE = gridToRLE(grid, this.props.birthRule, this.props.surviveRule);\n    this.setState({ showModal: true, savedRLE: RLE });\n  };\n\n  downloadRLEFile = () => {\n    // function to download RLE data to an RLE file for user\n    let data = this.state.savedRLE.join('\\n');\n    let filename = 'savedRLE.rle';\n    let type = '.rle';\n    let file = new Blob([data], { type: type });\n    if (window.navigator.msSaveOrOpenBlob)\n      // IE10+\n      window.navigator.msSaveOrOpenBlob(file, filename);\n    else {\n      // Others\n      let a = document.createElement('a'),\n        url = URL.createObjectURL(file);\n      a.href = url;\n      a.download = filename;\n      document.body.appendChild(a);\n      a.click();\n      setTimeout(function () {\n        document.body.removeChild(a);\n        window.URL.revokeObjectURL(url);\n      }, 0);\n    }\n  };\n\n  render() {\n    // render component\n    return (\n      <div>\n        <Button variant=\"primary\" onClick={this.handleShow}>\n          View RLE File\n        </Button>\n\n        <Modal show={this.state.showModal} size=\"lg\" onHide={this.handleClose}>\n          <Modal.Header closeButton>\n            <Modal.Title>RLE File</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            {this.state.savedRLE.map((line, i) => (\n              <p key={i}>{line}</p>\n            ))}\n          </Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"secondary\" onClick={this.handleClose}>\n              Close\n            </Button>\n            <Button variant=\"primary\" onClick={this.downloadRLEFile}>\n              Download RLE File\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nexport default SavedRLEModal;\n","/*\n    Function to create desired slider handle for customization drawers\n    Idea for this code comes from zealous-snyder-0bj4r\n*/\n\nimport { Handle } from 'rc-slider';\nimport React from 'react';\nimport styled from 'styled-components';\n\nexport function SliderHandle(props) {\n  const { value, dragging, index, ...rest } = props;\n\n  return (\n    <FlexHandle key={index} value={value} {...rest}>\n      {dragging && <Value>{value}</Value>}\n    </FlexHandle>\n  );\n}\n\nconst FlexHandle = styled(Handle)`\n  display: flex;\n  justify-content: center;\n`;\n\nconst Value = styled.div`\n  margin-top: -32px;\n  white-space: nowrap;\n  color: black;\n  font-size: 14px;\n  font-weight: bold;\n`;\n","/*\n    File containing marks and labels for sliders used in customization\n*/\n\n// ratio of alive/dead cell slider\nconst cellRatioMarks = {\n  0: '0/100',\n  20: '20/80',\n  40: '40/60',\n  50: '50/50',\n  60: '60/40',\n  80: '80/20',\n  100: '100/0',\n};\n\n// cell size slider\nconst cellSizeMarks = {\n  1: '1',\n  5: '5',\n  10: '10',\n  15: '15',\n  20: '20',\n  25: '25',\n  30: '30',\n  35: '35',\n  40: '40',\n};\n\n// row and column sliders\nconst dimensionMarks = {\n  1: '1',\n  10: '10',\n  20: '20',\n  30: '30',\n  40: '40',\n  50: '50',\n  60: '60',\n  70: '70',\n  80: '80',\n};\n\n// framerate slider\nconst framerateMarks = {\n  1: '1',\n  10: '10',\n  20: '20',\n  30: '30',\n  40: '40',\n  50: '50',\n  60: '60',\n};\n\nexport { cellRatioMarks, cellSizeMarks, dimensionMarks, framerateMarks };\n","import Button from 'react-bootstrap/Button';\nimport Drawer from '@material-ui/core/Drawer';\nimport InteractiveGrid from '../components/InteractiveGrid';\nimport SavedRLEModal from '../components/SavedRLEModal';\nimport React, { Component } from 'react';\nimport Slider from 'rc-slider';\nimport { SliderHandle } from '../sliders/sliderHandle';\nimport { dimensionMarks } from '../sliders/sliderMarks';\n\n/*\n    Component for Drawing Grid Tab\n*/\n\nconst wrapperStyle = { width: 800, margin: 50 };\n\nclass DrawGridPage extends Component {\n  constructor() {\n    super();\n    this.state = {\n      birthRule: [3],\n      cols: 10,\n      drawerOpen: false,\n      grid: [],\n      loadGrid: false,\n      refreshVal: 0,\n      rows: 10,\n      surviveRule: [2, 3],\n    };\n    this.makeGridAppear = this.makeGridAppear.bind(this);\n    this.renderRef = React.createRef();\n    this.toggleDrawer = this.toggleDrawer.bind(this);\n    this.updateColumns = this.updateColumns.bind(this);\n    this.updateRows = this.updateRows.bind(this);\n  }\n\n  handleSubmit = () => {\n    // handle click on submit button\n    setTimeout(() => {\n      this.setState({ drawerOpen: false, grid: [], loadGrid: false });\n      let table = document.querySelector('body > table');\n      if (table !== null) {\n        table.parentNode.removeChild(table);\n        this.setState((state) => ({\n          refreshTabVal: state.refreshTabVal + 1,\n        }));\n      }\n    }, 0);\n  };\n\n  makeGridAppear() {\n    // render drawing grid\n    this.setState({ loadGrid: true });\n  }\n\n  toggleDrawer = (open) => (event) => {\n    // toggle opening customization drawer\n    this.setState({ drawerOpen: open });\n  };\n\n  updateColumns = (val) => {\n    // update number of columns in grid\n    this.setState({\n      cols: val,\n    });\n  };\n\n  updateRows = (val) => {\n    // update number of rows in grid\n    this.setState({\n      rows: val,\n    });\n  };\n\n  render() {\n    // render page and buttons\n    let displayGrid = this.state.loadGrid;\n    return (\n      <div>\n        Draw Grid Page!\n        {!displayGrid && (\n          <Button onClick={this.makeGridAppear}>{'Open Grid'}</Button>\n        )}\n        {displayGrid && (\n          <InteractiveGrid\n            key={this.props.refreshVal}\n            rows={this.state.rows}\n            cols={this.state.cols}\n            refLoc={this.renderRef}\n          />\n        )}\n        {displayGrid && (\n          <div className=\"save-rle-container\">\n            <SavedRLEModal {...this.state} />\n          </div>\n        )}\n        <div className=\"customizer-drawer\">\n          <React.Fragment key={'drawerOpen'}>\n            <Button onClick={this.toggleDrawer(true)}>{'Customize'}</Button>\n            <Drawer\n              anchor={'right'}\n              onClose={this.toggleDrawer(false)}\n              open={this.state.drawerOpen}\n            >\n              <div className=\"column-slider\" style={wrapperStyle}>\n                {`Columns: ${this.state.cols}`}\n                <Slider\n                  defaultValue={this.state.cols}\n                  handle={SliderHandle}\n                  max={80}\n                  marks={dimensionMarks}\n                  min={1}\n                  onChange={(v) => this.updateColumns(v)}\n                />\n              </div>\n              <div className=\"row-slider\" style={wrapperStyle}>\n                {`Rows: ${this.state.rows}`}\n                <Slider\n                  defaultValue={this.state.rows}\n                  handle={SliderHandle}\n                  marks={dimensionMarks}\n                  max={80}\n                  min={1}\n                  onChange={(v) => this.updateRows(v)}\n                />\n              </div>\n              <div className=\"submit-container\">\n                <Button onClick={this.handleSubmit}>Submit</Button>\n              </div>\n            </Drawer>\n          </React.Fragment>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default DrawGridPage;\n\n//TODO\n// styling\n// description\n","import React, { Component } from 'react';\n\nclass HomePage extends Component {\n  render() {\n    return <div>Home Page!</div>;\n  }\n}\n\nexport default HomePage;\n\n//TODO\n//add homepage text and fluff\n//styling\n// add user-select: none to text stuff\n// add warning about using B0 on other boundless apps\n","import React, { Component } from 'react';\nimport p5 from 'p5';\n\n/*\n    Component to render p5 sketch of cellular automaton based on props passed in\n*/\n\nclass CellularAutomatonSketch extends Component {\n  componentDidMount() {\n    let {\n      backgroundColor,\n      birthRule,\n      cellColor,\n      cellSize,\n      cols,\n      framerate,\n      grid,\n      rows,\n      surviveRule,\n    } = this.props;\n\n    let playButton;\n    let playing = false;\n    let nextButton;\n\n    // create sketch\n    this.sketch = new p5((p) => {\n      p.setup = () => {\n        // setup sketch and buttons\n        let width = cols * cellSize;\n        let height = rows * cellSize;\n\n        p.createCanvas(width, height).parent(this.props.refLoc.current);\n\n        p.frameRate(framerate);\n\n        playButton = p.createButton('Play');\n        playButton.mousePressed(togglePlay);\n        playButton.style('color', '#fff');\n        playButton.style('background-color', '#007bff');\n        playButton.style('border-color', '#007bff');\n        playButton.style('font-weight', '400');\n        playButton.style('border', '1px solid transparent');\n        playButton.style('padding', '.375rem .75rem');\n        playButton.style('font-size', '1rem');\n        playButton.style('line-height', '1.5');\n        playButton.style('border-radius', '.25rem');\n\n        playButton.position(50, 50);\n\n        nextButton = p.createButton('Next');\n        nextButton.mousePressed(toggleNext);\n        nextButton.style('color', '#fff');\n        nextButton.style('background-color', '#007bff');\n        nextButton.style('border-color', '#007bff');\n        nextButton.style('font-weight', '400');\n        nextButton.style('border', '1px solid transparent');\n        nextButton.style('padding', '.375rem .75rem');\n        nextButton.style('font-size', '1rem');\n        nextButton.style('line-height', '1.5');\n        nextButton.style('border-radius', '.25rem');\n\n        nextButton.position(100, 100);\n\n        p.noLoop();\n      };\n\n      p.draw = () => {\n        // draw cells and grid\n        p.background(backgroundColor);\n\n        for (let i = 0; i < rows; i++) {\n          for (let j = 0; j < cols; j++) {\n            let x = j * cellSize;\n            let y = i * cellSize;\n            if (grid[i][j] === 1) {\n              p.fill(cellColor);\n              p.stroke(backgroundColor);\n              p.rect(x, y, cellSize - 1, cellSize - 1);\n            }\n          }\n        }\n\n        let next = this.createGrid(rows, cols);\n\n        for (let i = 0; i < rows; i++) {\n          for (let j = 0; j < cols; j++) {\n            let thisCell = grid[i][j];\n            let nAlive = this.countNeighbors(grid, i, j, rows, cols);\n\n            if (thisCell === 1) {\n              // alive cell, check for survival\n              if (surviveRule.includes(nAlive)) {\n                // lives on\n                next[i][j] = 1;\n              } else {\n                // underpopulation or overpopulation -> dies\n                next[i][j] = 0;\n              }\n            } else {\n              // dead cell, check for birth\n              if (birthRule.includes(nAlive)) {\n                // reproduces\n                next[i][j] = 1;\n              } else {\n                // stays dead\n                next[i][j] = 0;\n              }\n            }\n          }\n        }\n        grid = next;\n      };\n\n      function toggleNext() {\n        // control next button\n        p.draw();\n      }\n\n      function togglePlay() {\n        // control play button\n        if (playing) {\n          p.noLoop();\n          playButton.html('Play');\n        } else {\n          p.loop();\n          playButton.html('Pause');\n        }\n        playing = !playing;\n      }\n    });\n  }\n\n  countNeighbors = (g, r, c, maxR, maxC) => {\n    // find number of neighbors from cell at g[r][c]\n    let sum = 0;\n    for (let i = r - 1; i < r + 2; i++) {\n      for (let j = c - 1; j < c + 2; j++) {\n        if (i >= 0 && i < maxR && j >= 0 && j < maxC) {\n          sum += g[i][j];\n        }\n      }\n    }\n    sum -= g[r][c];\n    return sum;\n  };\n\n  createGrid = (r, c) => {\n    // create new grid of size r*c\n    let g = new Array(r);\n    for (let i = 0; i < g.length; i++) {\n      g[i] = new Array(c);\n    }\n    return g;\n  };\n\n  render() {\n    // render to parent component\n    return (\n      <div className=\"CellularAutomatonSketch\">\n        <div ref={this.props.refLoc}></div>\n      </div>\n    );\n  }\n}\n\nexport default CellularAutomatonSketch;\n\n//TODO\n// change position and style of buttons\n","import '../css/GridCustomization.css';\nimport 'rc-slider/assets/index.css';\nimport Button from 'react-bootstrap/Button';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar';\nimport { ChromePicker } from 'react-color';\nimport Drawer from '@material-ui/core/Drawer';\nimport Slider from 'rc-slider';\nimport { SliderHandle } from '../sliders/sliderHandle';\nimport React, { Component } from 'react';\nimport {\n  cellRatioMarks,\n  cellSizeMarks,\n  dimensionMarks,\n  framerateMarks,\n} from '../sliders/sliderMarks';\n\nconst wrapperStyle = { width: 800, margin: 50 };\n\n/*\n    Component rendering customization drawer for grid\n*/\n\nclass GridCustomization extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      alivePercentage: 50,\n      backgroundColor: '#FFFFFF',\n      birthRule: this.props.bRule !== undefined ? this.props.bRule : [3],\n      birthRulePressed:\n        this.props.bRule !== undefined\n          ? Array(9)\n              .fill(false)\n              .map((v, i) => (this.props.bRule.includes(i) ? true : false))\n          : Array(9).fill(false).fill(true, 3, 4),\n      cellColor: '#000000',\n      cols: this.props.defaultCols !== undefined ? this.props.defaultCols : 10,\n      drawerOpen: false,\n      framerate: 10,\n      loadedUpdate: false,\n      cellSize: 20,\n      rows: this.props.defaultRows !== undefined ? this.props.defaultRows : 10,\n      surviveRule: this.props.sRule !== undefined ? this.props.sRule : [2, 3],\n      surviveRulePressed:\n        this.props.sRule !== undefined\n          ? Array(9)\n              .fill(false)\n              .map((v, i) => (this.props.sRule.includes(i) ? true : false))\n          : Array(9).fill(false).fill(true, 2, 4),\n    };\n\n    this.handleBackgroundColorUpdate = this.handleBackgroundColorUpdate.bind(\n      this\n    );\n    this.handleCellColorUpdate = this.handleCellColorUpdate.bind(this);\n    this.toggleDrawer = this.toggleDrawer.bind(this);\n    this.updateBornButtons = this.updateBornButtons.bind(this);\n    this.updateCellRatio = this.updateCellRatio.bind(this);\n    this.updateCellSize = this.updateCellSize.bind(this);\n    this.updateColumns = this.updateColumns.bind(this);\n    this.updateFramerate = this.updateFramerate.bind(this);\n    this.updateRows = this.updateRows.bind(this);\n    this.updateSurviveButtons = this.updateSurviveButtons.bind(this);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    // check if new rules were passed in (if tab is 'LOADRLE')\n    if (this.props.parentTab === 'LOADRLE' && prevProps !== this.props) {\n      setTimeout(() => {\n        let bPressed = Array(9).fill(false);\n        let sPressed = Array(9).fill(false);\n        this.props.bRule.forEach((v) => {\n          if (v !== undefined) bPressed[v] = true;\n        });\n        this.props.sRule.forEach((v) => {\n          if (v !== undefined) sPressed[v] = true;\n        });\n        this.setState({\n          rows: this.props.defaultRows,\n          cols: this.props.defaultCols,\n          birthRule: this.props.bRule,\n          birthRulePressed: bPressed,\n          surviveRule: this.props.sRule,\n          surviveRulePressed: sPressed,\n          loadedUpdate: true,\n        });\n      }, 0);\n    }\n  }\n\n  handleBackgroundColorUpdate = (color) => {\n    // update color of background of grid\n    this.setState({ backgroundColor: color.hex });\n  };\n\n  handleCellColorUpdate = (color) => {\n    // update color of live cells in grid\n    this.setState({ cellColor: color.hex });\n  };\n\n  handleSubmit = () => {\n    // handle click on submit button, activate parent submit function\n    this.props.submitFunction(this.state);\n    this.setState({ drawerOpen: false });\n  };\n\n  toggleDrawer = (open) => (event) => {\n    // toggle opening customization drawer\n    this.setState({ drawerOpen: open });\n  };\n\n  updateBornButtons = (isPressed, index) => {\n    // update birth rule and which buttons are pressed\n    let newPressings = this.state.birthRulePressed.slice(0);\n    newPressings[index] = !isPressed;\n    this.setState({\n      birthRulePressed: newPressings,\n      birthRule: newPressings.reduce(\n        (out, bool, index) => (bool ? out.concat(index) : out),\n        []\n      ),\n    });\n  };\n\n  updateCellRatio = (val) => {\n    // update percentage of live vs dead cells in grid\n    this.setState({\n      alivePercentage: val,\n    });\n  };\n\n  updateCellSize = (val) => {\n    // update cell size of sketch\n    this.setState({\n      cellSize: val,\n    });\n  };\n\n  updateColumns = (val) => {\n    // update number of columns in grid\n    this.setState({\n      cols: val,\n    });\n  };\n\n  updateFramerate = (val) => {\n    // update framerate for sketch\n    this.setState({\n      framerate: val,\n    });\n  };\n\n  updateRows = (val) => {\n    // update number of rows in grid\n    this.setState({\n      rows: val,\n    });\n  };\n\n  updateSurviveButtons = (isPressed, index) => {\n    // update survive rule and which buttons are pressed\n    let newPressings = this.state.surviveRulePressed.slice(0);\n    newPressings[index] = !isPressed;\n    this.setState({\n      surviveRulePressed: newPressings,\n      surviveRule: newPressings.reduce(\n        (out, bool, index) => (bool ? out.concat(index) : out),\n        []\n      ),\n    });\n  };\n\n  render() {\n    // render customization drawer and toggle button\n    let { birthRulePressed, surviveRulePressed } = this.state;\n\n    return (\n      <div className=\"customizer-drawer\">\n        <React.Fragment key={'drawerOpen'}>\n          <Button onClick={this.toggleDrawer(true)}>{'Customize'}</Button>\n          <Drawer\n            anchor={'right'}\n            onClose={this.toggleDrawer(false)}\n            open={this.state.drawerOpen}\n          >\n            {'Customization'}\n            <div className=\"column-slider\" style={wrapperStyle}>\n              {`Columns: ${this.state.cols}`}\n              <Slider\n                defaultValue={this.state.cols}\n                handle={SliderHandle}\n                max={80}\n                marks={dimensionMarks}\n                min={1}\n                onChange={(v) => this.updateColumns(v)}\n              />\n            </div>\n            <div className=\"row-slider\" style={wrapperStyle}>\n              {`Rows: ${this.state.rows}`}\n              <Slider\n                defaultValue={this.state.rows}\n                handle={SliderHandle}\n                marks={dimensionMarks}\n                max={80}\n                min={1}\n                onChange={(v) => this.updateRows(v)}\n              />\n            </div>\n            <div className=\"cell-size-slider\" style={wrapperStyle}>\n              {`Cell Size: ${this.state.cellSize}`}\n              <Slider\n                defaultValue={this.state.cellSize}\n                handle={SliderHandle}\n                marks={cellSizeMarks}\n                max={40}\n                min={1}\n                onChange={(v) => this.updateCellSize(v)}\n              />\n            </div>\n            {this.props.parentTab === 'RANDOM' && (\n              <div className=\"cell-ratio-slider\" style={wrapperStyle}>\n                {'Alive/Dead Cell Ratio'}\n                <Slider\n                  defaultValue={this.state.alivePercentage}\n                  handle={SliderHandle}\n                  marks={cellRatioMarks}\n                  max={100}\n                  min={0}\n                  onChange={(v) => this.updateCellRatio(v)}\n                />\n              </div>\n            )}\n            <div className=\"button-toolbar-container\">\n              <ButtonToolbar aria-label=\"Born Rule\">\n                {`Born Rule: B${this.state.birthRule.map(String).join('')}`}\n                <ButtonGroup className=\"mr-2\" aria-label=\"born group\">\n                  {birthRulePressed.map((val, ind) => {\n                    return (\n                      <Button\n                        key={ind}\n                        onClick={() => this.updateBornButtons(val, ind)}\n                        variant={val === true ? 'success' : 'outline-success'}\n                      >\n                        {ind}\n                      </Button>\n                    );\n                  })}\n                </ButtonGroup>\n                {`Survive Rule: S${this.state.surviveRule\n                  .map(String)\n                  .join('')}`}\n                <ButtonGroup className=\"mr-2\" aria-label=\"survive group\">\n                  {surviveRulePressed.map((val, ind) => {\n                    return (\n                      <Button\n                        key={ind}\n                        onClick={() => this.updateSurviveButtons(val, ind)}\n                        variant={val === true ? 'success' : 'outline-success'}\n                      >\n                        {ind}\n                      </Button>\n                    );\n                  })}\n                </ButtonGroup>\n              </ButtonToolbar>\n            </div>\n            <div className=\"framerate-slider\" style={wrapperStyle}>\n              {`Framerate: ${this.state.framerate}`}\n              <Slider\n                defaultValue={this.state.framerate}\n                handle={SliderHandle}\n                marks={framerateMarks}\n                max={60}\n                min={1}\n                onChange={(v) => this.updateFramerate(v)}\n              />\n            </div>\n            <div className=\"color-pickers\">\n              <div className=\"cell-color-picker\">\n                {`Cell Color: ${this.state.cellColor}`}\n                <ChromePicker\n                  color={this.state.cellColor}\n                  onChange={this.handleCellColorUpdate}\n                />\n              </div>\n              <div className=\"cell-background-picker\">\n                {`Background Color: ${this.state.backgroundColor}`}\n                <ChromePicker\n                  color={this.state.backgroundColor}\n                  onChange={this.handleBackgroundColorUpdate}\n                />\n              </div>\n            </div>\n            <div className=\"submit-container\">\n              <Button onClick={this.handleSubmit}>Submit</Button>\n            </div>\n          </Drawer>\n        </React.Fragment>\n      </div>\n    );\n  }\n}\n\nexport default GridCustomization;\n\n// TODO styling\n","import Button from 'react-bootstrap/Button';\nimport Drawer from '@material-ui/core/Drawer';\nimport Form from 'react-bootstrap/Form';\nimport FormControl from 'react-bootstrap/FormControl';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport { RLEtoGrid } from '../logic/rleLogic';\nimport React, { Component } from 'react';\n\n/*\n    Component rendering drawer to load RLE\n*/\n\nclass LoadRLEDrawer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      birthInput: '',\n      errorType: '',\n      grid: [],\n      howToLoad: 'FILELOADER',\n      loadDrawer: false,\n      loadedContents: '',\n      loadFileError: false,\n      surviveInput: '',\n      xValue: '',\n      yValue: '',\n      textboxInput: '',\n      textboxError: false,\n    };\n    this.handleFileSubmit = this.handleFileSubmit.bind(this);\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleTextSubmit = this.handleTextSubmit.bind(this);\n    this.resetTextbox = this.resetTextbox.bind(this);\n    this.toggleLoadDrawer = this.toggleLoadDrawer.bind(this);\n  }\n\n  componentDidUpdate() {\n    // set listener for file upload when drawer is open\n    if (\n      this.state.loadDrawer === true &&\n      this.state.howToLoad === 'FILELOADER'\n    ) {\n      setTimeout(() => {\n        document\n          .getElementById('file-input')\n          .addEventListener('change', this.readSingleFile, false);\n      }, 0);\n    }\n  }\n\n  handleFileSubmit = () => {\n    // handle click on submit button, activate parent submit function\n    let convertedRLE;\n    let hasError = false;\n    try {\n      convertedRLE = RLEtoGrid(this.state.loadedContents);\n    } catch (err) {\n      hasError = true;\n      setTimeout(() => {\n        this.setState({\n          loadFileError: true,\n          errorType: err.message,\n        });\n      }, 0);\n    }\n    if (hasError === false) {\n      setTimeout(() => {\n        this.props.submitFunction(convertedRLE);\n        this.setState({ loadDrawer: false, loadFileError: false });\n      }, 50);\n    }\n  };\n\n  handleInputChange = (event) => {\n    // handle changes to textbox input fields\n    this.setState({ [event.target.name]: event.target.value });\n  };\n\n  handleTextSubmit = (event) => {\n    // handle click on submit button, activate parent submit function\n    event.preventDefault();\n    let convertedRLE;\n    let hasError = false;\n    try {\n      let firstLine = `x = ${this.state.xValue}, y = ${this.state.yValue}, rule = B${this.state.birthInput}/S${this.state.surviveInput}\\n`;\n      let fullString = firstLine.concat(this.state.textboxInput);\n      convertedRLE = RLEtoGrid(fullString);\n    } catch (err) {\n      hasError = true;\n      setTimeout(() => {\n        this.setState({\n          textboxError: true,\n          errorType: err.message,\n        });\n      }, 0);\n    }\n    if (hasError === false) {\n      setTimeout(() => {\n        this.props.submitFunction(convertedRLE);\n        this.setState({ loadDrawer: false, textboxError: false });\n      }, 50);\n    }\n  };\n\n  readSingleFile = (e) => {\n    // read RLE file from upload\n    let file = e.target.files[0];\n    if (!file) {\n      return;\n    }\n    let reader = new FileReader();\n    reader.readAsText(file);\n    reader.onload = (e) => {\n      let contents = e.target.result;\n      this.setState({\n        loadedContents: contents,\n        loadFileError: false,\n      });\n    };\n  };\n\n  resetAutomata() {\n    // refresh grid by increasing key of component\n    this.setState((state) => ({\n      refreshVal: state.refreshVal + 1,\n    }));\n  }\n\n  resetTextbox() {\n    // resets textbox contents\n    this.setState({\n      xValue: '',\n      yValue: '',\n      birthInput: '',\n      surviveInput: '',\n      textboxInput: '',\n    });\n  }\n\n  toggleFileLoader = () => {\n    // toggle file input as method to load RLE\n    this.setState({ howToLoad: 'FILELOADER' });\n  };\n\n  toggleLoadDrawer = (open) => (event) => {\n    // toggle opening customization drawer\n    this.setState({ loadDrawer: open });\n  };\n\n  toggleTextbox = () => {\n    // toggle textbox as method to load RLE\n    this.setState({ howToLoad: 'TEXTBOX' });\n  };\n\n  render() {\n    return (\n      <div>\n        <React.Fragment key={'drawerOpen'}>\n          <Button onClick={this.toggleLoadDrawer(true)}>{'Load RLE'}</Button>\n          <Drawer\n            anchor={'right'}\n            onClose={this.toggleLoadDrawer(false)}\n            open={this.state.loadDrawer}\n          >\n            {'Load RLE'}\n            <Button onClick={this.toggleFileLoader}>{'Load From File'}</Button>\n            <Button onClick={this.toggleTextbox}>{'Paste Into Textbox'}</Button>\n            {this.state.howToLoad === 'FILELOADER' && (\n              <div>\n                <input type=\"file\" id=\"file-input\" accept=\".rle\" />\n                <p>Contents of the file:</p>\n                {this.state.loadedContents.split('\\n').map((item, i) => (\n                  <p key={i}>{item}</p>\n                ))}\n                <Button onClick={this.handleFileSubmit}>Submit</Button>\n                {this.state.loadFileError === true && (\n                  <div>Error! Error! Error!{this.state.errorType}</div>\n                )}\n              </div>\n            )}\n            {this.state.howToLoad === 'TEXTBOX' && (\n              <div>\n                <Form onSubmit={this.handleTextSubmit}>\n                  <InputGroup className=\"mb-3\">\n                    <InputGroup.Prepend>\n                      <InputGroup.Text id=\"x-input\">X</InputGroup.Text>\n                    </InputGroup.Prepend>\n                    <FormControl\n                      placeholder=\"X Value\"\n                      aria-label=\"X Value\"\n                      aria-describedby=\"x-input\"\n                      name=\"xValue\"\n                      value={this.state.xValue}\n                      onChange={this.handleInputChange}\n                    />\n                    <InputGroup.Append>\n                      <InputGroup.Text id=\"y-input\">Y</InputGroup.Text>\n                    </InputGroup.Append>\n                    <FormControl\n                      placeholder=\"Y Value\"\n                      aria-label=\"Y Value\"\n                      aria-describedby=\"y-input\"\n                      name=\"yValue\"\n                      value={this.state.yValue}\n                      onChange={this.handleInputChange}\n                    />\n                  </InputGroup>\n                  <InputGroup className=\"mb-3\">\n                    <InputGroup.Prepend>\n                      <InputGroup.Text id=\"birth-input\">B</InputGroup.Text>\n                    </InputGroup.Prepend>\n                    <FormControl\n                      placeholder=\"Birth Rule\"\n                      aria-label=\"Birth Rule\"\n                      aria-describedby=\"birth-input\"\n                      name=\"birthInput\"\n                      value={this.state.birthInput}\n                      onChange={this.handleInputChange}\n                    />\n                    <InputGroup.Append>\n                      <InputGroup.Text id=\"survive-input\">S</InputGroup.Text>\n                    </InputGroup.Append>\n                    <FormControl\n                      placeholder=\"Survive Rule\"\n                      aria-label=\"Survive Rule\"\n                      aria-describedby=\"survive-input\"\n                      name=\"surviveInput\"\n                      value={this.state.surviveInput}\n                      onChange={this.handleInputChange}\n                    />\n                  </InputGroup>\n                  <InputGroup>\n                    <InputGroup.Prepend>\n                      <InputGroup.Text>RLE Text</InputGroup.Text>\n                    </InputGroup.Prepend>\n                    <FormControl\n                      as=\"textarea\"\n                      aria-label=\"RLE Text\"\n                      aria-describedby=\"textbox-input\"\n                      placeholder=\"Enter RLE Text Here\"\n                      name=\"textboxInput\"\n                      value={this.state.textboxInput}\n                      onChange={this.handleInputChange}\n                    />\n                  </InputGroup>\n                  <Button onClick={this.resetTextbox} variant=\"secondary\">\n                    Reset\n                  </Button>\n                  <Button variant=\"primary\" type=\"submit\">\n                    Submit\n                  </Button>\n                  {this.state.textboxError === true && (\n                    <div>Error! Error! Error!{this.state.errorType}</div>\n                  )}\n                </Form>\n              </div>\n            )}\n          </Drawer>\n        </React.Fragment>\n      </div>\n    );\n  }\n}\n\nexport default LoadRLEDrawer;\n\n// TODO\n// styling\n","import Button from 'react-bootstrap/Button';\nimport CellularAutomatonSketch from '../sketches/CellularAutomatonSketch';\nimport GridCustomization from '../components/GridCustomization';\nimport LoadRLEDrawer from '../components/LoadRLEDrawer';\nimport { reshapeGrid } from '../logic/gridLogic';\nimport SavedRLEModal from '../components/SavedRLEModal';\nimport React, { Component } from 'react';\n\n/*\n    Component rendering tab to load RLE\n*/\n\nclass LoadRLEPage extends Component {\n  constructor() {\n    super();\n    this.state = {\n      backgroundColor: '#FFFFFF',\n      birthRule: [],\n      cellColor: '#000000',\n      cellSize: 20,\n      changesMade: false,\n      cols: 10,\n      framerate: 10,\n      grid: [],\n      loadDrawer: false,\n      refreshVal: 0,\n      rows: 10,\n      surviveRule: [],\n    };\n    this.renderRef = React.createRef();\n    this.resetAutomata = this.resetAutomata.bind(this);\n    this.updateGrid = this.updateGrid.bind(this);\n    this.updateParameters = this.updateParameters.bind(this);\n  }\n\n  readSingleFile = (e) => {\n    // read RLE file from upload\n    let file = e.target.files[0];\n    if (!file) {\n      return;\n    }\n    let reader = new FileReader();\n    reader.readAsText(file);\n    reader.onload = (e) => {\n      let contents = e.target.result;\n      this.setState({\n        file: contents,\n      });\n    };\n  };\n\n  resetAutomata() {\n    // refresh grid by increasing key of component\n    this.setState((state) => ({\n      refreshVal: state.refreshVal + 1,\n    }));\n  }\n\n  updateGrid = (newParams) => {\n    // update grid from loaded RLE\n    setTimeout(() => {\n      this.setState({ ...newParams });\n    }, 0);\n    setTimeout(() => {\n      this.resetAutomata();\n    }, 0);\n  };\n\n  updateParameters = (newParams) => {\n    // update grid parameters passed up from customization drawer\n    let prevChanges = this.state.changesMade;\n    let oldGrid = this.state.grid;\n    if (\n      newParams.rows !== this.state.rows ||\n      newParams.cols !== this.state.cols\n    ) {\n      this.setState(\n        { grid: reshapeGrid(oldGrid, newParams.rows, newParams.cols) },\n        this.setState(\n          { ...newParams, changesMade: !prevChanges },\n          this.resetAutomata()\n        )\n      );\n    } else {\n      this.setState(\n        { ...newParams, changesMade: !prevChanges },\n        this.resetAutomata()\n      );\n    }\n  };\n\n  render() {\n    // render random grid page\n    // check if grid exists, if so, render grid\n    let displayGrid = this.state.grid.length > 0;\n    return (\n      <div>\n        RLE Page!\n        <div className=\"load-drawer-container\">\n          <LoadRLEDrawer submitFunction={this.updateGrid} />\n        </div>\n        {displayGrid && (\n          <div className=\"customization-container\">\n            <GridCustomization\n              bRule={this.state.birthRule}\n              defaultRows={this.state.rows}\n              defaultCols={this.state.cols}\n              parentTab={'LOADRLE'}\n              sRule={this.state.surviveRule}\n              submitFunction={this.updateParameters}\n            />\n          </div>\n        )}\n        {displayGrid && (\n          <div className=\"sketch-container\">\n            <CellularAutomatonSketch\n              {...this.state}\n              key={this.state.refreshVal}\n              refLoc={this.renderRef}\n            />\n          </div>\n        )}\n        {displayGrid && (\n          <div className=\"reset-button-container\">\n            <Button onClick={this.resetAutomata}>Reset</Button>\n          </div>\n        )}\n        {displayGrid && (\n          <div className=\"save-rle-container\">\n            <SavedRLEModal {...this.state} />\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default LoadRLEPage;\n\n//TODO\n// styling\n// add description\n","import Button from 'react-bootstrap/Button';\nimport CellularAutomatonSketch from '../sketches/CellularAutomatonSketch';\nimport { createGrid } from '../logic/gridLogic';\nimport GridCustomization from '../components/GridCustomization';\nimport SavedRLEModal from '../components/SavedRLEModal';\nimport React, { Component } from 'react';\n\n/*\n    Component for Random Grid Tab\n*/\n\nclass RandomGridPage extends Component {\n  constructor() {\n    super();\n    this.state = {\n      alivePercentage: 50,\n      backgroundColor: '#FFFFFF',\n      birthRule: [3],\n      cellColor: '#000000',\n      cellSize: 20,\n      cols: 10,\n      framerate: 5,\n      grid: [],\n      refreshVal: 0,\n      rows: 10,\n      surviveRule: [2, 3],\n    };\n    this.generateGrid = this.generateGrid.bind(this);\n    this.renderRef = React.createRef();\n    this.resetAutomata = this.resetAutomata.bind(this);\n    this.updateParameters = this.updateParameters.bind(this);\n  }\n\n  generateGrid() {\n    // generate new grid\n    let { cols, rows, alivePercentage } = this.state;\n    let newGrid = createGrid(rows, cols, alivePercentage);\n    if (this.state.grid.length > 0) {\n      // get rid of old grid\n      this.resetAutomata();\n    }\n    this.setState({ grid: newGrid });\n  }\n\n  resetAutomata() {\n    // refresh grid by increasing key of component\n    this.setState((state) => ({\n      refreshVal: state.refreshVal + 1,\n    }));\n  }\n\n  updateParameters = (newParams) => {\n    // update grid parameters passed up from customization drawer\n    this.resetAutomata();\n    setTimeout(() => {\n      this.setState({ ...newParams }, () => this.generateGrid());\n    }, 0);\n  };\n\n  render() {\n    // render random grid page\n    // check if grid exists, if so, render grid\n    let displayGrid = this.state.grid.length > 0;\n\n    return (\n      <div className=\"random-page\">\n        Random Grid Page!\n        <div className=\"customization-container\">\n          <GridCustomization\n            parentTab={'RANDOM'}\n            submitFunction={this.updateParameters}\n          />\n        </div>\n        <div className=\"generate-grid-container\">\n          <Button onClick={this.generateGrid}>Create Random Grid</Button>\n        </div>\n        {displayGrid && (\n          <div className=\"sketch-container\">\n            <CellularAutomatonSketch\n              {...this.state}\n              key={this.state.refreshVal}\n              refLoc={this.renderRef}\n            />\n          </div>\n        )}\n        {displayGrid && (\n          <div className=\"reset-button-container\">\n            <Button onClick={this.resetAutomata}>Reset</Button>\n          </div>\n        )}\n        {displayGrid && (\n          <div className=\"save-rle-container\">\n            <SavedRLEModal {...this.state} />\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default RandomGridPage;\n\n// TODO\n// styling\n// add text explaining page\n","import './css/App.css';\nimport DrawGridPage from './tab_pages/DrawGridPage';\nimport HomePage from './tab_pages/HomePage';\nimport LoadRLEPage from './tab_pages/LoadRLEPage';\nimport RandomGridPage from './tab_pages/RandomGridPage';\nimport React from 'react';\nimport Tab from 'react-bootstrap/Tab';\nimport Tabs from 'react-bootstrap/Tabs';\n\n/*\n    Root component to render tabs and tab switching\n*/\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      refreshTabVal: 0,\n    };\n    this.resetTab = this.resetTab.bind(this);\n  }\n\n  resetTab() {\n    // remove sketch buttons and table element when changing tabs, and refresh tabs\n    setTimeout(() => {\n      let buttons = document.querySelectorAll('body > button');\n      let table = document.querySelector('body > table');\n      if (buttons.length > 0) {\n        for (let i = 0; i < buttons.length; i++) {\n          buttons[i].parentNode.removeChild(buttons[i]);\n        }\n        this.setState((state) => ({\n          refreshTabVal: state.refreshTabVal + 1,\n        }));\n      }\n      if (table !== null) {\n        table.parentNode.removeChild(table);\n        this.setState((state) => ({\n          refreshTabVal: state.refreshTabVal + 1,\n        }));\n      }\n    }, 0);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Tabs\n          defaultActiveKey=\"home\"\n          id=\"main-tab-group\"\n          onSelect={() => this.resetTab()}\n        >\n          <Tab eventKey=\"home\" title=\"Home\">\n            <HomePage />\n          </Tab>\n          <Tab eventKey=\"draw\" title=\"Draw Grid\">\n            <DrawGridPage key={this.state.refreshTabVal} />\n          </Tab>\n          <Tab eventKey=\"loadrle\" title=\"Load RLE\">\n            <LoadRLEPage key={this.state.refreshTabVal} />\n          </Tab>\n          <Tab eventKey=\"random\" title=\"Random Grid\">\n            <RandomGridPage key={this.state.refreshTabVal} />\n          </Tab>\n        </Tabs>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n//TODO:\n// allow user to draw grid\n// styling\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}