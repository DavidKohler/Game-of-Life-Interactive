{"version":3,"sources":["assets/gliderGif.gif","components/InteractiveGrid.js","logic/rleLogic.js","logic/gridLogic.js","components/SavedRLEModal.js","sliders/sliderHandle.js","sliders/sliderMarks.js","tab_pages/DrawGridPage.js","tab_pages/HomePage.js","sketches/CellularAutomatonSketch.js","components/GridCustomization.js","components/LoadRLEDrawer.js","tab_pages/LoadRLEPage.js","tab_pages/RandomGridPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","InteractiveGrid","clickableGrid","rows","cols","callback","grid","document","createElement","className","r","tr","appendChild","c","cell","addEventListener","el","this","props","row","col","body","ref","refLoc","Component","gridToRLE","bRule","sRule","rowSums","map","reduce","a","b","colSums","i","top","findIndex","v","bot","length","slice","reverse","minCol","maxCol","findMeaningfulBoundaries","RLEarray","push","String","join","RLEgroups","rowString","concat","cellCounter","forEach","g","possibleOptimization","indicesToRemove","includes","sort","splice","pop","encodeGrid","finishedWriting","pos","individualLine","toString","cells","match","charAt","reshapeGrid","oldGrid","newR","newC","newGrid","inner","extraRows","extraCols","Math","floor","Array","fill","unshift","abs","shift","j","k","SavedRLEModal","handleClose","setState","showModal","handleShow","RLE","table","childNodes","rowCount","colsCount","tableToGrid","querySelector","birthRule","surviveRule","savedRLE","downloadRLEFile","data","state","file","Blob","type","window","navigator","msSaveOrOpenBlob","url","URL","createObjectURL","href","download","click","setTimeout","removeChild","revokeObjectURL","bind","Button","variant","loadGrid","onClick","disabled","Modal","show","size","onHide","Header","closeButton","Title","Body","line","key","Footer","SliderHandle","value","dragging","index","rest","FlexHandle","Value","styled","Handle","div","cellRatioMarks","0","20","40","50","60","80","100","cellSizeMarks","1","5","10","15","25","30","35","dimensionMarks","70","framerateMarks","wrapperStyle","width","margin","DrawGridPage","handleSubmit","drawerOpen","parentNode","refreshTabVal","toggleDrawer","open","event","updateColumns","val","updateRows","refreshVal","makeGridAppear","renderRef","React","createRef","Accordion","defaultActiveKey","Card","Toggle","as","eventKey","style","cursor","Collapse","rel","target","Fragment","Drawer","anchor","onClose","defaultValue","handle","max","marks","min","onChange","HomePage","Jumbotron","src","exampleGif","alt","CellularAutomatonSketch","countNeighbors","maxR","maxC","sum","createGrid","playButton","nextButton","backgroundColor","cellColor","cellSize","framerate","parentTab","playing","sketch","p5","p","toggleNext","draw","togglePlay","noLoop","html","loop","setup","height","createCanvas","parent","current","frameRate","createButton","mousePressed","background","x","y","stroke","rect","next","thisCell","nAlive","GridCustomization","handleBackgroundColorUpdate","color","hex","handleCellColorUpdate","submitFunction","updateBornButtons","isPressed","newPressings","birthRulePressed","out","bool","updateCellRatio","alivePercentage","updateCellSize","updateFramerate","updateSurviveButtons","surviveRulePressed","undefined","defaultCols","loadedUpdate","defaultRows","prevProps","prevState","bPressed","sPressed","ButtonToolbar","aria-label","ButtonGroup","ind","LoadRLEDrawer","handleFileSubmit","convertedRLE","hasError","RLEstring","xvalue","yvalue","rulestring","RLElines","split","gridString","chunks","Number","trim","Error","rowChunks","re","RLEtags","tagCounts","exec","gridRow","curTag","curCt","gridRowLen","z","len","uniq","e","filter","err","RLEtoGrid","loadedContents","loadFileError","errorType","message","loadDrawer","readSingleFile","files","name","loadedFileName","reader","FileReader","readAsText","onload","contents","result","toggleLoadDrawer","getElementById","id","accept","item","LoadRLEPage","updateGrid","newParams","resetAutomata","updateParameters","prevChanges","changesMade","playbuttons","nextbuttons","children","displayGrid","RandomGridPage","generateGrid","aliveP","modifiedProbRandom","random","App","resetTab","buttons","querySelectorAll","Tabs","onSelect","Tab","title","Boolean","location","hostname","ReactDOM","render","StrictMode","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.0f80c00a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/gliderGif.b0a1b9ac.gif\";","import '../css/InteractiveGrid.css';\nimport React, { Component } from 'react';\n\n/*\n        Component for Interactive Grid\n*/\n\nclass InteractiveGrid extends Component {\n  componentDidMount() {\n    // create clickable grid\n    let grid = this.clickableGrid(this.props.rows, this.props.cols, function (\n      el,\n      row,\n      col\n    ) {\n      if (el.className === 'clicked') {\n        // make dead\n        el.className = '';\n      } else {\n        // make alive\n        el.className = 'clicked';\n      }\n    });\n\n    document.body.appendChild(grid);\n  }\n\n  clickableGrid = (rows, cols, callback) => {\n    // Function that handles clickable grid\n    // Credit to Phrogz from stackoverflow\n    let grid = document.createElement('table');\n    grid.className = 'grid';\n    for (let r = 0; r < rows; ++r) {\n      let tr = grid.appendChild(document.createElement('tr'));\n      for (let c = 0; c < cols; ++c) {\n        let cell = tr.appendChild(document.createElement('td'));\n        cell.addEventListener(\n          'click',\n          (function (el, r, c) {\n            return function () {\n              callback(el, r, c);\n            };\n          })(cell, r, c),\n          false\n        );\n      }\n    }\n    return grid;\n  };\n\n  render() {\n    // render to parent component\n    return (\n      <div className=\"InteractiveGridSketch\">\n        <div ref={this.props.refLoc}></div>\n      </div>\n    );\n  }\n}\n\nexport default InteractiveGrid;\n","import { uniq } from 'lodash';\n\n/*\n    File for all functions dealing with RLE logic\n*/\n\nfunction gridToRLE(grid, bRule, sRule) {\n  // convert grid with B rule and S rule to RLE array\n  // where each element in array is a separate line of RLE file\n  let { top, bot, minCol, maxCol } = findMeaningfulBoundaries(grid);\n  let RLEarray = [];\n  RLEarray.push(\n    `x = ${maxCol - minCol + 1}, y = ${bot - top + 1}, rule = B${bRule\n      .map(String)\n      .join('')}/S${sRule.map(String).join('')}`\n  );\n  let RLEgroups = encodeGrid(grid, top, bot, minCol, maxCol);\n  let finishedWriting = false;\n  let pos = 0;\n  let individualLine = '';\n  while (finishedWriting === false) {\n    if (RLEgroups[pos][1] === 1) {\n      // single cell\n      if (1 + individualLine.length > 70) {\n        // new line\n        RLEarray.push(individualLine);\n        individualLine = RLEgroups[pos][0];\n      } else {\n        // same line\n        individualLine = individualLine.concat(RLEgroups[pos][0]);\n      }\n    } else {\n      if (\n        RLEgroups[pos][1].toString().length + (individualLine.length + 1) >\n        70\n      ) {\n        // new line\n        RLEarray.push(individualLine);\n        individualLine = RLEgroups[pos][1].toString().concat(RLEgroups[pos][0]);\n      } else {\n        // same line\n        individualLine = individualLine.concat(\n          RLEgroups[pos][1].toString().concat(RLEgroups[pos][0])\n        );\n      }\n    }\n    if (pos === RLEgroups.length - 1) {\n      RLEarray.push(individualLine);\n      finishedWriting = true;\n    } else {\n      pos++;\n    }\n  }\n\n  return RLEarray;\n}\n\nfunction findMeaningfulBoundaries(grid) {\n  // given grid, find smallest boundaries that contain all\n  // specified cells, which is needed for RLE file\n  let rowSums = grid.map((row) => {\n    return row.reduce((a, b) => {\n      return a + b;\n    });\n  });\n  let sumCol = (r, a) => r.map((b, i) => a[i] + b);\n  let colSums = grid.reduce(sumCol);\n\n  let top = rowSums.findIndex((v) => v > 0);\n  let bot =\n    rowSums.length -\n    1 -\n    rowSums\n      .slice()\n      .reverse()\n      .findIndex((v) => v > 0);\n\n  let minCol = colSums.findIndex((v) => v > 0);\n  let maxCol =\n    colSums.length -\n    1 -\n    colSums\n      .slice()\n      .reverse()\n      .findIndex((v) => v > 0);\n\n  if (top === -1 || bot === -1) {\n    // empty grid found, no meaningful boundary possible\n    // return default grid dimensions\n    top = 0;\n    bot = grid.length - 1;\n    minCol = 0;\n    maxCol = grid[0].length - 1;\n  }\n\n  return {\n    top,\n    bot,\n    minCol,\n    maxCol,\n  };\n}\n\nfunction cellCounter(cells) {\n  // convert strings of cells to value length format\n  // ex: bb -> ['b', 2]\n  let s = cells.match(/([a-zA-Z])\\1*/g) || [];\n  return s.map((v) => {\n    return [v.charAt(0), v.length];\n  });\n}\n\nfunction encodeGrid(grid, top, bot, minCol, maxCol) {\n  // encode a grid from 2D array of 0's and 1's to\n  // unsimplified RLE string format\n  // ex: 0 1 1 -> boo\n  let RLEgroups = [];\n  for (let row = top; row < bot + 1; row++) {\n    let rowString = '';\n    for (let col = minCol; col < maxCol + 1; col++) {\n      let cell = grid[row][col];\n      if (cell === 1) {\n        rowString = rowString.concat('o');\n      } else {\n        rowString = rowString.concat('b');\n      }\n    }\n    let group = cellCounter(rowString);\n    group.forEach((g) => {\n      RLEgroups.push(g);\n    });\n    if (row !== bot) {\n      RLEgroups.push(['$', 1]);\n    } else {\n      RLEgroups.push(['!', 1]);\n    }\n  }\n\n  // optimize RLE string by considering neighbors in string\n  let possibleOptimization = true;\n  while (possibleOptimization === true) {\n    possibleOptimization = false;\n    let indicesToRemove = [];\n    for (let i = 0; i < RLEgroups.length; i++) {\n      if (i < RLEgroups.length - 1) {\n        if (\n          ['$', '!'].includes(RLEgroups[i + 1][0]) &&\n          RLEgroups[i][0] === 'b'\n        ) {\n          indicesToRemove.push(i);\n        }\n        if (RLEgroups[i][0] === RLEgroups[i + 1][0]) {\n          RLEgroups[i + 1] = [\n            RLEgroups[i][0],\n            RLEgroups[i][1] + RLEgroups[i + 1][1],\n          ];\n          indicesToRemove.push(i);\n        }\n      }\n    }\n\n    // remove specified indices from array\n    if (indicesToRemove.length > 0) {\n      possibleOptimization = true;\n      // delete indices\n      indicesToRemove.sort(function (a, b) {\n        return a - b;\n      });\n      while (indicesToRemove.length) {\n        RLEgroups.splice(indicesToRemove.pop(), 1);\n      }\n    }\n  }\n  return RLEgroups;\n}\n\nfunction RLEtoGrid(RLEstring) {\n  // given and RLE file (string), convert to 2d array for grid\n  let RLElines = RLEstring.split('\\n');\n  let gridString = '';\n  let xvalue, yvalue, rulestring;\n  for (let i = 0; i < RLElines.length; i++) {\n    if (RLElines[i][0] === '#') {\n      // comment line\n      continue;\n    } else if (RLElines[i][0] === 'x') {\n      // rule line\n      let chunks = RLElines[i].split(',');\n      xvalue = Number(chunks[0].trim().split('=')[1]);\n      yvalue = Number(chunks[1].trim().split('=')[1]);\n      rulestring = chunks[2].split('=')[1].trim();\n    } else {\n      gridString = gridString.concat(RLElines[i]);\n    }\n    if (RLElines[i][RLElines[i].length - 1] === '!') {\n      gridString = gridString.slice(0, -1);\n    }\n  }\n  if (!(xvalue > 0) || !(yvalue > 0)) {\n    // x or y not valid/not specified\n    throw new Error('Dimension Error');\n  }\n  let grid = [];\n  let rowChunks = gridString.split('$');\n  for (let j = 0; j < rowChunks.length; j++) {\n    let re = /[bo]/g;\n    // only match b's and o's\n    let RLEtags = [];\n    let match = null;\n    let tagCounts = rowChunks[j].split(/[bo]/);\n    do {\n      match = re.exec(rowChunks[j]);\n      if (match) {\n        RLEtags.push(match[0]);\n      }\n    } while (match);\n    let gridRow = [];\n    for (let k = 0; k < RLEtags.length; k++) {\n      let curTag = RLEtags[k];\n      let curCt = Number(tagCounts[k]);\n      if (curCt === 0) {\n        curCt = 1;\n      }\n      if (curTag === 'b') {\n        gridRow.push(...Array(curCt).fill(0));\n      } else {\n        gridRow.push(...Array(curCt).fill(1));\n      }\n    }\n    if (gridRow.length < xvalue) {\n      // add extra 0's\n      gridRow.push(...Array(xvalue - gridRow.length).fill(0));\n    }\n    if (gridRow.length > xvalue) {\n      // prune RLE based on provided xvalue\n      let gridRowLen = gridRow.length;\n      for (let p = 0; p < gridRowLen - xvalue; p++) {\n        gridRow.pop();\n      }\n    }\n    grid.push(gridRow);\n    if (tagCounts[tagCounts.length - 1] !== '') {\n      // account for gap lines\n      for (let z = 0; z < Number(tagCounts[tagCounts.length - 1]) - 1; z++) {\n        grid.push(Array(xvalue).fill(0));\n      }\n    }\n  }\n\n  if (grid.length < yvalue) {\n    // handle discrepency when RLE provided doesn't match yvalue provided\n    let len = grid.length;\n    for (let p = 0; p < yvalue - len; p++) {\n      grid.push(Array(xvalue).fill(0));\n    }\n  }\n\n  // check for valid birth and survive rules, otherwise default to empty rules\n  let birthRule, surviveRule;\n  try {\n    birthRule = uniq(\n      rulestring\n        .split('/')[0]\n        .split('B')[1]\n        .split('')\n        .map((e) => Number(e))\n        .filter((e) => e >= 0)\n    );\n  } catch (err) {\n    // no birth rule specified\n    birthRule = [];\n  }\n  try {\n    surviveRule = uniq(\n      rulestring\n        .split('/')[1]\n        .split('S')[1]\n        .split('')\n        .map((e) => Number(e))\n        .filter((e) => e >= 0)\n    );\n  } catch (err) {\n    // no survive rule specified\n    surviveRule = [];\n  }\n\n  return { grid, birthRule, surviveRule, rows: yvalue, cols: xvalue };\n}\n\nexport { gridToRLE, RLEtoGrid };\n","/*\n    File for all functions dealing with grid logic\n*/\n\nfunction createGrid(r, c, aliveP) {\n  // create grid with random cells\n  let grid = new Array(r);\n  for (let i = 0; i < grid.length; i++) {\n    grid[i] = new Array(c);\n  }\n  // modify probability based on specified percentage alive\n  let modifiedProbRandom = Array(100).fill(1).fill(0, aliveP);\n  for (let i = 0; i < r; i++) {\n    for (let j = 0; j < c; j++) {\n      grid[i][j] = modifiedProbRandom[Math.floor(Math.random() * 100)];\n    }\n  }\n  return grid;\n}\n\nfunction reshapeGrid(oldGrid, newR, newC) {\n  // reshape cells to grid if grid needs to be resized\n  let newGrid = oldGrid.map((inner) => inner.slice());\n  let extraRows = newR - oldGrid.length;\n  let extraCols = newC - oldGrid[0].length;\n  if (extraRows >= 0) {\n    for (let i = 0; i < Math.floor(extraRows / 2); i++) {\n      newGrid.push(Array(oldGrid[0].length).fill(0));\n      newGrid.unshift(Array(oldGrid[0].length).fill(0));\n    }\n    if (extraRows % 2 === 1) {\n      newGrid.push(Array(oldGrid[0].length).fill(0));\n    }\n  }\n  if (extraRows < 0) {\n    extraRows = Math.abs(extraRows);\n    for (let i = 0; i < Math.floor(extraRows / 2); i++) {\n      newGrid.pop();\n      newGrid.shift();\n    }\n    if (extraRows % 2 === 1) {\n      newGrid.pop();\n    }\n  }\n  if (extraCols >= 0) {\n    for (let j = 0; j < Math.floor(extraCols / 2); j++) {\n      for (let k = 0; k < newGrid.length; k++) {\n        newGrid[k].push(0);\n        newGrid[k].unshift(0);\n      }\n    }\n    if (extraCols % 2 === 1) {\n      for (let k = 0; k < newGrid.length; k++) {\n        newGrid[k].push(0);\n      }\n    }\n  }\n  if (extraCols < 0) {\n    extraCols = Math.abs(extraCols);\n    for (let j = 0; j < Math.floor(extraCols / 2); j++) {\n      for (let k = 0; k < newGrid.length; k++) {\n        newGrid[k].pop();\n        newGrid[k].shift();\n      }\n    }\n    if (extraCols % 2 === 1) {\n      for (let k = 0; k < newGrid.length; k++) {\n        newGrid[k].pop();\n      }\n    }\n  }\n\n  return newGrid;\n}\n\nfunction tableToGrid(table) {\n  // converts table elements to 2D grid notation\n  let rows = table.childNodes;\n  let rowCount = rows.length;\n  let colsCount = rows[0].childNodes.length;\n  let grid = new Array(rowCount);\n  for (let i = 0; i < rowCount; i++) {\n    grid[i] = new Array(colsCount).fill(0);\n    let cols = rows[i].childNodes;\n    for (let j = 0; j < colsCount; j++) {\n      if (cols[j].className === 'clicked') {\n        grid[i][j] = 1;\n      }\n    }\n  }\n  return grid;\n}\n\nexport { createGrid, reshapeGrid, tableToGrid };\n","import '../css/SavedRLEModal.css';\nimport Button from 'react-bootstrap/Button';\nimport { gridToRLE } from '../logic/rleLogic';\nimport { tableToGrid } from '../logic/gridLogic';\nimport Modal from 'react-bootstrap/Modal';\nimport React, { Component } from 'react';\n\n/*\n    Component for RLE popup modal\n*/\n\nclass SavedRLEModal extends Component {\n  constructor() {\n    super();\n    this.state = {\n      savedRLE: [''],\n      showModal: false,\n    };\n    this.handleClose = this.handleClose.bind(this);\n    this.handleShow = this.handleShow.bind(this);\n  }\n\n  handleClose = () => {\n    // handle closing modal\n    this.setState({ showModal: false });\n  };\n\n  handleShow = () => {\n    // handle rendering modal\n    let grid;\n    if (this.props.grid.length === 0) {\n      // convert table from drawn grid\n      grid = tableToGrid(document.querySelector('body > table'));\n    } else {\n      // get grid from props\n      grid = this.props.grid;\n    }\n    let RLE = gridToRLE(grid, this.props.birthRule, this.props.surviveRule);\n    this.setState({ showModal: true, savedRLE: RLE });\n  };\n\n  downloadRLEFile = () => {\n    // function to download RLE data to an RLE file for user\n    let data = this.state.savedRLE.join('\\n');\n    let filename = 'savedRLE.rle';\n    let type = '.rle';\n    let file = new Blob([data], { type: type });\n    if (window.navigator.msSaveOrOpenBlob)\n      // IE10+\n      window.navigator.msSaveOrOpenBlob(file, filename);\n    else {\n      // Others\n      let a = document.createElement('a'),\n        url = URL.createObjectURL(file);\n      a.href = url;\n      a.download = filename;\n      document.body.appendChild(a);\n      a.click();\n      setTimeout(function () {\n        document.body.removeChild(a);\n        window.URL.revokeObjectURL(url);\n      }, 0);\n    }\n  };\n\n  render() {\n    // render component\n    return (\n      <div>\n        <Button\n          variant={this.props.loadGrid ? 'primary' : 'secondary'}\n          onClick={this.handleShow}\n          disabled={!this.props.loadGrid}\n        >\n          Save Automaton\n        </Button>\n\n        <Modal show={this.state.showModal} size=\"lg\" onHide={this.handleClose}>\n          <Modal.Header closeButton>\n            <Modal.Title>RLE File</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            {this.state.savedRLE.map((line, i) => (\n              <p key={i}>{line}</p>\n            ))}\n          </Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"primary\" onClick={this.downloadRLEFile}>\n              Download RLE File\n            </Button>\n            <Button variant=\"danger\" onClick={this.handleClose}>\n              Close\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nexport default SavedRLEModal;\n","/*\n    Function to create desired slider handle for customization drawers\n    Idea for this code comes from zealous-snyder-0bj4r\n*/\n\nimport { Handle } from 'rc-slider';\nimport React from 'react';\nimport styled from 'styled-components';\n\nexport function SliderHandle(props) {\n  const { value, dragging, index, ...rest } = props;\n\n  return (\n    <FlexHandle key={index} value={value} {...rest}>\n      {dragging && <Value>{value}</Value>}\n    </FlexHandle>\n  );\n}\n\nconst FlexHandle = styled(Handle)`\n  display: flex;\n  justify-content: center;\n`;\n\nconst Value = styled.div`\n  margin-top: -32px;\n  white-space: nowrap;\n  color: black;\n  font-size: 14px;\n  font-weight: bold;\n`;\n","/*\n    File containing marks and labels for sliders used in customization\n*/\n\n// ratio of alive/dead cell slider\nconst cellRatioMarks = {\n  0: '0/100',\n  20: '20/80',\n  40: '40/60',\n  50: '50/50',\n  60: '60/40',\n  80: '80/20',\n  100: '100/0',\n};\n\n// cell size slider\nconst cellSizeMarks = {\n  1: '1',\n  5: '5',\n  10: '10',\n  15: '15',\n  20: '20',\n  25: '25',\n  30: '30',\n  35: '35',\n  40: '40',\n};\n\n// row and column sliders\nconst dimensionMarks = {\n  1: '1',\n  10: '10',\n  20: '20',\n  30: '30',\n  40: '40',\n  50: '50',\n  60: '60',\n  70: '70',\n  80: '80',\n};\n\n// framerate slider\nconst framerateMarks = {\n  1: '1',\n  10: '10',\n  20: '20',\n  30: '30',\n  40: '40',\n  50: '50',\n  60: '60',\n};\n\nexport { cellRatioMarks, cellSizeMarks, dimensionMarks, framerateMarks };\n","import '../css/DrawGridPage.css';\nimport Accordion from 'react-bootstrap/Accordion';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\nimport Drawer from '@material-ui/core/Drawer';\nimport InteractiveGrid from '../components/InteractiveGrid';\nimport SavedRLEModal from '../components/SavedRLEModal';\nimport React, { Component } from 'react';\nimport Slider from 'rc-slider';\nimport { SliderHandle } from '../sliders/sliderHandle';\nimport { dimensionMarks } from '../sliders/sliderMarks';\n\n/*\n    Component for Drawing Grid Tab\n*/\n\nconst wrapperStyle = { width: 600, margin: 50 };\n\nclass DrawGridPage extends Component {\n  constructor() {\n    super();\n    this.state = {\n      birthRule: [3],\n      cols: 10,\n      drawerOpen: false,\n      grid: [],\n      loadGrid: false,\n      refreshVal: 0,\n      rows: 10,\n      surviveRule: [2, 3],\n    };\n    this.makeGridAppear = this.makeGridAppear.bind(this);\n    this.renderRef = React.createRef();\n    this.toggleDrawer = this.toggleDrawer.bind(this);\n    this.updateColumns = this.updateColumns.bind(this);\n    this.updateRows = this.updateRows.bind(this);\n  }\n\n  handleSubmit = () => {\n    // handle click on submit button\n    setTimeout(() => {\n      this.setState({ drawerOpen: false, grid: [], loadGrid: false });\n      let table = document.querySelector('body > table');\n      if (table !== null) {\n        table.parentNode.removeChild(table);\n        this.setState(\n          (state) => (\n            {\n              refreshTabVal: state.refreshTabVal + 1,\n              // eslint-disable-next-line\n            },\n            this.setState({ loadGrid: true })\n          )\n        );\n      }\n    }, 0);\n  };\n\n  makeGridAppear() {\n    // render drawing grid\n    this.setState({ loadGrid: true });\n  }\n\n  toggleDrawer = (open) => (event) => {\n    // toggle opening customization drawer\n    this.setState({ drawerOpen: open });\n  };\n\n  updateColumns = (val) => {\n    // update number of columns in grid\n    this.setState({\n      cols: val,\n    });\n  };\n\n  updateRows = (val) => {\n    // update number of rows in grid\n    this.setState({\n      rows: val,\n    });\n  };\n\n  render() {\n    // render page and buttons\n    return (\n      <div>\n        <div className=\"accordion-container\">\n          <Accordion defaultActiveKey=\"\">\n            <Card>\n              <Accordion.Toggle\n                as={Card.Header}\n                eventKey=\"0\"\n                style={{ cursor: 'pointer' }}\n              >\n                Click Here to Toggle Page Explanation\n              </Accordion.Toggle>\n              <Accordion.Collapse eventKey=\"0\">\n                <Card.Body>\n                  This is the <b>Draw Automaton</b> page where the user is able\n                  to create a grid of their desired size, draw a cellular\n                  automaton to their liking, and save this automaton to simulate\n                  later in the <b>Load Automaton</b> tab or another application\n                  <br />\n                  <br />\n                  The <b>Resize</b> button opens a drawer that will allow the\n                  user to change the dimensions of the grid that will be\n                  generated. Change the desired number of rows or columns and\n                  hit <b>Submit</b> to save any changes and close the drawer{' '}\n                  <br />\n                  <br />\n                  The <b>Open Grid</b> button then lets the user open the\n                  interactive grid of specified size (or 10x10 by default). Now,\n                  the user is able to click on any grid cells to toggle them\n                  on/off. A blank (white) cell is off or dead, while a filled\n                  (black) cell is on or alive <br />\n                  <br /> When the user is satisfied with the automaton they have\n                  drawn, they may hit the <b>Save Automaton</b> button to open a\n                  modal window showing the RLE format of their automaton. The\n                  user can now copy the RLE text or click the <b>Download</b>{' '}\n                  button to download this RLE to a .rle file. By default, each\n                  drawn automaton is saved with the 'B3/S23' rulestring that\n                  describes Conway's Game of Life\n                  <br />\n                  <br />\n                  RLE (or Run Length Encoded) is a file format commonly used for\n                  storing and reading cellular automata patterns. For more\n                  information about how it works, visit the{' '}\n                  <a\n                    href={'https://www.conwaylife.com/wiki/Run_Length_Encoded'}\n                    rel=\"noopener noreferrer\"\n                    target=\"_blank\"\n                  >\n                    LifeWiki\n                  </a>\n                </Card.Body>\n              </Accordion.Collapse>\n            </Card>\n          </Accordion>\n        </div>\n        <div className=\"draw-buttons\">\n          <div className=\"customizer-drawer\">\n            <React.Fragment key={'drawerOpen'}>\n              <div className=\"resize-button-container\">\n                <Button onClick={this.toggleDrawer(true)}>{'Resize'}</Button>\n              </div>\n              <Drawer\n                anchor={'right'}\n                onClose={this.toggleDrawer(false)}\n                open={this.state.drawerOpen}\n                style={{ 'user-select': 'none' }}\n              >\n                <div className=\"drawer-header\">\n                  Customize dimensions of interactive grid below <br />\n                  <br />\n                  Remember to hit submit to save changes!\n                </div>\n                <div className=\"column-slider\" style={wrapperStyle}>\n                  <div className=\"column-header\">\n                    {`Columns: ${this.state.cols}`}\n                  </div>\n                  <Slider\n                    defaultValue={this.state.cols}\n                    handle={SliderHandle}\n                    max={80}\n                    marks={dimensionMarks}\n                    min={1}\n                    onChange={(v) => this.updateColumns(v)}\n                  />\n                </div>\n                <div className=\"row-slider\" style={wrapperStyle}>\n                  <div className=\"row-header\">{`Rows: ${this.state.rows}`}</div>\n                  <Slider\n                    defaultValue={this.state.rows}\n                    handle={SliderHandle}\n                    marks={dimensionMarks}\n                    max={80}\n                    min={1}\n                    onChange={(v) => this.updateRows(v)}\n                  />\n                </div>\n                <div className=\"submit-container\">\n                  <Button onClick={this.handleSubmit}>Submit</Button>\n                </div>\n              </Drawer>\n            </React.Fragment>\n          </div>\n          <div className=\"open-grid-button-container\">\n            <Button\n              onClick={this.makeGridAppear}\n              disabled={this.state.loadGrid}\n              variant={!this.state.loadGrid ? 'primary' : 'secondary'}\n            >\n              {'Open Grid'}\n            </Button>\n          </div>\n          <div className=\"save-rle-container\">\n            <SavedRLEModal {...this.state} />\n          </div>\n        </div>\n        {this.state.loadGrid && (\n          <InteractiveGrid\n            key={this.props.refreshVal}\n            rows={this.state.rows}\n            cols={this.state.cols}\n            refLoc={this.renderRef}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default DrawGridPage;\n","import '../css/HomePage.css';\nimport exampleGif from '../assets/gliderGif.gif';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport React, { Component } from 'react';\n\n/*\n    Component for Home Page Tab\n*/\n\nclass HomePage extends Component {\n  render() {\n    return (\n      <div className=\"homepage-container\">\n        <div className=\"jumbo-container\">\n          <Jumbotron>\n            <h1>Interactive Life-like Cellular Automata</h1>\n            <div className=\"gif-container\">\n              <img src={exampleGif} alt=\"loading gif...\" />\n            </div>\n            <h5>\n              Create, load, and simulate various life-like cellular automata\n            </h5>\n            <br />\n            <h5>\n              To get started, click one of the tabs above, or read more info\n              below\n            </h5>\n          </Jumbotron>\n        </div>\n        <div className=\"description-container\">\n          <div className=\"site-description\">\n            <div className=\"site-description-header\">\n              <b>What is this site?</b>\n            </div>\n            <div>\n              This site, created by{' '}\n              <a\n                href={'https://dakokohler.com/'}\n                rel=\"noopener noreferrer\"\n                target=\"_blank\"\n              >\n                David Kohler\n              </a>\n              , serves as a place to experiment with life-like cellular automata\n              -- drawing new automata (in the Draw tab), loading in existing\n              automata (in the Load tab), or generating completely new and\n              random automata (in the Random tab) -- and subsequently simulating\n              generations of these automata to observe what happens. It is also\n              worth noting that simulations on this site use a bounded grid\n              rather than an infinite or boundless one (as other applications\n              such as Golly might use), and thus boundaries and B0 rules may\n              behave slightly differently\n            </div>\n          </div>\n          <div className=\"automata-description\">\n            <div className=\"automata-description-header\">\n              <b>What are cellular automata?</b>\n            </div>\n            <div>\n              Cellular automata (plural for automaton), are a class of\n              mathematical objects that have been used in the fields of\n              microstructure modeling, physics, quantum mechanics, and\n              theoretical biology (just to name a few). A cellular automaton\n              consists of a grid of cells, each of which has a finite set of\n              allowed states (such as on/off or alive/dead), and each of which\n              also has a neighborhood of other cells that it interacts with. The\n              state of the cellular automaton evolves over time, progressing\n              through a number of generations. The state of each cell at time{' '}\n              <i>t+1</i> depends on the state of each cell at time <i>t</i>, and\n              so on, with a specified transition rule that determines how the\n              automaton changes based on the states of each cell and\n              neighborhood <br />\n              <br className=\"custom-break\" />A life-like cellular automaton is a\n              subclass of cellular automata that has two dimensions, has two\n              states (on/off or alive/dead), uses the{' '}\n              <a\n                href={'https://en.wikipedia.org/wiki/Moore_neighborhood'}\n                rel=\"noopener noreferrer\"\n                target=\"_blank\"\n              >\n                Moore neighborhood\n              </a>\n              , and has a semitotalistic rule. The most famous cellular\n              automaton, and in fact what this subclass is named after, is\n              Conway's Game of Life. This site focuses specifically on life-like\n              cellular automata, of which there exist an incredible amount. For\n              more info on cellular automata or on Conway's Game of Life, visit{' '}\n              <a\n                href={'https://www.conwaylife.com/wiki/Main_Page'}\n                rel=\"noopener noreferrer\"\n                target=\"_blank\"\n              >\n                LifeWiki\n              </a>{' '}\n              or{' '}\n              <a\n                href={'https://en.wikipedia.org/wiki/Cellular_automaton'}\n                rel=\"noopener noreferrer\"\n                target=\"_blank\"\n              >\n                Wikipedia\n              </a>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default HomePage;\n","import React, { Component } from 'react';\nimport p5 from 'p5';\n\n/*\n    Component to render p5 sketch of cellular automaton based on props passed in\n*/\n\nclass CellularAutomatonSketch extends Component {\n  componentDidMount() {\n    let {\n      backgroundColor,\n      birthRule,\n      cellColor,\n      cellSize,\n      cols,\n      framerate,\n      grid,\n      parentTab,\n      rows,\n      surviveRule,\n    } = this.props;\n\n    let playButton;\n    let playing = false;\n    let nextButton;\n\n    // create sketch\n    this.sketch = new p5((p) => {\n      p.setup = () => {\n        // setup sketch and buttons\n        let width = cols * cellSize;\n        let height = rows * cellSize;\n\n        p.createCanvas(width, height).parent(this.props.refLoc.current);\n\n        p.frameRate(framerate);\n\n        playButton = p.createButton('Play');\n        playButton.mousePressed(togglePlay);\n        playButton.style('color', '#fff');\n        playButton.style('background-color', '#007bff');\n        playButton.style('border-color', '#007bff');\n        playButton.style('font-weight', '400');\n        playButton.style('border', '1px solid transparent');\n        playButton.style('padding', '.375rem .75rem');\n        playButton.style('font-size', '1rem');\n        playButton.style('line-height', '1.5');\n        playButton.style('border-radius', '.25rem');\n\n        if (parentTab === 'LOAD') {\n          playButton.parent('playbutton');\n        } else {\n          playButton.parent('playbuttonRandom');\n        }\n\n        nextButton = p.createButton('Next');\n        nextButton.mousePressed(toggleNext);\n        nextButton.style('color', '#fff');\n        nextButton.style('background-color', '#007bff');\n        nextButton.style('border-color', '#007bff');\n        nextButton.style('font-weight', '400');\n        nextButton.style('border', '1px solid transparent');\n        nextButton.style('padding', '.375rem .75rem');\n        nextButton.style('font-size', '1rem');\n        nextButton.style('line-height', '1.5');\n        nextButton.style('border-radius', '.25rem');\n\n        if (parentTab === 'LOAD') {\n          nextButton.parent('nextbutton');\n        } else {\n          nextButton.parent('nextbuttonRandom');\n        }\n\n        p.noLoop();\n      };\n\n      p.draw = () => {\n        // draw cells and grid\n        p.background(backgroundColor);\n\n        for (let i = 0; i < rows; i++) {\n          for (let j = 0; j < cols; j++) {\n            let x = j * cellSize;\n            let y = i * cellSize;\n            if (grid[i][j] === 1) {\n              p.fill(cellColor);\n              p.stroke(backgroundColor);\n              p.rect(x, y, cellSize - 1, cellSize - 1);\n            }\n          }\n        }\n\n        let next = this.createGrid(rows, cols);\n\n        for (let i = 0; i < rows; i++) {\n          for (let j = 0; j < cols; j++) {\n            let thisCell = grid[i][j];\n            let nAlive = this.countNeighbors(grid, i, j, rows, cols);\n\n            if (thisCell === 1) {\n              // alive cell, check for survival\n              if (surviveRule.includes(nAlive)) {\n                // lives on\n                next[i][j] = 1;\n              } else {\n                // underpopulation or overpopulation -> dies\n                next[i][j] = 0;\n              }\n            } else {\n              // dead cell, check for birth\n              if (birthRule.includes(nAlive)) {\n                // reproduces\n                next[i][j] = 1;\n              } else {\n                // stays dead\n                next[i][j] = 0;\n              }\n            }\n          }\n        }\n        grid = next;\n      };\n\n      function toggleNext() {\n        // control next button\n        p.draw();\n      }\n\n      function togglePlay() {\n        // control play button\n        if (playing) {\n          p.noLoop();\n          playButton.html('Play');\n        } else {\n          p.loop();\n          playButton.html('Pause');\n        }\n        playing = !playing;\n      }\n    });\n  }\n\n  countNeighbors = (g, r, c, maxR, maxC) => {\n    // find number of neighbors from cell at g[r][c]\n    let sum = 0;\n    for (let i = r - 1; i < r + 2; i++) {\n      for (let j = c - 1; j < c + 2; j++) {\n        if (i >= 0 && i < maxR && j >= 0 && j < maxC) {\n          sum += g[i][j];\n        }\n      }\n    }\n    sum -= g[r][c];\n    return sum;\n  };\n\n  createGrid = (r, c) => {\n    // create new grid of size r*c\n    let g = new Array(r);\n    for (let i = 0; i < g.length; i++) {\n      g[i] = new Array(c);\n    }\n    return g;\n  };\n\n  render() {\n    // render to parent component\n    return (\n      <div className=\"CellularAutomatonSketch\">\n        <div ref={this.props.refLoc} />\n      </div>\n    );\n  }\n}\n\nexport default CellularAutomatonSketch;\n","import '../css/GridCustomization.css';\nimport 'rc-slider/assets/index.css';\nimport Button from 'react-bootstrap/Button';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar';\nimport { ChromePicker } from 'react-color';\nimport Drawer from '@material-ui/core/Drawer';\nimport Slider from 'rc-slider';\nimport { SliderHandle } from '../sliders/sliderHandle';\nimport React, { Component } from 'react';\nimport {\n  cellRatioMarks,\n  cellSizeMarks,\n  dimensionMarks,\n  framerateMarks,\n} from '../sliders/sliderMarks';\n\nconst wrapperStyle = { width: 600, margin: 50 };\n\n/*\n    Component rendering customization drawer for grid\n*/\n\nclass GridCustomization extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      alivePercentage: 50,\n      backgroundColor: '#FFFFFF',\n      birthRule: this.props.bRule !== undefined ? this.props.bRule : [3],\n      birthRulePressed:\n        this.props.bRule !== undefined\n          ? Array(9)\n              .fill(false)\n              .map((v, i) => (this.props.bRule.includes(i) ? true : false))\n          : Array(9).fill(false).fill(true, 3, 4),\n      cellColor: '#000000',\n      cols: this.props.defaultCols !== undefined ? this.props.defaultCols : 10,\n      drawerOpen: false,\n      framerate: 10,\n      loadedUpdate: false,\n      cellSize: 20,\n      rows: this.props.defaultRows !== undefined ? this.props.defaultRows : 10,\n      surviveRule: this.props.sRule !== undefined ? this.props.sRule : [2, 3],\n      surviveRulePressed:\n        this.props.sRule !== undefined\n          ? Array(9)\n              .fill(false)\n              .map((v, i) => (this.props.sRule.includes(i) ? true : false))\n          : Array(9).fill(false).fill(true, 2, 4),\n    };\n\n    this.handleBackgroundColorUpdate = this.handleBackgroundColorUpdate.bind(\n      this\n    );\n    this.handleCellColorUpdate = this.handleCellColorUpdate.bind(this);\n    this.toggleDrawer = this.toggleDrawer.bind(this);\n    this.updateBornButtons = this.updateBornButtons.bind(this);\n    this.updateCellRatio = this.updateCellRatio.bind(this);\n    this.updateCellSize = this.updateCellSize.bind(this);\n    this.updateColumns = this.updateColumns.bind(this);\n    this.updateFramerate = this.updateFramerate.bind(this);\n    this.updateRows = this.updateRows.bind(this);\n    this.updateSurviveButtons = this.updateSurviveButtons.bind(this);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    // check if new rules were passed in (if tab is 'LOADRLE')\n    if (this.props.parentTab === 'LOADRLE' && prevProps !== this.props) {\n      setTimeout(() => {\n        let bPressed = Array(9).fill(false);\n        let sPressed = Array(9).fill(false);\n        this.props.bRule.forEach((v) => {\n          if (v !== undefined) bPressed[v] = true;\n        });\n        this.props.sRule.forEach((v) => {\n          if (v !== undefined) sPressed[v] = true;\n        });\n        this.setState({\n          rows: this.props.defaultRows,\n          cols: this.props.defaultCols,\n          birthRule: this.props.bRule,\n          birthRulePressed: bPressed,\n          surviveRule: this.props.sRule,\n          surviveRulePressed: sPressed,\n          loadedUpdate: true,\n        });\n      }, 0);\n    }\n  }\n\n  handleBackgroundColorUpdate = (color) => {\n    // update color of background of grid\n    this.setState({ backgroundColor: color.hex });\n  };\n\n  handleCellColorUpdate = (color) => {\n    // update color of live cells in grid\n    this.setState({ cellColor: color.hex });\n  };\n\n  handleSubmit = () => {\n    // handle click on submit button, activate parent submit function\n    this.props.submitFunction(this.state);\n    this.setState({ drawerOpen: false });\n  };\n\n  toggleDrawer = (open) => (event) => {\n    // toggle opening customization drawer\n    this.setState({ drawerOpen: open });\n  };\n\n  updateBornButtons = (isPressed, index) => {\n    // update birth rule and which buttons are pressed\n    let newPressings = this.state.birthRulePressed.slice(0);\n    newPressings[index] = !isPressed;\n    this.setState({\n      birthRulePressed: newPressings,\n      birthRule: newPressings.reduce(\n        (out, bool, index) => (bool ? out.concat(index) : out),\n        []\n      ),\n    });\n  };\n\n  updateCellRatio = (val) => {\n    // update percentage of live vs dead cells in grid\n    this.setState({\n      alivePercentage: val,\n    });\n  };\n\n  updateCellSize = (val) => {\n    // update cell size of sketch\n    this.setState({\n      cellSize: val,\n    });\n  };\n\n  updateColumns = (val) => {\n    // update number of columns in grid\n    this.setState({\n      cols: val,\n    });\n  };\n\n  updateFramerate = (val) => {\n    // update framerate for sketch\n    this.setState({\n      framerate: val,\n    });\n  };\n\n  updateRows = (val) => {\n    // update number of rows in grid\n    this.setState({\n      rows: val,\n    });\n  };\n\n  updateSurviveButtons = (isPressed, index) => {\n    // update survive rule and which buttons are pressed\n    let newPressings = this.state.surviveRulePressed.slice(0);\n    newPressings[index] = !isPressed;\n    this.setState({\n      surviveRulePressed: newPressings,\n      surviveRule: newPressings.reduce(\n        (out, bool, index) => (bool ? out.concat(index) : out),\n        []\n      ),\n    });\n  };\n\n  render() {\n    // render customization drawer and toggle button\n    let { birthRulePressed, surviveRulePressed } = this.state;\n\n    return (\n      <div className=\"customizer-drawer\">\n        <React.Fragment key={'drawerOpen'}>\n          <Button\n            onClick={this.toggleDrawer(true)}\n            disabled={!this.props.loadGrid}\n            variant={this.props.loadGrid ? 'primary' : 'secondary'}\n          >\n            {'Customize'}\n          </Button>\n          <Drawer\n            anchor={'right'}\n            onClose={this.toggleDrawer(false)}\n            open={this.state.drawerOpen}\n          >\n            <div className=\"drawer-header\">\n              Customize automaton and grid below <br />\n              <br />\n              Remember to hit submit to save changes!\n            </div>\n            <div className=\"column-slider\" style={wrapperStyle}>\n              <div className=\"column-header\">\n                {`Columns: ${this.state.cols}`}\n              </div>\n              <Slider\n                defaultValue={this.state.cols}\n                handle={SliderHandle}\n                max={80}\n                marks={dimensionMarks}\n                min={1}\n                onChange={(v) => this.updateColumns(v)}\n                style={{ 'user-select': 'none' }}\n              />\n            </div>\n            <div className=\"row-slider\" style={wrapperStyle}>\n              <div className=\"row-header\">{`Rows: ${this.state.rows}`}</div>\n              <Slider\n                defaultValue={this.state.rows}\n                handle={SliderHandle}\n                marks={dimensionMarks}\n                max={80}\n                min={1}\n                onChange={(v) => this.updateRows(v)}\n                style={{ 'user-select': 'none' }}\n              />\n            </div>\n            <div className=\"cell-size-slider\" style={wrapperStyle}>\n              <div className=\"cell-header\">\n                {`Cell Size: ${this.state.cellSize}`}\n              </div>\n              <Slider\n                defaultValue={this.state.cellSize}\n                handle={SliderHandle}\n                marks={cellSizeMarks}\n                max={40}\n                min={1}\n                onChange={(v) => this.updateCellSize(v)}\n                style={{ 'user-select': 'none' }}\n              />\n            </div>\n            {this.props.parentTab === 'RANDOM' && (\n              <div className=\"cell-ratio-slider\" style={wrapperStyle}>\n                <div className=\"cell-header\">{'Alive/Dead Cell Ratio'}</div>\n                <Slider\n                  defaultValue={this.state.alivePercentage}\n                  handle={SliderHandle}\n                  marks={cellRatioMarks}\n                  max={100}\n                  min={0}\n                  onChange={(v) => this.updateCellRatio(v)}\n                  style={{ 'user-select': 'none' }}\n                />\n              </div>\n            )}\n            <div className=\"button-toolbar-container\">\n              <ButtonToolbar\n                aria-label=\"Born Rule\"\n                style={{ 'user-select': 'none' }}\n                className=\"rule-button-container\"\n              >\n                <div className=\"birth-button-toolbar-container\">\n                  <div className=\"rule-header\">\n                    {`Born Rule: B${this.state.birthRule.map(String).join('')}`}\n                  </div>\n                  <ButtonGroup className=\"mr-2\" aria-label=\"born group\">\n                    {birthRulePressed.map((val, ind) => {\n                      return (\n                        <Button\n                          key={ind}\n                          onClick={() => this.updateBornButtons(val, ind)}\n                          variant={val === true ? 'success' : 'outline-success'}\n                        >\n                          {ind}\n                        </Button>\n                      );\n                    })}\n                  </ButtonGroup>\n                </div>\n                <div className=\"survive-button-toolbar-container\">\n                  <div className=\"rule-header\">\n                    {`Survive Rule: S${this.state.surviveRule\n                      .map(String)\n                      .join('')}`}\n                  </div>\n                  <ButtonGroup className=\"mr-2\" aria-label=\"survive group\">\n                    {surviveRulePressed.map((val, ind) => {\n                      return (\n                        <Button\n                          key={ind}\n                          onClick={() => this.updateSurviveButtons(val, ind)}\n                          variant={val === true ? 'success' : 'outline-success'}\n                        >\n                          {ind}\n                        </Button>\n                      );\n                    })}\n                  </ButtonGroup>\n                </div>\n              </ButtonToolbar>\n            </div>\n            <div className=\"framerate-slider\" style={wrapperStyle}>\n              <div className=\"framerate-header\">\n                {`Framerate: ${this.state.framerate}`}\n              </div>\n              <Slider\n                defaultValue={this.state.framerate}\n                handle={SliderHandle}\n                marks={framerateMarks}\n                max={60}\n                min={1}\n                onChange={(v) => this.updateFramerate(v)}\n                style={{ 'user-select': 'none' }}\n              />\n            </div>\n            <div className=\"color-pickers\">\n              <div className=\"cell-color-picker\">\n                <div className=\"cell-header\">\n                  {`Live Cell Color: ${this.state.cellColor}`}\n                </div>\n                <ChromePicker\n                  color={this.state.cellColor}\n                  onChange={this.handleCellColorUpdate}\n                />\n              </div>\n              <div className=\"cell-background-picker\">\n                <div className=\"cell-header\">\n                  {`Dead Cell Color: ${this.state.backgroundColor}`}\n                </div>\n                <ChromePicker\n                  color={this.state.backgroundColor}\n                  onChange={this.handleBackgroundColorUpdate}\n                />\n              </div>\n            </div>\n            <div className=\"submit-container\">\n              <Button onClick={this.handleSubmit}>Submit</Button>\n            </div>\n          </Drawer>\n        </React.Fragment>\n      </div>\n    );\n  }\n}\n\nexport default GridCustomization;\n","import '../css/LoadRLEDrawer.css';\nimport Button from 'react-bootstrap/Button';\nimport Drawer from '@material-ui/core/Drawer';\nimport { RLEtoGrid } from '../logic/rleLogic';\nimport React, { Component } from 'react';\n\n/*\n    Component rendering drawer to load RLE\n*/\n\nclass LoadRLEDrawer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      loadDrawer: false,\n      loadedContents: '',\n      loadedFileName: '',\n      loadFileError: false,\n    };\n    this.handleFileSubmit = this.handleFileSubmit.bind(this);\n    this.toggleLoadDrawer = this.toggleLoadDrawer.bind(this);\n  }\n\n  componentDidUpdate() {\n    // set listener for file upload when drawer is open\n    if (this.state.loadDrawer === true) {\n      setTimeout(() => {\n        document\n          .getElementById('file-input')\n          .addEventListener('change', this.readSingleFile, false);\n      }, 0);\n    }\n  }\n\n  handleFileSubmit = () => {\n    // handle click on submit button, activate parent submit function\n    let convertedRLE;\n    let hasError = false;\n    try {\n      convertedRLE = RLEtoGrid(this.state.loadedContents);\n    } catch (err) {\n      hasError = true;\n      setTimeout(() => {\n        this.setState({\n          loadFileError: true,\n          errorType: err.message,\n        });\n      }, 0);\n    }\n    if (hasError === false) {\n      setTimeout(() => {\n        this.props.submitFunction(convertedRLE);\n        this.setState({ loadDrawer: false, loadFileError: false });\n      }, 50);\n    }\n  };\n\n  readSingleFile = (e) => {\n    // read RLE file from upload\n    let file = e.target.files[0];\n    if (!file) {\n      return;\n    }\n    if (file.name !== this.state.loadedFileName) {\n      this.setState({ loadFileError: false });\n    }\n    let reader = new FileReader();\n    reader.readAsText(file);\n    reader.onload = (e) => {\n      let contents = e.target.result;\n      this.setState({\n        loadedContents: contents,\n        loadedFileName: file.name,\n        loadFileError: false,\n      });\n    };\n  };\n\n  resetAutomata() {\n    // refresh grid by increasing key of component\n    this.setState((state) => ({\n      refreshVal: state.refreshVal + 1,\n    }));\n  }\n\n  toggleLoadDrawer = (open) => (event) => {\n    // toggle opening customization drawer\n    this.setState({ loadDrawer: open });\n  };\n\n  render() {\n    return (\n      <div>\n        <React.Fragment key={'drawerOpen'}>\n          <Button onClick={this.toggleLoadDrawer(true)}>{'Load RLE'}</Button>\n          <Drawer\n            anchor={'right'}\n            onClose={this.toggleLoadDrawer(false)}\n            open={this.state.loadDrawer}\n          >\n            <div className=\"drawer-container\">\n              <div>\n                <input type=\"file\" id=\"file-input\" accept=\".rle\" />\n                <p>\n                  Only <b>.rle</b> files allowed\n                </p>\n                <p>Contents of the file:</p>\n                {this.state.loadedContents.split('\\n').map((item, i) => (\n                  <p key={i}>{item}</p>\n                ))}\n                <div className=\"load-file-button\">\n                  <Button\n                    variant={\n                      this.state.loadFileError === true ? 'danger' : 'primary'\n                    }\n                    onClick={this.handleFileSubmit}\n                  >\n                    {this.state.loadFileError ? 'Invalid Submission' : 'Submit'}\n                  </Button>\n                </div>\n                {this.state.loadFileError === true && (\n                  <div className=\"error-text\">\n                    Uh oh! Something went wrong!\n                    <br />\n                    <br /> It looks like your RLE file is not in the correct\n                    format\n                    <br />\n                    <br />\n                    For more information on correct format, please visit{' '}\n                    <a\n                      href={\n                        'https://www.conwaylife.com/wiki/Run_Length_Encoded'\n                      }\n                      rel=\"noopener noreferrer\"\n                      target=\"_blank\"\n                    >\n                      LifeWiki\n                    </a>\n                  </div>\n                )}\n              </div>\n            </div>\n          </Drawer>\n        </React.Fragment>\n      </div>\n    );\n  }\n}\n\nexport default LoadRLEDrawer;\n","import '../css/LoadRLEPage.css';\nimport Accordion from 'react-bootstrap/Accordion';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\nimport CellularAutomatonSketch from '../sketches/CellularAutomatonSketch';\nimport GridCustomization from '../components/GridCustomization';\nimport LoadRLEDrawer from '../components/LoadRLEDrawer';\nimport { reshapeGrid } from '../logic/gridLogic';\nimport SavedRLEModal from '../components/SavedRLEModal';\nimport React, { Component } from 'react';\n\n/*\n    Component for tab to load RLE\n*/\n\nclass LoadRLEPage extends Component {\n  constructor() {\n    super();\n    this.state = {\n      backgroundColor: '#FFFFFF',\n      birthRule: [],\n      cellColor: '#000000',\n      cellSize: 20,\n      changesMade: false,\n      cols: 10,\n      framerate: 10,\n      grid: [],\n      loadDrawer: false,\n      loadGrid: false,\n      refreshVal: 0,\n      rows: 10,\n      surviveRule: [],\n    };\n    this.renderRef = React.createRef();\n    this.resetAutomata = this.resetAutomata.bind(this);\n    this.updateGrid = this.updateGrid.bind(this);\n    this.updateParameters = this.updateParameters.bind(this);\n  }\n\n  componentDidUpdate() {\n    // get rid of extra p5js buttons\n    let playbuttons = document.getElementById('playbutton');\n    let nextbuttons = document.getElementById('nextbutton');\n    if (playbuttons.children.length > 1) {\n      playbuttons.children[0].parentNode.removeChild(playbuttons.children[0]);\n    }\n    if (nextbuttons.children.length > 1) {\n      nextbuttons.children[0].parentNode.removeChild(nextbuttons.children[0]);\n    }\n  }\n\n  resetAutomata() {\n    // refresh grid by increasing key of component\n    this.setState((state) => ({\n      refreshVal: state.refreshVal + 1,\n    }));\n  }\n\n  updateGrid = (newParams) => {\n    // update grid from loaded RLE\n    setTimeout(() => {\n      this.setState({ ...newParams, loadGrid: true });\n    }, 0);\n    setTimeout(() => {\n      this.resetAutomata();\n    }, 0);\n  };\n\n  updateParameters = (newParams) => {\n    // update grid parameters passed up from customization drawer\n    let prevChanges = this.state.changesMade;\n    let oldGrid = this.state.grid;\n    if (\n      newParams.rows !== this.state.rows ||\n      newParams.cols !== this.state.cols\n    ) {\n      this.setState(\n        { grid: reshapeGrid(oldGrid, newParams.rows, newParams.cols) },\n        this.setState(\n          { ...newParams, changesMade: !prevChanges },\n          this.resetAutomata()\n        )\n      );\n    } else {\n      this.setState(\n        { ...newParams, changesMade: !prevChanges },\n        this.resetAutomata()\n      );\n    }\n  };\n\n  render() {\n    // render random grid page\n    // check if grid exists, if so, render grid\n    let displayGrid = this.state.grid.length > 0;\n    return (\n      <div>\n        <div className=\"accordion-container\">\n          <Accordion defaultActiveKey=\"\">\n            <Card>\n              <Accordion.Toggle\n                as={Card.Header}\n                eventKey=\"0\"\n                style={{ cursor: 'pointer' }}\n              >\n                Click Here to Toggle Page Explanation\n              </Accordion.Toggle>\n              <Accordion.Collapse eventKey=\"0\">\n                <Card.Body>\n                  This is the <b>Load Automaton</b> page where the user is able\n                  to load a cellular automaton, customize it if desired, and\n                  simulate it\n                  <br />\n                  <br />\n                  The <b>Load RLE</b> button opens a drawer that will allow the\n                  user to load in an automaton in RLE format from a file. The\n                  user loads their RLE file with the .rle file extension from\n                  their computer by clicking on the <b>Choose File</b> button.\n                  The user must hit <b>Submit</b> to load their automaton and\n                  save any changes\n                  <br />\n                  <br />\n                  The <b>Customize</b> button opens a drawer that will allow the\n                  user to change various aspects of the automaton and its\n                  simulation. They can change the number of columns and rows,\n                  the cell size (how large the grid cells appear on the screen),\n                  birth and survival rules (rules which govern how cells are\n                  born and survive through each generation -- for more info\n                  about rules visit{' '}\n                  <a\n                    href={\n                      'https://www.conwaylife.com/wiki/Cellular_automaton#Rules'\n                    }\n                    rel=\"noopener noreferrer\"\n                    target=\"_blank\"\n                  >\n                    LifeWiki\n                  </a>\n                  ), framerate (the speed at which the simulation runs), and\n                  finally the live cell and dead cell colors (purely aesthetic).\n                  The user may hit <b>Submit</b> to save any changes, close the\n                  drawer, and display the changes <br />\n                  <br />\n                  Once the user's automaton has been successfully loaded, the\n                  automaton will appear along with several new buttons. The{' '}\n                  <b>Play</b> and <b>Next</b> buttons control the simulation of\n                  the automaton. When the <b>Play</b> button is pressed, it will\n                  start to play an infinite simulation, which may be paused at\n                  any time by clicking the <b>Pause</b> button. The <b>Next</b>{' '}\n                  button advances forward a single generation on every button\n                  press. At any time, the user may hit the <b>Reset</b> button\n                  to reset the automaton back to its initial state\n                  <br />\n                  <br /> The <b>Save Automaton</b> button opens a modal window\n                  showing the RLE format of the automaton being simulated, even\n                  if it has been modified from whatever was initially passed in.\n                  The user may now copy the RLE text or click the{' '}\n                  <b>Download</b> button to download this RLE to a file\n                  <br />\n                  <br />\n                  RLE (or Run Length Encoded) is a file format commonly used for\n                  storing and reading cellular automata patterns. For more\n                  information about how it works, visit the{' '}\n                  <a\n                    href={'https://www.conwaylife.com/wiki/Run_Length_Encoded'}\n                    rel=\"noopener noreferrer\"\n                    target=\"_blank\"\n                  >\n                    LifeWiki\n                  </a>\n                </Card.Body>\n              </Accordion.Collapse>\n            </Card>\n          </Accordion>\n        </div>\n        <div className=\"load-page-buttons\">\n          <div className=\"load-drawer-container\">\n            <LoadRLEDrawer submitFunction={this.updateGrid} />\n          </div>\n          <div className=\"customization-container\">\n            <GridCustomization\n              bRule={this.state.birthRule}\n              defaultRows={this.state.rows}\n              defaultCols={this.state.cols}\n              loadGrid={displayGrid}\n              parentTab={'LOADRLE'}\n              sRule={this.state.surviveRule}\n              submitFunction={this.updateParameters}\n            />\n          </div>\n          <div className=\"save-rle-container\">\n            <SavedRLEModal {...this.state} loadGrid={displayGrid} />\n          </div>\n        </div>\n        {displayGrid && (\n          <div className=\"sketch-container\">\n            <CellularAutomatonSketch\n              {...this.state}\n              parentTab=\"LOAD\"\n              key={this.state.refreshVal}\n              refLoc={this.renderRef}\n            />\n          </div>\n        )}\n        <div className=\"playback-container\">\n          <div className=\"playback-button\" id=\"playbutton\" />\n          <div className=\"playback-button\" id=\"nextbutton\" />\n          {displayGrid && <Button onClick={this.resetAutomata}>Reset</Button>}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default LoadRLEPage;\n","import '../css/RandomGridPage.css';\nimport Accordion from 'react-bootstrap/Accordion';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\nimport CellularAutomatonSketch from '../sketches/CellularAutomatonSketch';\nimport { createGrid } from '../logic/gridLogic';\nimport GridCustomization from '../components/GridCustomization';\nimport SavedRLEModal from '../components/SavedRLEModal';\nimport React, { Component } from 'react';\n\n/*\n    Component for Random Grid Tab\n*/\n\nclass RandomGridPage extends Component {\n  constructor() {\n    super();\n    this.state = {\n      alivePercentage: 50,\n      backgroundColor: '#FFFFFF',\n      birthRule: [3],\n      cellColor: '#000000',\n      cellSize: 20,\n      cols: 10,\n      framerate: 5,\n      grid: [],\n      refreshVal: 0,\n      rows: 10,\n      surviveRule: [2, 3],\n    };\n    this.generateGrid = this.generateGrid.bind(this);\n    this.renderRef = React.createRef();\n    this.resetAutomata = this.resetAutomata.bind(this);\n    this.updateParameters = this.updateParameters.bind(this);\n  }\n\n  componentDidUpdate() {\n    // get rid of extra p5js buttons\n    let playbuttons = document.getElementById('playbuttonRandom');\n    let nextbuttons = document.getElementById('nextbuttonRandom');\n    if (playbuttons.children.length > 1) {\n      playbuttons.children[0].parentNode.removeChild(playbuttons.children[0]);\n    }\n    if (nextbuttons.children.length > 1) {\n      nextbuttons.children[0].parentNode.removeChild(nextbuttons.children[0]);\n    }\n  }\n\n  generateGrid() {\n    // generate new grid\n    let { cols, rows, alivePercentage } = this.state;\n    let newGrid = createGrid(rows, cols, alivePercentage);\n    if (this.state.grid.length > 0) {\n      // get rid of old grid\n      this.resetAutomata();\n    }\n    this.setState({ grid: newGrid });\n  }\n\n  resetAutomata() {\n    // refresh grid by increasing key of component\n    this.setState((state) => ({\n      refreshVal: state.refreshVal + 1,\n    }));\n  }\n\n  updateParameters = (newParams) => {\n    // update grid parameters passed up from customization drawer\n    this.resetAutomata();\n    setTimeout(() => {\n      this.setState({ ...newParams }, () => this.generateGrid());\n    }, 0);\n  };\n\n  render() {\n    // render random grid page\n    // check if grid exists, if so, render grid\n    let displayGrid = this.state.grid.length > 0;\n\n    return (\n      <div className=\"random-page\">\n        <div className=\"accordion-container\">\n          <Accordion defaultActiveKey=\"\">\n            <Card>\n              <Accordion.Toggle\n                as={Card.Header}\n                eventKey=\"0\"\n                style={{ cursor: 'pointer' }}\n              >\n                Click Here to Toggle Page Explanation\n              </Accordion.Toggle>\n              <Accordion.Collapse eventKey=\"0\">\n                <Card.Body>\n                  This is the <b>Random Automaton</b> page where the user is\n                  able to customize, generate, and simulate random cellular\n                  automata\n                  <br />\n                  <br />\n                  The <b>Customize</b> button opens a drawer that will allow the\n                  user to change various aspects of the generated automaton and\n                  its simulation. They can change the number of columns and\n                  rows, the cell size (how large the grid cells appear on the\n                  screen), the Alive/Dead cell ratio (the desired ratio of live\n                  cells to dead cells for the starting state of the automaton),\n                  birth and survival rules (rules which govern how cells are\n                  born and survive through each generation -- for more info\n                  about rules visit{' '}\n                  <a\n                    href={\n                      'https://www.conwaylife.com/wiki/Cellular_automaton#Rules'\n                    }\n                    rel=\"noopener noreferrer\"\n                    target=\"_blank\"\n                  >\n                    LifeWiki\n                  </a>\n                  ), framerate (the speed at which the simulation runs), and\n                  finally the live cell and dead cell colors (purely aesthetic).\n                  The user may hit <b>Submit</b> to save any changes, close the\n                  drawer, and create a random automaton <br />\n                  <br />\n                  The <b>Create Automaton</b> button then lets the user generate\n                  a new, random cellular automaton based on the user's\n                  customization choices or default values <br />\n                  <br />\n                  The <b>Play</b> and <b>Next</b> buttons control the simulation\n                  of the automaton. When the <b>Play</b> button is pressed, it\n                  will start to play an infinite simulation, which may be paused\n                  at any time by clicking the <b>Pause</b> button. The{' '}\n                  <b>Next</b> button advances forward a single generation on\n                  every button press. At any time, the user may hit the{' '}\n                  <b>Reset</b> button to reset the automaton back to its initial\n                  state\n                  <br />\n                  <br /> If the user likes an automaton that has been generated,\n                  they may hit the <b>Save Automaton</b> button to open a modal\n                  window showing the RLE format of their automaton. The user may\n                  now copy the RLE text or click the <b>Download</b> button to\n                  download this RLE to a file\n                  <br />\n                  <br />\n                  RLE (or Run Length Encoded) is a file format commonly used for\n                  storing and reading cellular automata patterns. For more\n                  information about how it works, visit the{' '}\n                  <a\n                    href={'https://www.conwaylife.com/wiki/Run_Length_Encoded'}\n                    rel=\"noopener noreferrer\"\n                    target=\"_blank\"\n                  >\n                    LifeWiki\n                  </a>\n                </Card.Body>\n              </Accordion.Collapse>\n            </Card>\n          </Accordion>\n        </div>\n        <div className=\"load-page-buttons\">\n          <div className=\"customization-container\">\n            <GridCustomization\n              parentTab={'RANDOM'}\n              loadGrid={true}\n              submitFunction={this.updateParameters}\n            />\n          </div>\n          <div className=\"generate-grid-container\">\n            <Button onClick={this.generateGrid}>Create Automaton</Button>\n          </div>\n          <div className=\"save-rle-container\">\n            <SavedRLEModal {...this.state} loadGrid={displayGrid} />\n          </div>\n        </div>\n        {displayGrid && (\n          <div className=\"sketch-container\">\n            <CellularAutomatonSketch\n              {...this.state}\n              parentTab=\"RANDOM\"\n              key={this.state.refreshVal}\n              refLoc={this.renderRef}\n            />\n          </div>\n        )}\n        <div className=\"playback-container\">\n          <div className=\"playback-button\" id=\"playbuttonRandom\" />\n          <div className=\"playback-button\" id=\"nextbuttonRandom\" />\n          {displayGrid && <Button onClick={this.resetAutomata}>Reset</Button>}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default RandomGridPage;\n","import './css/App.css';\nimport DrawGridPage from './tab_pages/DrawGridPage';\nimport HomePage from './tab_pages/HomePage';\nimport LoadRLEPage from './tab_pages/LoadRLEPage';\nimport RandomGridPage from './tab_pages/RandomGridPage';\nimport React from 'react';\nimport Tab from 'react-bootstrap/Tab';\nimport Tabs from 'react-bootstrap/Tabs';\n\n/*\n    Root component to render tabs and tab switching\n*/\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      refreshTabVal: 0,\n    };\n    this.resetTab = this.resetTab.bind(this);\n  }\n\n  resetTab() {\n    // remove sketch buttons and table element when changing tabs, and refresh tabs\n    setTimeout(() => {\n      let buttons = document.querySelectorAll('body > button');\n      let table = document.querySelector('body > table');\n      if (buttons.length > 0) {\n        for (let i = 0; i < buttons.length; i++) {\n          buttons[i].parentNode.removeChild(buttons[i]);\n        }\n        this.setState((state) => ({\n          refreshTabVal: state.refreshTabVal + 1,\n        }));\n      }\n      if (table !== null) {\n        table.parentNode.removeChild(table);\n        this.setState((state) => ({\n          refreshTabVal: state.refreshTabVal + 1,\n        }));\n      }\n    }, 0);\n  }\n\n  render() {\n    return (\n      <div className=\"main-container\">\n        <div className=\"tab-container\">\n          <Tabs\n            defaultActiveKey=\"home\"\n            id=\"main-tab-group\"\n            onSelect={() => this.resetTab()}\n          >\n            <Tab eventKey=\"home\" title=\"Home\">\n              <HomePage />\n            </Tab>\n            <Tab eventKey=\"draw\" title=\"Draw Automaton\">\n              <DrawGridPage key={this.state.refreshTabVal} />\n            </Tab>\n            <Tab eventKey=\"loadrle\" title=\"Load Automaton\">\n              <LoadRLEPage key={this.state.refreshTabVal} />\n            </Tab>\n            <Tab eventKey=\"random\" title=\"Random Automaton\">\n              <RandomGridPage key={this.state.refreshTabVal} />\n            </Tab>\n          </Tabs>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}