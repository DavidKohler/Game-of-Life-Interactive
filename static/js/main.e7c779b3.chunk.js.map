{"version":3,"sources":["SliderHandle.js","SliderMarks.js","GridCustomization.js","HomePage.js","DrawGridPage.js","LoadRLEPage.js","CellularAutomatonSketch.js","RandomGridPage.js","App.js","serviceWorker.js","index.js"],"names":["SliderHandle","props","value","dragging","index","rest","FlexHandle","key","Value","styled","Handle","div","dimensionMarks","1","10","20","30","40","50","60","70","80","framerateMarks","resolutionMarks","5","15","25","35","wrapperStyle","width","margin","GridCustomization","updateColumns","val","setState","columns","updateRows","rows","updateFramerate","framerate","updateResolution","resolution","handleCellColorUpdate","color","cellColor","hex","handleBackgroundColorUpdate","backgroundColor","state","bind","className","style","this","onChange","v","min","max","marks","defaultValue","handle","onChangeComplete","Component","HomePage","DrawGridPage","LoadRLEPage","CellularAutomatonSketch","countNeighbors","g","r","c","maxR","maxC","sum","i","j","createGrid","cols","grid","Array","length","playButton","playing","sketch","p5","p","togglePlay","noLoop","html","loop","setup","height","createCanvas","parent","refLoc","current","frameRate","createButton","mousePressed","position","draw","background","x","y","fill","stroke","rect","next","neighbors","ref","RandomGridPage","Math","floor","random","refreshVal","myGrid","renderRef","React","createRef","resetAutomata","generateGrid","elem","document","querySelector","parentNode","removeChild","newGrid","displayResetButton","Button","onClick","App","refreshTabVal","resetTab","Tabs","defaultActiveKey","id","onSelect","Tab","eventKey","title","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e7c779b3.chunk.js","sourcesContent":["// Idea for this code comes from zealous-snyder-0bj4r\n\nimport React from 'react';\nimport styled from 'styled-components';\nimport { Handle } from 'rc-slider';\n\nexport function SliderHandle(props) {\n  const { value, dragging, index, ...rest } = props;\n\n  return (\n    <FlexHandle key={index} value={value} {...rest}>\n      {dragging && <Value>{value}</Value>}\n    </FlexHandle>\n  );\n}\n\nconst FlexHandle = styled(Handle)`\n  display: flex;\n  justify-content: center;\n`;\n\nconst Value = styled.div`\n  margin-top: -32px;\n  white-space: nowrap;\n  color: black;\n  font-size: 14px;\n  font-weight: bold;\n`;\n","const dimensionMarks = {\n  1: '1',\n  10: '10',\n  20: '20',\n  30: '30',\n  40: '40',\n  50: '50',\n  60: '60',\n  70: '70',\n  80: '80',\n};\n\nconst framerateMarks = {\n  1: '1',\n  10: '10',\n  20: '20',\n  30: '30',\n  40: '40',\n  50: '50',\n  60: '60',\n};\n\nconst resolutionMarks = {\n  1: '1',\n  5: '5',\n  10: '10',\n  15: '15',\n  20: '20',\n  25: '25',\n  30: '30',\n  35: '35',\n  40: '40',\n};\n\nexport { dimensionMarks, framerateMarks, resolutionMarks };\n","import React, { Component } from 'react';\nimport Slider from 'rc-slider';\nimport 'rc-slider/assets/index.css';\nimport { SliderHandle } from './SliderHandle';\nimport { dimensionMarks, framerateMarks, resolutionMarks } from './SliderMarks';\nimport { CompactPicker } from 'react-color';\n\nconst wrapperStyle = { width: 800, margin: 50 };\n\nclass GridCustomization extends Component {\n  constructor() {\n    super();\n    this.state = {\n      columns: 10,\n      rows: 10,\n      framerate: 10,\n      resolution: 10,\n      cellColor: '#000000',\n      backgroundColor: '#FFFFFF',\n    };\n    this.updateColumns = this.updateColumns.bind(this);\n    this.updateRows = this.updateRows.bind(this);\n    this.updateFramerate = this.updateFramerate.bind(this);\n    this.updateResolution = this.updateResolution.bind(this);\n    this.handleCellColorUpdate = this.handleCellColorUpdate.bind(this);\n    this.handleBackgroundColorUpdate = this.handleBackgroundColorUpdate.bind(\n      this\n    );\n  }\n\n  updateColumns = (val) => {\n    this.setState({\n      columns: val,\n    });\n  };\n\n  updateRows = (val) => {\n    this.setState({\n      rows: val,\n    });\n  };\n\n  updateFramerate = (val) => {\n    this.setState({\n      framerate: val,\n    });\n  };\n\n  updateResolution = (val) => {\n    this.setState({\n      resolution: val,\n    });\n  };\n\n  handleCellColorUpdate = (color) => {\n    this.setState({ cellColor: color.hex });\n  };\n\n  handleBackgroundColorUpdate = (color) => {\n    this.setState({ backgroundColor: color.hex });\n  };\n\n  render() {\n    return (\n      <div>\n        Home Page!\n        <div className={'column-slider'} style={wrapperStyle}>\n          {`Columns: ${this.state.columns}`}\n          <Slider\n            onChange={(v) => this.updateColumns(v)}\n            min={1}\n            max={80}\n            marks={dimensionMarks}\n            defaultValue={this.state.columns}\n            handle={SliderHandle}\n          />\n        </div>\n        <div className={'row-slider'} style={wrapperStyle}>\n          {`Rows: ${this.state.rows}`}\n          <Slider\n            onChange={(v) => this.updateRows(v)}\n            min={1}\n            max={80}\n            marks={dimensionMarks}\n            defaultValue={this.state.rows}\n            handle={SliderHandle}\n          />\n        </div>\n        <div className={'framerate-slider'} style={wrapperStyle}>\n          {`Framerate: ${this.state.framerate}`}\n          <Slider\n            onChange={(v) => this.updateFramerate(v)}\n            min={1}\n            max={60}\n            marks={framerateMarks}\n            defaultValue={this.state.framerate}\n            handle={SliderHandle}\n          />\n        </div>\n        <div className={'resolution-slider'} style={wrapperStyle}>\n          {`Resolution: ${this.state.resolution}`}\n          <Slider\n            onChange={(v) => this.updateResolution(v)}\n            min={1}\n            max={40}\n            marks={resolutionMarks}\n            defaultValue={this.state.resolution}\n            handle={SliderHandle}\n          />\n        </div>\n        <div className={'cell-color-picker'}>\n          Cell Color\n          <CompactPicker\n            color={this.state.cellColor}\n            onChangeComplete={this.handleCellColorUpdate}\n          />\n          ;\n        </div>\n        <div className={'cell-background-picker'}>\n          Background Color\n          <CompactPicker\n            color={this.state.backgroundColor}\n            onChangeComplete={this.handleBackgroundColorUpdate}\n          />\n          ;\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default GridCustomization;\n","import React, { Component } from 'react';\nimport GridCustomization from './GridCustomization';\n\nclass HomePage extends Component {\n  render() {\n    return (\n      <div>\n        Home Page!\n        <GridCustomization />\n      </div>\n    );\n  }\n}\n\nexport default HomePage;\n\n//TODO\n//add homepage text and fluff\n//styling\n","import React, { Component } from 'react';\n\nclass DrawGridPage extends Component {\n  render() {\n    return <div>Draw Grid Page!</div>;\n  }\n}\n\nexport default DrawGridPage;\n\n//TODO\n// add drawing grid\n// convert grid to RLE\n// find meaningful boundaries for saved RLE\n// run animation from grid sketch\n// swtich sketch components\n// add UI for customization\n// styling\n// allow for other rulesets\n","import React, { Component } from 'react';\n\nclass LoadRLEPage extends Component {\n  render() {\n    return <div>RLE Page!</div>;\n  }\n}\n\nexport default LoadRLEPage;\n\n//TODO\n// load in RLE grids\n// add animation\n// add UI customization\n// add padding for RLE input grids\n// styling\n// allow for other rulesets\n","import React, { Component } from 'react';\nimport p5 from 'p5';\n\nclass CellularAutomatonSketch extends Component {\n  componentDidMount() {\n    const { cols, rows, framerate, resolution } = this.props;\n    let { grid } = this.props;\n    let playButton;\n    let playing = false;\n\n    this.sketch = new p5((p) => {\n      p.setup = () => {\n        let width = cols * resolution;\n        let height = rows * resolution;\n\n        p.createCanvas(width, height).parent(this.props.refLoc.current);\n\n        p.frameRate(framerate);\n\n        playButton = p.createButton('Play');\n        playButton.mousePressed(togglePlay);\n        playButton.style('color', '#fff');\n        playButton.style('background-color', '#007bff');\n        playButton.style('border-color', '#007bff');\n        playButton.style('font-weight', '400');\n        playButton.style('border', '1px solid transparent');\n        playButton.style('padding', '.375rem .75rem');\n        playButton.style('font-size', '1rem');\n        playButton.style('line-height', '1.5');\n        playButton.style('border-radius', '.25rem');\n\n        playButton.position(50, 50);\n\n        p.noLoop();\n      };\n\n      function togglePlay() {\n        if (playing) {\n          p.noLoop();\n          playButton.html('Play');\n        } else {\n          p.loop();\n          playButton.html('Pause');\n        }\n        playing = !playing;\n      }\n\n      p.draw = () => {\n        p.background(0);\n\n        for (let i = 0; i < rows; i++) {\n          for (let j = 0; j < cols; j++) {\n            let x = j * resolution;\n            let y = i * resolution;\n            if (grid[i][j] === 1) {\n              p.fill(255);\n              p.stroke(0);\n              p.rect(x, y, resolution - 1, resolution - 1);\n            }\n          }\n        }\n\n        let next = this.createGrid(cols, rows);\n\n        for (let i = 0; i < rows; i++) {\n          for (let j = 0; j < cols; j++) {\n            let state = grid[i][j];\n            let neighbors = this.countNeighbors(grid, i, j, rows, cols);\n\n            if (state === 0 && neighbors === 3) {\n              next[i][j] = 1;\n            } else if (state === 1 && (neighbors < 2 || neighbors > 3)) {\n              next[i][j] = 0;\n            } else {\n              next[i][j] = state;\n            }\n          }\n        }\n        grid = next;\n      };\n    });\n  }\n\n  countNeighbors = (g, r, c, maxR, maxC) => {\n    let sum = 0;\n    for (let i = r - 1; i < r + 2; i++) {\n      for (let j = c - 1; j < c + 2; j++) {\n        if (i >= 0 && i < maxR && j >= 0 && j < maxC) {\n          sum += g[i][j];\n        }\n      }\n    }\n    sum -= g[r][c];\n    return sum;\n  };\n\n  createGrid = (rows, cols) => {\n    let grid = new Array(rows);\n    for (let i = 0; i < grid.length; i++) {\n      grid[i] = new Array(cols);\n    }\n    return grid;\n  };\n\n  render() {\n    return (\n      <div className=\"CellularAutomatonSketch\">\n        <div ref={this.props.refLoc}></div>\n      </div>\n    );\n  }\n}\n\nexport default CellularAutomatonSketch;\n\n//TODO\n// allow for different rulesets\n","import React, { Component } from 'react';\nimport CellularAutomatonSketch from './CellularAutomatonSketch';\nimport Button from 'react-bootstrap/Button';\n\nclass RandomGridPage extends Component {\n  constructor() {\n    super();\n    this.state = {\n      refreshVal: 0,\n      cols: 10,\n      rows: 10,\n      framerate: 60,\n      resolution: 20,\n      myGrid: [],\n    };\n    this.renderRef = React.createRef();\n    this.resetAutomata = this.resetAutomata.bind(this);\n    this.generateGrid = this.generateGrid.bind(this);\n  }\n\n  resetAutomata() {\n    let elem = document.querySelector('body > button');\n    elem.parentNode.removeChild(elem);\n    this.setState((state) => ({\n      refreshVal: state.refreshVal + 1,\n    }));\n  }\n\n  createGrid = (cols, rows) => {\n    let grid = new Array(rows);\n    for (let i = 0; i < grid.length; i++) {\n      grid[i] = new Array(cols);\n    }\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols; j++) {\n        grid[i][j] = Math.floor(Math.random() * Math.floor(2));\n      }\n    }\n    return grid;\n  };\n\n  generateGrid() {\n    let { cols, rows } = this.state;\n    let newGrid = this.createGrid(cols, rows);\n    if (this.state.myGrid.length > 0) {\n      this.resetAutomata();\n    }\n    this.setState({ myGrid: newGrid });\n  }\n  render() {\n    let { cols, rows, framerate, resolution, myGrid } = this.state;\n\n    let displayResetButton = myGrid.length > 0;\n    return (\n      <div>\n        Random Grid Page!\n        <Button onClick={this.generateGrid}>Create Random Grid</Button>\n        {myGrid.length > 0 && (\n          <CellularAutomatonSketch\n            refLoc={this.renderRef}\n            rows={rows}\n            cols={cols}\n            grid={myGrid}\n            framerate={framerate}\n            resolution={resolution}\n            key={this.state.refreshVal}\n          />\n        )}\n        {displayResetButton && (\n          <Button onClick={this.resetAutomata}>Reset</Button>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default RandomGridPage;\n\n// TODO\n// save grid to RLE\n// UI for changing parameters\n// find meaningful boundaries for saved RLE grids\n// styling\n// allow for different rulesets\n","import React from 'react';\nimport './App.css';\nimport Tab from 'react-bootstrap/Tab';\nimport Tabs from 'react-bootstrap/Tabs';\nimport HomePage from './HomePage';\nimport DrawGridPage from './DrawGridPage';\nimport LoadRLEPage from './LoadRLEPage';\nimport RandomGridPage from './RandomGridPage';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      refreshTabVal: 0,\n    };\n    this.resetTab = this.resetTab.bind(this);\n  }\n\n  resetTab() {\n    let elem = document.querySelector('body > button');\n    if (elem !== null) {\n      elem.parentNode.removeChild(elem);\n      this.setState((state) => ({\n        refreshTabVal: state.refreshTabVal + 1,\n      }));\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Tabs\n          defaultActiveKey=\"home\"\n          id=\"main-tab-group\"\n          onSelect={() => this.resetTab()}\n        >\n          <Tab eventKey=\"home\" title=\"Home\">\n            <HomePage />\n          </Tab>\n          <Tab eventKey=\"draw\" title=\"Draw Grid\">\n            <DrawGridPage />\n          </Tab>\n          <Tab eventKey=\"loadrle\" title=\"Load RLE\">\n            <LoadRLEPage />\n          </Tab>\n          <Tab eventKey=\"random\" title=\"Random Grid\">\n            <RandomGridPage key={this.state.refreshTabVal} />\n          </Tab>\n        </Tabs>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n//TODO:\n// load in RLE grids\n// save grid to RLE\n// UI for changing parameters\n// allow for different rulesets\n// allow user to draw grid\n// add padding for RLE input grids\n// find meaningful boundaries for saved RLE grids\n// styling\n// homepage\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}