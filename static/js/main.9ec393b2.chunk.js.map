{"version":3,"sources":["SliderHandle.js","SliderMarks.js","GridCustomization.js","HomePage.js","DrawGridPage.js","LoadRLEPage.js","CellularAutomatonSketch.js","RLElogic.js","savedRLEModal.js","RandomGridPage.js","App.js","serviceWorker.js","index.js"],"names":["SliderHandle","props","value","dragging","index","rest","FlexHandle","key","Value","styled","Handle","div","dimensionMarks","1","10","20","30","40","50","60","70","80","framerateMarks","resolutionMarks","5","15","25","35","cellRatioMarks","0","100","wrapperStyle","width","margin","GridCustomization","handleSubmit","setState","drawerOpen","submitFunction","state","toggleDrawer","open","event","updateColumns","val","cols","updateRows","rows","updateFramerate","framerate","updateResolution","resolution","updateCellRatio","alivePercentage","handleCellColorUpdate","color","cellColor","hex","handleBackgroundColorUpdate","backgroundColor","toggleBornButton","isPressed","newPressings","bornRulePressed","slice","birthRule","reduce","out","bool","concat","toggleSurviveButton","surviveRulePressed","surviveRule","bind","setTimeout","alphaSlider1","document","querySelector","alphaSlider2","parentNode","removeChild","this","className","Fragment","Button","onClick","Drawer","anchor","onClose","ButtonToolbar","aria-label","map","String","join","ButtonGroup","ind","variant","style","onChange","v","min","max","marks","defaultValue","handle","parentTab","Component","HomePage","DrawGridPage","LoadRLEPage","CellularAutomatonSketch","countNeighbors","g","r","c","maxR","maxC","sum","i","j","createGrid","Array","length","playButton","nextButton","grid","playing","sketch","p5","p","togglePlay","noLoop","html","loop","toggleNext","draw","setup","height","createCanvas","parent","refLoc","current","frameRate","createButton","mousePressed","position","background","x","y","fill","stroke","rect","next","thisCell","nAlive","includes","ref","gridToRLE","bRule","sRule","rowSums","row","a","b","colSums","top","findIndex","bot","reverse","minCol","maxCol","findMeaningfulBoundaries","RLEarray","push","RLEgroups","rowString","col","cell","cellCounter","forEach","possibleOptimization","indicesToRemove","sort","splice","pop","encodeGrid","finishedWriting","pos","individualLine","toString","cells","match","charAt","SavedRLEModal","handleClose","showModal","handleShow","RLE","savedRLE","downloadRLEFile","data","file","Blob","type","window","navigator","msSaveOrOpenBlob","createElement","url","URL","createObjectURL","href","download","body","appendChild","click","revokeObjectURL","Modal","show","onHide","Header","closeButton","Title","Body","Footer","RandomGridPage","aliveP","modifiedProbRandom","Math","floor","random","updateParameters","newParams","resetAutomata","gridRows","generateGrid","myGrid","refreshVal","renderRef","React","createRef","saveRLE","newGrid","gridRLE","console","log","displayGrid","App","refreshTabVal","resetTab","elems","querySelectorAll","Tabs","defaultActiveKey","id","onSelect","Tab","eventKey","title","Boolean","location","hostname","ReactDOM","render","StrictMode","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9ec393b2.chunk.js","sourcesContent":["// Idea for this code comes from zealous-snyder-0bj4r\n\nimport React from 'react';\nimport styled from 'styled-components';\nimport { Handle } from 'rc-slider';\n\nexport function SliderHandle(props) {\n  const { value, dragging, index, ...rest } = props;\n\n  return (\n    <FlexHandle key={index} value={value} {...rest}>\n      {dragging && <Value>{value}</Value>}\n    </FlexHandle>\n  );\n}\n\nconst FlexHandle = styled(Handle)`\n  display: flex;\n  justify-content: center;\n`;\n\nconst Value = styled.div`\n  margin-top: -32px;\n  white-space: nowrap;\n  color: black;\n  font-size: 14px;\n  font-weight: bold;\n`;\n","const dimensionMarks = {\n  1: '1',\n  10: '10',\n  20: '20',\n  30: '30',\n  40: '40',\n  50: '50',\n  60: '60',\n  70: '70',\n  80: '80',\n};\n\nconst framerateMarks = {\n  1: '1',\n  10: '10',\n  20: '20',\n  30: '30',\n  40: '40',\n  50: '50',\n  60: '60',\n};\n\nconst resolutionMarks = {\n  1: '1',\n  5: '5',\n  10: '10',\n  15: '15',\n  20: '20',\n  25: '25',\n  30: '30',\n  35: '35',\n  40: '40',\n};\n\nconst cellRatioMarks = {\n  0: '0/100',\n  20: '20/80',\n  40: '40/60',\n  50: '50/50',\n  60: '60/40',\n  80: '80/20',\n  100: '100/0',\n};\n\nexport { dimensionMarks, framerateMarks, resolutionMarks, cellRatioMarks };\n","import React, { Component } from 'react';\nimport Slider from 'rc-slider';\nimport 'rc-slider/assets/index.css';\nimport { SliderHandle } from './SliderHandle';\nimport Drawer from '@material-ui/core/Drawer';\nimport {\n  dimensionMarks,\n  framerateMarks,\n  resolutionMarks,\n  cellRatioMarks,\n} from './SliderMarks';\nimport { ChromePicker } from 'react-color';\nimport './GridCustomization.css';\nimport Button from 'react-bootstrap/Button';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar';\n\nconst wrapperStyle = { width: 800, margin: 50 };\n\nclass GridCustomization extends Component {\n  constructor() {\n    super();\n    this.state = {\n      cols: 10,\n      rows: 10,\n      framerate: 10,\n      resolution: 10,\n      cellColor: '#000000',\n      backgroundColor: '#FFFFFF',\n      drawerOpen: false,\n      bornRulePressed: [\n        false,\n        false,\n        false,\n        true,\n        false,\n        false,\n        false,\n        false,\n        false,\n        false,\n      ],\n      surviveRulePressed: [\n        false,\n        false,\n        true,\n        true,\n        false,\n        false,\n        false,\n        false,\n        false,\n        false,\n      ],\n      birthRule: [3],\n      surviveRule: [2, 3],\n      alivePercentage: 50,\n    };\n    this.updateColumns = this.updateColumns.bind(this);\n    this.updateRows = this.updateRows.bind(this);\n    this.updateFramerate = this.updateFramerate.bind(this);\n    this.updateResolution = this.updateResolution.bind(this);\n    this.handleCellColorUpdate = this.handleCellColorUpdate.bind(this);\n    this.handleBackgroundColorUpdate = this.handleBackgroundColorUpdate.bind(\n      this\n    );\n    this.toggleDrawer = this.toggleDrawer.bind(this);\n    this.toggleBornButton = this.toggleBornButton.bind(this);\n    this.toggleSurviveButton = this.toggleSurviveButton.bind(this);\n    this.updateCellRatio = this.updateCellRatio.bind(this);\n  }\n\n  handleSubmit = () => {\n    this.setState({ drawerOpen: false });\n    this.props.submitFunction(this.state);\n  };\n\n  componentDidUpdate() {\n    setTimeout(function () {\n      let alphaSlider1 = document.querySelector(\n        'body > div.MuiDrawer-root.MuiDrawer-modal > div.MuiPaper-root.MuiDrawer-paper.MuiDrawer-paperAnchorRight.MuiPaper-elevation16 > div.cell-color-picker > div > div:nth-child(2) > div:nth-child(1) > div:nth-child(2) > div:nth-child(2)'\n      );\n      let alphaSlider2 = document.querySelector(\n        'body > div.MuiDrawer-root.MuiDrawer-modal > div.MuiPaper-root.MuiDrawer-paper.MuiDrawer-paperAnchorRight.MuiPaper-elevation16 > div.cell-background-picker > div > div:nth-child(2) > div:nth-child(1) > div:nth-child(2) > div:nth-child(2)'\n      );\n      if (alphaSlider1 !== null)\n        alphaSlider1.parentNode.removeChild(alphaSlider1);\n      if (alphaSlider2 !== null)\n        alphaSlider2.parentNode.removeChild(alphaSlider2);\n    }, 0);\n  }\n\n  toggleDrawer = (open) => (event) => {\n    this.setState({ drawerOpen: open });\n  };\n\n  updateColumns = (val) => {\n    this.setState({\n      cols: val,\n    });\n  };\n\n  updateRows = (val) => {\n    this.setState({\n      rows: val,\n    });\n  };\n\n  updateFramerate = (val) => {\n    this.setState({\n      framerate: val,\n    });\n  };\n\n  updateResolution = (val) => {\n    this.setState({\n      resolution: val,\n    });\n  };\n\n  updateCellRatio = (val) => {\n    this.setState({\n      alivePercentage: val,\n    });\n  };\n\n  handleCellColorUpdate = (color) => {\n    this.setState({ cellColor: color.hex });\n  };\n\n  handleBackgroundColorUpdate = (color) => {\n    this.setState({ backgroundColor: color.hex });\n  };\n\n  toggleBornButton = (isPressed, index) => {\n    let newPressings = this.state.bornRulePressed.slice(0);\n    newPressings[index] = !isPressed;\n    this.setState({\n      bornRulePressed: newPressings,\n      birthRule: newPressings.reduce(\n        (out, bool, index) => (bool ? out.concat(index) : out),\n        []\n      ),\n    });\n  };\n\n  toggleSurviveButton = (isPressed, index) => {\n    let newPressings = this.state.surviveRulePressed.slice(0);\n    newPressings[index] = !isPressed;\n    this.setState({\n      surviveRulePressed: newPressings,\n      surviveRule: newPressings.reduce(\n        (out, bool, index) => (bool ? out.concat(index) : out),\n        []\n      ),\n    });\n  };\n\n  render() {\n    let { bornRulePressed, surviveRulePressed } = this.state;\n\n    return (\n      <div className=\"customizer-drawer\">\n        <React.Fragment key={'drawerOpen'}>\n          <Button onClick={this.toggleDrawer(true)}>{'Customize'}</Button>\n          <Drawer\n            anchor={'right'}\n            open={this.state.drawerOpen}\n            onClose={this.toggleDrawer(false)}\n          >\n            {'Customization'}\n            <ButtonToolbar aria-label=\"Born Rule\">\n              {`Born Rule: B${this.state.birthRule.map(String).join('')}`}\n              <ButtonGroup className=\"mr-2\" aria-label=\"born group\">\n                {bornRulePressed.map((val, ind) => {\n                  return (\n                    <Button\n                      key={ind}\n                      onClick={() => this.toggleBornButton(val, ind)}\n                      variant={val === true ? 'success' : 'outline-success'}\n                    >\n                      {ind}\n                    </Button>\n                  );\n                })}\n              </ButtonGroup>\n              {`Survive Rule: S${this.state.surviveRule.map(String).join('')}`}\n              <ButtonGroup className=\"mr-2\" aria-label=\"survive group\">\n                {surviveRulePressed.map((val, ind) => {\n                  return (\n                    <Button\n                      key={ind}\n                      onClick={() => this.toggleSurviveButton(val, ind)}\n                      variant={val === true ? 'success' : 'outline-success'}\n                    >\n                      {ind}\n                    </Button>\n                  );\n                })}\n              </ButtonGroup>\n            </ButtonToolbar>\n            <div className={'column-slider'} style={wrapperStyle}>\n              {`Columns: ${this.state.cols}`}\n              <Slider\n                onChange={(v) => this.updateColumns(v)}\n                min={1}\n                max={80}\n                marks={dimensionMarks}\n                defaultValue={this.state.cols}\n                handle={SliderHandle}\n              />\n            </div>\n            <div className={'row-slider'} style={wrapperStyle}>\n              {`Rows: ${this.state.rows}`}\n              <Slider\n                onChange={(v) => this.updateRows(v)}\n                min={1}\n                max={80}\n                marks={dimensionMarks}\n                defaultValue={this.state.rows}\n                handle={SliderHandle}\n              />\n            </div>\n            {this.props.parentTab === 'RANDOM' && (\n              <div\n                className={'random-probabilities-slider'}\n                style={wrapperStyle}\n              >\n                {'Alive/Dead Cell Ratio'}\n                <Slider\n                  onChange={(v) => this.updateCellRatio(v)}\n                  min={0}\n                  max={100}\n                  marks={cellRatioMarks}\n                  defaultValue={this.state.alivePercentage}\n                  handle={SliderHandle}\n                />\n              </div>\n            )}\n            <div className={'framerate-slider'} style={wrapperStyle}>\n              {`Framerate: ${this.state.framerate}`}\n              <Slider\n                onChange={(v) => this.updateFramerate(v)}\n                min={1}\n                max={60}\n                marks={framerateMarks}\n                defaultValue={this.state.framerate}\n                handle={SliderHandle}\n              />\n            </div>\n            <div className={'resolution-slider'} style={wrapperStyle}>\n              {`Resolution: ${this.state.resolution}`}\n              <Slider\n                onChange={(v) => this.updateResolution(v)}\n                min={1}\n                max={40}\n                marks={resolutionMarks}\n                defaultValue={this.state.resolution}\n                handle={SliderHandle}\n              />\n            </div>\n            <div className={'cell-color-picker'}>\n              {`Cell Color: ${this.state.cellColor}`}\n              <ChromePicker\n                color={this.state.cellColor}\n                onChange={this.handleCellColorUpdate}\n              />\n            </div>\n            <div className={'cell-background-picker'}>\n              {`Background Color: ${this.state.backgroundColor}`}\n              <ChromePicker\n                color={this.state.backgroundColor}\n                onChange={this.handleBackgroundColorUpdate}\n              />\n            </div>\n            <Button onClick={this.handleSubmit}>Submit</Button>\n          </Drawer>\n        </React.Fragment>\n      </div>\n    );\n  }\n}\n\nexport default GridCustomization;\n\n// TODO styling\n","import React, { Component } from 'react';\nimport GridCustomization from './GridCustomization';\n\nclass HomePage extends Component {\n  render() {\n    return (\n      <div>\n        Home Page!\n        <GridCustomization parentTab=\"HOME\" />\n      </div>\n    );\n  }\n}\n\nexport default HomePage;\n\n//TODO\n//add homepage text and fluff\n//styling\n// add user-select: none to text stuff\n","import React, { Component } from 'react';\n\nclass DrawGridPage extends Component {\n  render() {\n    return <div>Draw Grid Page!</div>;\n  }\n}\n\nexport default DrawGridPage;\n\n//TODO\n// add drawing grid\n// convert grid to RLE\n// find meaningful boundaries for saved RLE\n// run animation from grid sketch\n// swtich sketch components\n// add UI for customization\n// styling\n// allow for other rulesets\n","import React, { Component } from 'react';\n\nclass LoadRLEPage extends Component {\n  render() {\n    return <div>RLE Page!</div>;\n  }\n}\n\nexport default LoadRLEPage;\n\n//TODO\n// load in RLE grids\n// add animation\n// add UI customization\n// add padding for RLE input grids\n// styling\n// allow for other rulesets\n","import React, { Component } from 'react';\nimport p5 from 'p5';\n\nclass CellularAutomatonSketch extends Component {\n  componentDidMount() {\n    let {\n      cols,\n      rows,\n      framerate,\n      resolution,\n      birthRule,\n      surviveRule,\n      backgroundColor,\n      cellColor,\n    } = this.props;\n\n    let { grid } = this.props;\n    let playButton;\n    let playing = false;\n    let nextButton;\n\n    this.sketch = new p5((p) => {\n      p.setup = () => {\n        let width = cols * resolution;\n        let height = rows * resolution;\n\n        p.createCanvas(width, height).parent(this.props.refLoc.current);\n\n        p.frameRate(framerate);\n\n        playButton = p.createButton('Play');\n        playButton.mousePressed(togglePlay);\n        playButton.style('color', '#fff');\n        playButton.style('background-color', '#007bff');\n        playButton.style('border-color', '#007bff');\n        playButton.style('font-weight', '400');\n        playButton.style('border', '1px solid transparent');\n        playButton.style('padding', '.375rem .75rem');\n        playButton.style('font-size', '1rem');\n        playButton.style('line-height', '1.5');\n        playButton.style('border-radius', '.25rem');\n\n        playButton.position(50, 50);\n\n        nextButton = p.createButton('Next');\n        nextButton.mousePressed(toggleNext);\n        nextButton.style('color', '#fff');\n        nextButton.style('background-color', '#007bff');\n        nextButton.style('border-color', '#007bff');\n        nextButton.style('font-weight', '400');\n        nextButton.style('border', '1px solid transparent');\n        nextButton.style('padding', '.375rem .75rem');\n        nextButton.style('font-size', '1rem');\n        nextButton.style('line-height', '1.5');\n        nextButton.style('border-radius', '.25rem');\n\n        nextButton.position(100, 100);\n\n        p.noLoop();\n      };\n\n      function togglePlay() {\n        if (playing) {\n          p.noLoop();\n          playButton.html('Play');\n        } else {\n          p.loop();\n          playButton.html('Pause');\n        }\n        playing = !playing;\n      }\n\n      function toggleNext() {\n        p.draw();\n      }\n\n      p.draw = () => {\n        p.background(backgroundColor);\n\n        for (let i = 0; i < rows; i++) {\n          for (let j = 0; j < cols; j++) {\n            let x = j * resolution;\n            let y = i * resolution;\n            if (grid[i][j] === 1) {\n              p.fill(cellColor);\n              p.stroke(backgroundColor);\n              p.rect(x, y, resolution - 1, resolution - 1);\n            }\n          }\n        }\n\n        let next = this.createGrid(rows, cols);\n\n        for (let i = 0; i < rows; i++) {\n          for (let j = 0; j < cols; j++) {\n            let thisCell = grid[i][j];\n            let nAlive = this.countNeighbors(grid, i, j, rows, cols);\n\n            if (thisCell === 1) {\n              // alive cell, check for survival\n              if (surviveRule.includes(nAlive)) {\n                // lives on\n                next[i][j] = 1;\n              } else {\n                // underpopulation or overpopulation -> dies\n                next[i][j] = 0;\n              }\n            } else {\n              // dead cell, check for birth\n              if (birthRule.includes(nAlive)) {\n                // reproduces\n                next[i][j] = 1;\n              } else {\n                // stays dead\n                next[i][j] = 0;\n              }\n            }\n          }\n        }\n        grid = next;\n      };\n    });\n  }\n\n  countNeighbors = (g, r, c, maxR, maxC) => {\n    let sum = 0;\n    for (let i = r - 1; i < r + 2; i++) {\n      for (let j = c - 1; j < c + 2; j++) {\n        if (i >= 0 && i < maxR && j >= 0 && j < maxC) {\n          sum += g[i][j];\n        }\n      }\n    }\n    sum -= g[r][c];\n    return sum;\n  };\n\n  createGrid = (r, c) => {\n    let g = new Array(r);\n    for (let i = 0; i < g.length; i++) {\n      g[i] = new Array(c);\n    }\n    return g;\n  };\n\n  render() {\n    return (\n      <div className=\"CellularAutomatonSketch\">\n        <div ref={this.props.refLoc}></div>\n      </div>\n    );\n  }\n}\n\nexport default CellularAutomatonSketch;\n\n//TODO\n// change position and style of buttons\n","export default function gridToRLE(grid, bRule, sRule) {\n  let { top, bot, minCol, maxCol } = findMeaningfulBoundaries(grid);\n  let RLEarray = [];\n  RLEarray.push(\n    `x = ${maxCol - minCol + 1}, y = ${bot - top + 1}, rule = B${bRule\n      .map(String)\n      .join('')}/S${sRule.map(String).join('')}`\n  );\n  let RLEgroups = encodeGrid(grid, top, bot, minCol, maxCol);\n  let finishedWriting = false;\n  let pos = 0;\n  let individualLine = '';\n  while (finishedWriting === false) {\n    if (RLEgroups[pos][1] === 1) {\n      // single cell\n      if (1 + individualLine.length > 70) {\n        // new line\n        RLEarray.push(individualLine);\n        individualLine = RLEgroups[pos][0];\n      } else {\n        // same line\n        individualLine = individualLine.concat(RLEgroups[pos][0]);\n      }\n    } else {\n      if (\n        RLEgroups[pos][1].toString().length + (individualLine.length + 1) >\n        70\n      ) {\n        // new line\n        RLEarray.push(individualLine);\n        individualLine = RLEgroups[pos][1].toString().concat(RLEgroups[pos][0]);\n      } else {\n        // same line\n        individualLine = individualLine.concat(\n          RLEgroups[pos][1].toString().concat(RLEgroups[pos][0])\n        );\n      }\n    }\n    if (pos === RLEgroups.length - 1) {\n      RLEarray.push(individualLine);\n      finishedWriting = true;\n    } else {\n      pos++;\n    }\n  }\n\n  return RLEarray;\n}\n\nfunction findMeaningfulBoundaries(grid) {\n  let rowSums = grid.map((row) => {\n    return row.reduce((a, b) => {\n      return a + b;\n    });\n  });\n  let sumCol = (r, a) => r.map((b, i) => a[i] + b);\n  let colSums = grid.reduce(sumCol);\n\n  let top = rowSums.findIndex((v) => v > 0);\n  let bot =\n    rowSums.length -\n    1 -\n    rowSums\n      .slice()\n      .reverse()\n      .findIndex((v) => v > 0);\n\n  let minCol = colSums.findIndex((v) => v > 0);\n  let maxCol =\n    colSums.length -\n    1 -\n    colSums\n      .slice()\n      .reverse()\n      .findIndex((v) => v > 0);\n\n  return {\n    top,\n    bot,\n    minCol,\n    maxCol,\n  };\n}\n\nfunction cellCounter(cells) {\n  let s = cells.match(/([a-zA-Z])\\1*/g) || [];\n  return s.map((v) => {\n    return [v.charAt(0), v.length];\n  });\n}\n\nfunction encodeGrid(grid, top, bot, minCol, maxCol) {\n  let RLEgroups = [];\n  for (let row = top; row < bot + 1; row++) {\n    let rowString = '';\n    for (let col = minCol; col < maxCol + 1; col++) {\n      let cell = grid[row][col];\n      if (cell === 1) {\n        rowString = rowString.concat('o');\n      } else {\n        rowString = rowString.concat('b');\n      }\n    }\n    let group = cellCounter(rowString);\n    group.forEach((g) => {\n      RLEgroups.push(g);\n    });\n    if (row !== bot) {\n      RLEgroups.push(['$', 1]);\n    } else {\n      RLEgroups.push(['!', 1]);\n    }\n  }\n\n  let possibleOptimization = true;\n  while (possibleOptimization === true) {\n    possibleOptimization = false;\n    let indicesToRemove = [];\n    for (let i = 0; i < RLEgroups.length; i++) {\n      if (i < RLEgroups.length - 1) {\n        if (\n          ['$', '!'].includes(RLEgroups[i + 1][0]) &&\n          RLEgroups[i][0] === 'b'\n        ) {\n          indicesToRemove.push(i);\n        }\n        if (RLEgroups[i][0] === RLEgroups[i + 1][0]) {\n          RLEgroups[i + 1] = [\n            RLEgroups[i][0],\n            RLEgroups[i][1] + RLEgroups[i + 1][1],\n          ];\n          indicesToRemove.push(i);\n        }\n      }\n    }\n\n    if (indicesToRemove.length > 0) {\n      possibleOptimization = true;\n      // delete indices\n      indicesToRemove.sort(function (a, b) {\n        return a - b;\n      });\n      while (indicesToRemove.length) {\n        RLEgroups.splice(indicesToRemove.pop(), 1);\n      }\n    }\n  }\n  return RLEgroups;\n}\n","import React, { Component } from 'react';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport gridToRLE from './RLElogic';\n\nclass SavedRLEModal extends Component {\n  constructor() {\n    super();\n    this.state = {\n      showModal: false,\n      savedRLE: '',\n    };\n    this.handleClose = this.handleClose.bind(this);\n    this.handleShow = this.handleShow.bind(this);\n  }\n\n  handleClose = () => {\n    this.setState({ showModal: false });\n  };\n\n  handleShow = () => {\n    let RLE = gridToRLE(this.props.grid, this.props.bRule, this.props.sRule);\n    this.setState({ showModal: true, savedRLE: RLE.join('\\n') });\n  };\n\n  // Function to download data to a file\n  downloadRLEFile = () => {\n    let data = this.state.savedRLE;\n    let filename = 'savedRLE.rle';\n    let type = '.rle';\n    let file = new Blob([data], { type: type });\n    if (window.navigator.msSaveOrOpenBlob)\n      // IE10+\n      window.navigator.msSaveOrOpenBlob(file, filename);\n    else {\n      // Others\n      let a = document.createElement('a'),\n        url = URL.createObjectURL(file);\n      a.href = url;\n      a.download = filename;\n      document.body.appendChild(a);\n      a.click();\n      setTimeout(function () {\n        document.body.removeChild(a);\n        window.URL.revokeObjectURL(url);\n      }, 0);\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <Button variant=\"primary\" onClick={this.handleShow}>\n          View RLE File\n        </Button>\n\n        <Modal show={this.state.showModal} onHide={this.handleClose}>\n          <Modal.Header closeButton>\n            <Modal.Title>RLE File</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>{this.state.savedRLE}</Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"secondary\" onClick={this.handleClose}>\n              Close\n            </Button>\n            <Button variant=\"primary\" onClick={this.downloadRLEFile}>\n              Download RLE File\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nexport default SavedRLEModal;\n","import Button from 'react-bootstrap/Button';\nimport CellularAutomatonSketch from './CellularAutomatonSketch';\nimport GridCustomization from './GridCustomization';\nimport gridToRLE from './RLElogic';\nimport React, { Component } from 'react';\nimport SavedRLEModal from './savedRLEModal';\n\n/*\n    Component for Random Grid Tab\n*/\n\nclass RandomGridPage extends Component {\n  constructor() {\n    super();\n    this.state = {\n      alivePercentage: 50,\n      backgroundColor: '#FFFFFF',\n      birthRule: [3],\n      cellColor: '#000000',\n      cols: 10,\n      framerate: 5,\n      gridRows: 10,\n      myGrid: [],\n      refreshVal: 0,\n      resolution: 20,\n      surviveRule: [2, 3],\n    };\n    this.renderRef = React.createRef();\n    this.resetAutomata = this.resetAutomata.bind(this);\n    this.generateGrid = this.generateGrid.bind(this);\n    this.saveRLE = this.saveRLE.bind(this);\n    this.updateParameters = this.updateParameters.bind(this);\n  }\n\n  resetAutomata() {\n    // refresh grid by increasing key\n    this.setState((state) => ({\n      refreshVal: state.refreshVal + 1,\n    }));\n  }\n\n  createGrid = (r, c, aliveP) => {\n    // create grid with random cells\n    let grid = new Array(r);\n    for (let i = 0; i < grid.length; i++) {\n      grid[i] = new Array(c);\n    }\n    let modifiedProbRandom = Array(100).fill(1).fill(0, aliveP);\n    for (let i = 0; i < r; i++) {\n      for (let j = 0; j < c; j++) {\n        grid[i][j] = modifiedProbRandom[Math.floor(Math.random() * 100)];\n      }\n    }\n    return grid;\n  };\n\n  generateGrid() {\n    // generate new grid\n    let { cols, gridRows, alivePercentage } = this.state;\n    let newGrid = this.createGrid(gridRows, cols, alivePercentage);\n    if (this.state.myGrid.length > 0) {\n      this.resetAutomata();\n    }\n    this.setState({ myGrid: newGrid });\n  }\n\n  saveRLE() {\n    // create RLE strings from grid\n    let { birthRule, myGrid, surviveRule } = this.state;\n    let gridRLE = gridToRLE(myGrid, birthRule, surviveRule);\n    console.log(gridRLE);\n  }\n\n  updateParameters = (newParams) => {\n    // update grid parameters passed up from customization drawer\n    this.resetAutomata();\n    setTimeout(() => {\n      this.setState(\n        {\n          alivePercentage: newParams.alivePercentage,\n          backgroundColor: newParams.backgroundColor,\n          birthRule: newParams.birthRule,\n          cellColor: newParams.cellColor,\n          cols: newParams.cols,\n          framerate: newParams.framerate,\n          gridRows: newParams.rows,\n          resolution: newParams.resolution,\n          surviveRule: newParams.surviveRule,\n        },\n        () => this.generateGrid()\n      );\n    }, 0);\n  };\n\n  render() {\n    // render random grid page\n    let {\n      backgroundColor,\n      birthRule,\n      cellColor,\n      cols,\n      framerate,\n      gridRows,\n      myGrid,\n      resolution,\n      surviveRule,\n    } = this.state;\n\n    // check if grid exists, then render grid\n    let displayGrid = myGrid.length > 0;\n\n    return (\n      <div className=\"random-page\">\n        Random Grid Page!\n        <div className=\"customization-container\">\n          <GridCustomization\n            parentTab={'RANDOM'}\n            submitFunction={this.updateParameters}\n          />\n        </div>\n        <div className=\"generate-grid-container\">\n          <Button onClick={this.generateGrid}>Create Random Grid</Button>\n        </div>\n        {displayGrid && (\n          <div className=\"sketch-container\">\n            <CellularAutomatonSketch\n              backgroundColor={backgroundColor}\n              birthRule={birthRule}\n              cellColor={cellColor}\n              cols={cols}\n              framerate={framerate}\n              grid={myGrid}\n              key={this.state.refreshVal}\n              refLoc={this.renderRef}\n              resolution={resolution}\n              rows={gridRows}\n              surviveRule={surviveRule}\n            />\n          </div>\n        )}\n        {displayGrid && (\n          <div className=\"reset-button-container\">\n            <Button onClick={this.resetAutomata}>Reset</Button>\n          </div>\n        )}\n        {displayGrid && (\n          <div className=\"save-rle-container\">\n            <SavedRLEModal\n              grid={this.state.myGrid}\n              bRule={this.state.birthRule}\n              sRule={this.state.surviveRule}\n            />\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default RandomGridPage;\n\n// TODO\n// styling\n// display RLE\n","import React from 'react';\nimport './App.css';\nimport Tab from 'react-bootstrap/Tab';\nimport Tabs from 'react-bootstrap/Tabs';\nimport HomePage from './HomePage';\nimport DrawGridPage from './DrawGridPage';\nimport LoadRLEPage from './LoadRLEPage';\nimport RandomGridPage from './RandomGridPage';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      refreshTabVal: 0,\n    };\n    this.resetTab = this.resetTab.bind(this);\n  }\n\n  resetTab() {\n    setTimeout(() => {\n      let elems = document.querySelectorAll('body > button');\n      if (elems.length > 0) {\n        for (let i = 0; i < elems.length; i++) {\n          elems[i].parentNode.removeChild(elems[i]);\n        }\n        this.setState((state) => ({\n          refreshTabVal: state.refreshTabVal + 1,\n        }));\n      }\n    }, 0);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Tabs\n          defaultActiveKey=\"home\"\n          id=\"main-tab-group\"\n          onSelect={() => this.resetTab()}\n        >\n          <Tab eventKey=\"home\" title=\"Home\">\n            <HomePage />\n          </Tab>\n          <Tab eventKey=\"draw\" title=\"Draw Grid\">\n            <DrawGridPage />\n          </Tab>\n          <Tab eventKey=\"loadrle\" title=\"Load RLE\">\n            <LoadRLEPage />\n          </Tab>\n          <Tab eventKey=\"random\" title=\"Random Grid\">\n            <RandomGridPage key={this.state.refreshTabVal} />\n          </Tab>\n        </Tabs>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n//TODO:\n// load in RLE grids\n// save grid to RLE\n// UI for changing parameters\n// allow for different rulesets\n// allow user to draw grid\n// add padding for RLE input grids\n// find meaningful boundaries for saved RLE grids\n// styling\n// homepage\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}